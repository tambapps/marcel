/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.tambapps.marcel.lexer;
import static com.tambapps.marcel.lexer.TokenType.*;
import java.util.Stack;
import java.io.IOException;
import java.io.StringReader;

/**
  * Marcel lang lexer
  */

public class MarcelJflexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int RAW_STRING = 4;
  public static final int SHORT_TEMPLATE_ENTRY = 6;
  public static final int BLOCK_COMMENT = 8;
  public static final int DOC_COMMENT = 10;
  public static final int CHAR_STRING = 12;
  public static final int SIMPLE_STRING = 14;
  public static final int REGEX_STRING = 16;
  public static final int LONG_TEMPLATE_ENTRY = 18;
  public static final int UNMATCHED_BACKTICK = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14336 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1"+
    "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65"+
    "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2"+
    "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115"+
    "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13"+
    "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142"+
    "\1\25\45\13\1\143\1\13\1\25\1\30\4\13\1\30\1\144\1\145\1\16\1\13\1\16\1\13"+
    "\1\16\1\145\1\71\3\13\1\146\1\1\1\147\1\115\2\1\1\115\5\13\1\27\1\150\1\13"+
    "\1\151\4\13\1\40\1\13\1\152\2\1\1\65\1\13\1\153\1\154\2\13\1\155\1\13\1\77"+
    "\1\115\2\1\1\13\1\113\3\13\1\154\2\1\2\115\1\156\5\1\1\110\2\13\1\146\1\157"+
    "\1\115\2\1\1\160\1\13\1\161\1\42\2\13\1\40\1\1\2\13\1\146\1\1\1\162\1\42\1"+
    "\13\1\153\1\46\5\1\1\163\1\164\14\13\4\1\21\13\1\142\2\13\1\142\1\165\1\13"+
    "\1\153\3\13\1\166\1\167\1\170\1\125\1\167\2\1\1\171\4\1\1\172\1\1\1\125\6"+
    "\1\1\173\1\174\1\175\1\176\1\177\3\1\1\200\147\1\2\13\1\152\2\13\1\152\10"+
    "\13\1\201\1\202\2\13\1\134\3\13\1\203\1\1\1\13\1\113\4\204\4\1\1\127\35\1"+
    "\1\205\2\1\1\206\1\25\4\13\1\207\1\25\4\13\1\135\1\110\1\13\1\153\1\25\4\13"+
    "\1\152\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1"+
    "\125\4\1\2\13\1\153\20\13\1\125\1\13\1\210\1\1\2\13\1\152\1\127\1\13\1\153"+
    "\4\13\1\40\2\1\1\211\1\212\5\13\1\213\1\13\1\152\1\27\3\1\1\211\1\214\1\13"+
    "\1\31\1\1\3\13\1\146\1\212\2\13\1\146\1\1\1\115\1\1\1\215\1\42\1\13\1\40\1"+
    "\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\216\1\217\2\13\1\46"+
    "\1\1\1\220\1\115\1\13\1\221\3\13\1\222\1\223\1\224\1\30\1\66\1\225\1\226\1"+
    "\204\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\146\1\13\1\227\2\13\1\155\20"+
    "\1\26\13\1\153\6\13\1\77\2\1\1\113\1\230\1\56\1\231\1\232\6\13\1\16\1\1\1"+
    "\160\25\13\1\153\1\1\4\13\1\212\2\13\1\27\2\1\1\155\7\1\1\216\7\13\1\125\1"+
    "\1\1\115\1\25\1\30\1\25\1\30\1\233\4\13\1\152\1\234\1\235\2\1\1\236\1\13\1"+
    "\14\1\237\2\153\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2\13\1\1\1\13"+
    "\1\240\2\13\1\40\1\13\1\153\2\13\1\241\3\1\11\13\1\153\1\115\2\13\1\241\1"+
    "\13\1\155\2\13\1\27\3\13\1\146\11\1\23\13\1\113\1\13\1\40\1\27\11\1\1\242"+
    "\2\13\1\243\1\13\1\40\1\13\1\113\1\13\1\152\4\1\1\13\1\244\1\13\1\40\1\13"+
    "\1\77\4\1\3\13\1\245\4\1\1\71\1\246\1\13\1\146\2\1\1\13\1\125\1\13\1\125\2"+
    "\1\1\124\1\13\1\154\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1"+
    "\46\3\1\3\13\1\31\3\13\1\31\60\1\1\160\2\13\1\27\2\1\1\65\1\1\1\160\2\13\2"+
    "\1\1\13\1\46\1\115\1\160\1\13\1\113\1\65\1\1\2\13\1\247\1\160\2\13\1\31\1"+
    "\250\1\251\2\1\1\13\1\22\1\155\5\1\1\252\1\253\1\46\2\13\1\152\1\1\1\115\1"+
    "\73\1\55\1\56\1\70\1\1\1\254\1\16\11\1\3\13\1\154\1\255\1\115\2\1\3\13\1\1"+
    "\1\256\1\115\12\1\2\13\1\152\2\1\1\257\2\1\3\13\1\1\1\260\1\115\2\1\2\13\1"+
    "\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34\1\3\13\1\46"+
    "\20\1\1\56\1\13\1\152\1\1\1\71\1\115\1\1\1\212\1\13\67\1\71\13\1\77\16\1\14"+
    "\13\1\146\53\1\2\13\1\152\75\1\44\13\1\113\33\1\43\13\1\46\1\13\1\152\1\115"+
    "\6\1\1\13\1\153\1\1\3\13\1\1\1\146\1\115\1\160\1\261\1\13\67\1\4\13\1\154"+
    "\1\71\3\1\1\160\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1\1\16\77\1\6\13"+
    "\1\30\1\125\1\46\1\77\66\1\5\13\1\216\3\13\1\145\1\262\1\263\1\264\3\13\1"+
    "\265\1\266\1\13\1\267\1\270\1\36\24\13\1\271\1\13\1\36\1\135\1\13\1\135\1"+
    "\13\1\216\1\13\1\216\1\152\1\13\1\152\1\13\1\56\1\13\1\56\1\13\1\272\3\273"+
    "\14\13\1\154\3\1\4\13\1\146\1\115\112\1\1\264\1\13\1\274\1\275\1\276\1\277"+
    "\1\300\1\301\1\302\1\155\1\303\1\155\24\1\55\13\1\113\2\1\103\13\1\154\15"+
    "\13\1\153\150\13\1\16\25\1\41\13\1\153\36\1");

  /* The ZZ_CMAP_A table has 3136 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\7\1\11\1\105\1\106\1\105\22\0\1\7\1\13\1\30\1\12\1\4\1\73\1\77\1\25"+
    "\1\64\1\65\1\34\1\72\1\102\1\24\1\21\1\10\1\14\11\5\1\70\1\71\1\75\1\101\1"+
    "\76\1\74\1\104\1\6\1\16\1\6\1\22\1\23\1\22\5\1\1\17\10\1\1\20\2\1\1\15\2\1"+
    "\1\66\1\26\1\67\1\0\1\2\1\31\1\45\1\50\1\55\1\40\1\43\1\44\1\54\1\52\1\37"+
    "\1\63\1\57\1\46\1\61\1\53\1\36\1\56\1\1\1\42\1\47\1\41\1\27\1\35\1\62\1\60"+
    "\1\51\1\1\1\32\1\100\1\33\1\103\6\0\1\105\24\0\1\1\12\0\1\1\4\0\1\1\5\0\27"+
    "\1\1\0\12\1\4\0\14\1\16\0\5\1\7\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1\2\0\4\1\1\0"+
    "\1\1\6\0\1\1\1\0\3\1\1\0\1\1\1\0\4\1\1\0\23\1\1\0\13\1\10\0\6\1\1\0\26\1\2"+
    "\0\1\1\6\0\10\1\10\0\13\1\5\0\3\1\15\0\12\3\4\0\6\1\1\0\1\1\17\0\2\1\7\0\2"+
    "\1\12\3\3\1\2\0\2\1\1\0\16\1\15\0\11\1\13\0\1\1\16\0\12\3\6\1\4\0\2\1\4\0"+
    "\1\1\5\0\6\1\4\0\1\1\11\0\1\1\3\0\1\1\7\0\11\1\7\0\5\1\1\0\10\1\6\0\26\1\3"+
    "\0\1\1\2\0\1\1\7\0\12\1\4\0\12\3\1\1\4\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\1\1\3\0\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0\1\1\5\0\6\1\4\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\17\0\4\1\1\0\1\1\7\0\12\3\2\0\3\1\20\0\11\1\1\0\2\1\1\0\2\1\1"+
    "\0\5\1\3\0\1\1\2\0\1\1\30\0\1\1\13\0\10\1\2\0\1\1\3\0\1\1\1\0\6\1\3\0\3\1"+
    "\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0\14\1\13\0\10\1\1\0\2"+
    "\1\10\0\3\1\5\0\1\1\4\0\10\1\1\0\6\1\1\0\5\1\3\0\1\1\3\0\2\1\15\0\13\1\2\0"+
    "\1\1\6\0\3\1\10\0\1\1\12\0\6\1\5\0\22\1\3\0\10\1\1\0\11\1\1\0\1\1\2\0\7\1"+
    "\11\0\1\1\1\0\2\1\14\0\12\3\7\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4"+
    "\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0\2\1\11\0\1\1\2\0\5"+
    "\1\1\0\1\1\11\0\12\3\2\0\14\1\1\0\24\1\13\0\5\1\22\0\7\1\4\0\4\1\3\0\1\1\3"+
    "\0\2\1\7\0\3\1\4\0\15\1\14\0\1\1\1\0\6\1\1\0\1\1\5\0\1\1\2\0\13\1\1\0\15\1"+
    "\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2"+
    "\0\16\1\2\0\6\1\2\0\15\1\2\0\1\1\1\0\10\1\7\0\15\1\1\0\6\1\23\0\1\1\4\0\1"+
    "\1\3\0\5\1\2\0\22\1\1\0\1\1\5\0\17\1\1\0\16\1\2\0\5\1\13\0\14\1\13\0\1\1\15"+
    "\0\7\1\7\0\16\1\15\0\2\1\12\3\3\0\3\1\11\0\4\1\1\0\4\1\3\0\2\1\11\0\10\1\1"+
    "\0\1\1\1\0\1\1\1\0\1\1\1\0\6\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0"+
    "\6\1\14\0\2\105\7\0\1\1\15\0\1\1\2\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1"+
    "\6\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0\1\1\4\0\2\1"+
    "\13\0\5\1\6\0\4\1\3\0\2\1\14\0\10\1\7\0\10\1\1\0\7\1\6\0\2\1\12\0\5\1\5\0"+
    "\2\1\3\0\7\1\6\0\3\1\12\3\2\1\13\0\11\1\2\0\27\1\2\0\7\1\1\0\3\1\1\0\4\1\1"+
    "\0\4\1\2\0\6\1\3\0\1\1\1\0\1\1\2\0\5\1\1\0\12\1\12\3\5\1\1\0\3\1\1\0\10\1"+
    "\4\0\7\1\3\0\1\1\3\0\2\1\1\0\1\1\3\0\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1"+
    "\3\0\6\1\2\0\6\1\2\0\6\1\11\0\7\1\4\0\5\1\3\0\5\1\5\0\1\1\1\0\10\1\1\0\5\1"+
    "\1\0\1\1\1\0\2\1\1\0\2\1\1\0\12\1\6\0\12\1\2\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1"+
    "\3\0\14\1\1\0\16\1\1\0\2\1\1\0\2\1\1\0\10\1\6\0\4\1\4\0\16\1\2\0\1\1\1\0\14"+
    "\1\1\0\2\1\3\0\1\1\2\0\4\1\1\0\2\1\12\0\10\1\6\0\6\1\1\0\3\1\1\0\12\1\3\0"+
    "\1\1\12\0\4\1\13\0\12\3\1\1\1\0\1\1\3\0\7\1\1\0\1\1\1\0\4\1\1\0\17\1\1\0\2"+
    "\1\14\0\3\1\7\0\4\1\11\0\2\1\1\0\1\1\20\0\4\1\10\0\1\1\13\0\10\1\5\0\3\1\2"+
    "\0\1\1\2\0\2\1\2\0\4\1\1\0\14\1\1\0\1\1\1\0\7\1\1\0\21\1\1\0\4\1\2\0\10\1"+
    "\1\0\7\1\1\0\14\1\1\0\4\1\1\0\5\1\1\0\1\1\3\0\14\1\2\0\13\1\1\0\10\1\2\0\22"+
    "\3\1\0\2\1\1\0\1\1\2\0\1\1\1\0\12\1\1\0\4\1\1\0\1\1\1\0\1\1\6\0\1\1\4\0\1"+
    "\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\2\0\4\1\1\0\7\1\1\0\4\1\1\0\4\1\1\0\1\1\1\0\12\1"+
    "\1\0\5\1\1\0\3\1\1\0\5\1\1\0\5\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\3\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\17\2\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\1\1\32\1\33"+
    "\1\34\1\35\2\36\1\37\1\1\1\40\2\36\1\41"+
    "\3\42\1\36\1\0\1\43\1\36\1\44\1\36\1\45"+
    "\1\0\1\46\1\47\2\3\1\0\2\50\1\51\1\52"+
    "\1\53\1\54\1\0\1\55\1\0\2\3\1\50\1\56"+
    "\1\57\1\60\1\61\1\0\1\62\1\2\1\63\1\64"+
    "\17\2\1\65\22\2\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\2\104\1\0\1\105\1\106\1\36\1\50\1\107"+
    "\1\0\1\110\1\111\1\112\1\2\1\113\5\2\1\114"+
    "\2\2\1\115\5\2\1\116\1\117\14\2\1\120\12\2"+
    "\1\121\1\0\1\122\1\0\1\123\1\0\1\124\10\2"+
    "\1\125\1\126\2\2\1\127\4\2\1\130\4\2\1\131"+
    "\1\2\1\132\1\133\4\2\1\134\5\2\1\135\3\0"+
    "\10\2\1\136\2\2\1\137\1\140\1\141\1\142\1\2"+
    "\1\143\1\2\1\144\2\2\1\145\1\146\4\2\1\147"+
    "\3\0\1\2\1\150\1\2\1\151\2\2\1\152\1\153"+
    "\1\154\1\155\3\2\1\156\1\157\2\2\1\160\3\2"+
    "\1\0\4\2\1\161\1\2\1\162\3\2\1\163\1\164"+
    "\1\0\1\165\2\2\1\166\1\2\1\167\2\2\1\0"+
    "\2\2\1\170\1\2\1\171\1\0\1\172\1\173\1\2"+
    "\1\174\1\175";

  private static int [] zzUnpackAction() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u027f\0\u0545\0\u027f\0\u027f\0\u027f"+
    "\0\u058c\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d"+
    "\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5"+
    "\0\u027f\0\u027f\0\u027f\0\u027f\0\u027f\0\u027f\0\u09fc\0\u027f"+
    "\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u027f\0\u027f"+
    "\0\u0bed\0\u0c34\0\u027f\0\u0c7b\0\u027f\0\u027f\0\u0cc2\0\u0d09"+
    "\0\u027f\0\u0d50\0\u0d97\0\u0dde\0\u0c7b\0\u027f\0\u0e25\0\u027f"+
    "\0\u0e6c\0\u027f\0\u0eb3\0\u027f\0\u027f\0\u027f\0\u0efa\0\u0f41"+
    "\0\u027f\0\u0f88\0\u0fcf\0\u1016\0\u027f\0\u105d\0\u10a4\0\u10eb"+
    "\0\u1132\0\u1179\0\u11c0\0\u1207\0\u124e\0\u027f\0\u027f\0\u027f"+
    "\0\u1295\0\u027f\0\u12dc\0\u02c6\0\u1323\0\u136a\0\u13b1\0\u13f8"+
    "\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630"+
    "\0\u1677\0\u16be\0\u1705\0\u174c\0\u02c6\0\u1793\0\u17da\0\u1821"+
    "\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59"+
    "\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u027f"+
    "\0\u027f\0\u027f\0\u027f\0\u027f\0\u027f\0\u027f\0\u027f\0\u027f"+
    "\0\u027f\0\u1c91\0\u027f\0\u1cd8\0\u027f\0\u027f\0\u1d1f\0\u1d66"+
    "\0\u027f\0\u027f\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u027f\0\u027f"+
    "\0\u027f\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073"+
    "\0\u02c6\0\u20ba\0\u2101\0\u02c6\0\u2148\0\u218f\0\u21d6\0\u221d"+
    "\0\u2264\0\u02c6\0\u02c6\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7"+
    "\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u02c6"+
    "\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0"+
    "\0\u2837\0\u287e\0\u027f\0\u28c5\0\u1d66\0\u290c\0\u027f\0\u2953"+
    "\0\u02c6\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44"+
    "\0\u2b8b\0\u02c6\0\u02c6\0\u2bd2\0\u2c19\0\u02c6\0\u2c60\0\u2ca7"+
    "\0\u2cee\0\u2d35\0\u02c6\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u02c6"+
    "\0\u2e98\0\u02c6\0\u02c6\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u02c6"+
    "\0\u2ffb\0\u3042\0\u3089\0\u30d0\0\u3117\0\u02c6\0\u315e\0\u31a5"+
    "\0\u31ec\0\u3233\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd"+
    "\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u02c6\0\u02c6\0\u02c6"+
    "\0\u3587\0\u02c6\0\u35ce\0\u02c6\0\u3615\0\u365c\0\u02c6\0\u02c6"+
    "\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u02c6\0\u37bf\0\u3806\0\u384d"+
    "\0\u3894\0\u02c6\0\u38db\0\u02c6\0\u3922\0\u3969\0\u02c6\0\u02c6"+
    "\0\u02c6\0\u02c6\0\u39b0\0\u39f7\0\u3a3e\0\u02c6\0\u02c6\0\u3a85"+
    "\0\u3acc\0\u02c6\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76"+
    "\0\u3cbd\0\u3d04\0\u02c6\0\u3d4b\0\u02c6\0\u3d92\0\u3dd9\0\u3e20"+
    "\0\u02c6\0\u02c6\0\u3e67\0\u02c6\0\u3eae\0\u3ef5\0\u02c6\0\u3f3c"+
    "\0\u02c6\0\u3f83\0\u3fca\0\u4011\0\u4058\0\u409f\0\u02c6\0\u40e6"+
    "\0\u02c6\0\u412d\0\u02c6\0\u02c6\0\u4174\0\u027f\0\u02c6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\2\12\1\14\1\13\1\15\1\16\1\15"+
    "\1\17\1\20\1\21\4\13\1\22\2\13\1\23\1\24"+
    "\1\12\1\13\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\13\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\2\13\1\45\1\13\1\46\1\47"+
    "\3\13\1\50\1\13\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\12\1\70\1\12\1\15\4\71\1\72"+
    "\4\71\1\73\14\71\1\74\1\71\1\75\62\71\1\72"+
    "\4\71\1\76\14\71\1\76\1\71\1\77\56\71\1\12"+
    "\2\100\3\12\1\100\2\12\1\0\3\12\4\100\1\12"+
    "\2\100\3\12\1\100\5\12\27\100\21\12\2\0\10\101"+
    "\1\102\23\101\1\103\52\101\26\104\1\105\2\104\1\106"+
    "\55\104\25\107\1\110\1\105\60\107\10\111\1\112\15\111"+
    "\1\113\60\111\1\12\2\13\2\12\1\14\1\13\1\15"+
    "\1\16\1\15\1\17\1\20\1\21\4\13\1\22\2\13"+
    "\1\23\1\24\1\12\1\13\1\25\1\26\1\114\1\115"+
    "\1\31\1\32\1\13\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\2\13\1\45\1\13"+
    "\1\46\1\47\3\13\1\50\1\13\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\12\1\70\1\12\1\15"+
    "\110\0\6\13\5\0\5\13\1\0\2\13\3\0\1\13"+
    "\5\0\27\13\25\0\1\14\2\0\1\14\6\0\1\14"+
    "\2\0\1\116\1\117\1\120\1\121\1\122\3\0\1\117"+
    "\10\0\1\121\2\0\1\122\1\121\1\0\1\116\47\0"+
    "\1\15\1\0\1\15\74\0\1\15\10\0\1\123\23\0"+
    "\1\124\44\0\1\125\20\0\1\126\132\0\1\127\41\0"+
    "\1\130\7\0\1\131\2\0\1\131\6\0\1\131\1\132"+
    "\1\133\1\116\1\117\1\120\1\121\1\122\3\0\1\117"+
    "\10\0\1\121\2\0\1\122\1\121\1\0\1\116\1\0"+
    "\1\133\7\0\1\132\33\0\1\134\6\0\1\134\4\0"+
    "\1\135\111\0\1\136\51\0\1\137\2\0\1\140\35\0"+
    "\1\141\157\0\1\142\6\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\1\13\1\143\25\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\7\13\1\144\6\13\1\145\5\13\1\146\2\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\147\5\0"+
    "\1\13\1\150\4\13\1\151\5\13\1\152\12\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\5\13\1\153\7\13\1\154\11\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\6\13\1\155"+
    "\20\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\11\13\1\156\11\13\1\157\3\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\160\5\0"+
    "\1\13\1\161\1\162\5\13\1\163\1\164\15\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\12\13\1\165\14\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\1\13\1\166\25\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\167\5\0"+
    "\4\13\1\170\10\13\1\171\7\13\1\172\1\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\1\13\1\173\3\13\1\174\6\13\1\175\12\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\176\5\0"+
    "\6\13\1\177\20\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\1\13\1\200\6\13\1\201"+
    "\1\202\3\13\1\203\11\13\24\0\6\13\5\0\5\13"+
    "\1\0\2\13\3\0\1\204\5\0\5\13\1\205\2\13"+
    "\1\206\16\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\15\13\1\207\11\13\115\0\1\210"+
    "\6\0\1\211\26\0\1\212\46\0\1\213\113\0\1\214"+
    "\3\0\1\215\103\0\1\216\2\0\1\217\104\0\1\220"+
    "\107\0\1\221\107\0\1\222\1\0\1\223\3\0\4\71"+
    "\1\0\4\71\1\0\14\71\1\0\1\71\1\0\56\71"+
    "\1\0\2\224\3\0\1\224\6\0\4\224\1\0\2\224"+
    "\3\0\1\224\2\0\1\225\2\0\27\224\23\0\11\226"+
    "\1\0\15\226\1\227\57\226\30\0\1\230\57\0\6\100"+
    "\5\0\5\100\1\0\2\100\3\0\1\100\5\0\27\100"+
    "\57\0\1\231\62\0\1\232\76\0\26\104\1\0\2\104"+
    "\1\0\55\104\25\107\2\0\60\107\10\111\1\0\15\111"+
    "\1\0\60\111\10\76\1\226\1\0\15\76\1\233\57\76"+
    "\17\0\1\116\26\0\1\116\45\0\1\134\6\0\1\134"+
    "\74\0\1\234\2\0\1\234\6\0\1\234\5\0\1\121"+
    "\1\0\1\234\13\0\1\121\3\0\1\121\25\0\1\234"+
    "\14\0\11\123\1\0\75\123\34\0\1\235\52\0\11\126"+
    "\1\0\75\126\53\0\1\236\134\0\1\237\7\0\1\131"+
    "\2\0\1\131\6\0\1\131\4\0\1\120\1\121\1\122"+
    "\14\0\1\121\2\0\1\122\1\121\44\0\1\132\2\0"+
    "\2\132\5\0\1\132\1\0\1\132\1\116\1\117\1\0"+
    "\2\132\3\0\1\117\10\0\1\132\2\0\3\132\1\116"+
    "\1\0\1\132\4\0\1\132\33\0\1\133\2\0\1\133"+
    "\6\0\1\133\2\0\1\116\1\117\6\0\1\117\16\0"+
    "\1\116\42\0\1\134\2\0\1\134\6\0\1\134\5\0"+
    "\1\121\1\122\14\0\1\121\2\0\1\122\1\121\137\0"+
    "\2\240\40\0\1\241\57\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\2\13\1\242\24\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\4\13\1\243\4\13\1\244\1\245\14\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\21\13"+
    "\1\246\5\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\24\13\1\247\2\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\250\5\0\27\13"+
    "\24\0\6\13\5\0\5\13\1\0\2\13\3\0\1\13"+
    "\5\0\7\13\1\251\17\13\24\0\6\13\5\0\5\13"+
    "\1\0\2\13\3\0\1\13\5\0\16\13\1\252\10\13"+
    "\24\0\6\13\5\0\5\13\1\0\2\13\3\0\1\253"+
    "\5\0\14\13\1\254\12\13\24\0\6\13\5\0\5\13"+
    "\1\0\2\13\3\0\1\13\5\0\2\13\1\255\2\13"+
    "\1\256\21\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\4\13\1\257\22\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\12\13"+
    "\1\260\14\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\4\13\1\261\22\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\16\13"+
    "\1\262\10\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\5\13\1\263\21\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\16\13"+
    "\1\264\10\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\11\13\1\265\15\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\1\13"+
    "\1\266\25\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\16\13\1\267\10\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\21\13"+
    "\1\270\5\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\10\13\1\271\16\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\1\13"+
    "\1\272\25\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\2\13\1\273\24\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\1\13"+
    "\1\274\25\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\6\13\1\275\20\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\4\13"+
    "\1\276\22\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\11\13\1\277\15\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\25\13"+
    "\1\300\1\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\16\13\1\301\10\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\4\13"+
    "\1\302\22\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\10\13\1\303\16\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\10\13"+
    "\1\304\16\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\13\13\1\305\13\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\1\13"+
    "\1\306\1\307\24\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\20\13\1\310\6\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\2\13\1\311\3\13\1\312\20\13\124\0\1\313\6\0"+
    "\6\224\5\0\5\224\1\0\2\224\3\0\1\224\5\0"+
    "\27\224\30\0\2\314\5\0\1\314\1\0\1\314\3\0"+
    "\2\314\14\0\1\314\2\0\3\314\2\0\1\314\4\0"+
    "\1\314\61\0\1\315\63\0\2\316\5\0\1\316\1\0"+
    "\1\316\3\0\2\316\14\0\1\316\2\0\3\316\2\0"+
    "\1\316\4\0\1\316\33\0\1\234\2\0\1\234\6\0"+
    "\1\234\5\0\1\121\15\0\1\121\3\0\1\121\52\0"+
    "\1\317\145\0\1\320\40\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\3\13\1\321\23\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\6\13\1\322\20\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\2\13\1\323\24\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\4\13\1\324\22\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\1\13\1\325\7\13\1\326"+
    "\15\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\13\13\1\327\13\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\13\13\1\330"+
    "\13\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\1\13\1\331\25\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\6\13\1\332"+
    "\20\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\12\13\1\333\14\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\1\13\1\334"+
    "\25\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\335\5\0\27\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\6\13\1\336\20\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\6\13\1\337\20\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\10\13\1\340\16\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\12\13\1\341\14\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\10\13\1\342\16\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\17\13\1\343\7\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\6\13\1\344\20\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\4\13\1\345\22\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\5\13\1\346\21\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\4\13\1\347\22\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\11\13\1\350\15\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\10\13\1\351\16\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\6\13\1\352\20\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\11\13\1\353\15\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\4\13\1\354\5\13\1\355"+
    "\14\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\20\13\1\356\6\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\12\13\1\357"+
    "\14\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\5\13\1\360\21\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\11\13\1\361"+
    "\15\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\4\13\1\362\22\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\1\363\26\13"+
    "\24\0\6\13\5\0\5\13\1\0\2\13\3\0\1\13"+
    "\5\0\22\13\1\364\4\13\24\0\6\13\5\0\5\13"+
    "\1\0\2\13\3\0\1\13\5\0\11\13\1\365\15\13"+
    "\24\0\6\13\5\0\5\13\1\0\2\13\3\0\1\13"+
    "\5\0\16\13\1\366\10\13\30\0\2\367\5\0\1\367"+
    "\1\0\1\367\3\0\2\367\14\0\1\367\2\0\3\367"+
    "\2\0\1\367\4\0\1\367\36\0\2\370\5\0\1\370"+
    "\1\0\1\370\3\0\2\370\14\0\1\370\2\0\3\370"+
    "\2\0\1\370\4\0\1\370\72\0\1\371\46\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\5\13"+
    "\1\372\21\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\16\13\1\373\10\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\10\13"+
    "\1\374\16\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\5\13\1\375\21\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\6\13"+
    "\1\376\20\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\13\13\1\377\13\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\11\13"+
    "\1\u0100\15\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\13\13\1\u0101\13\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\25\13"+
    "\1\u0102\1\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\5\13\1\u0103\21\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\16\13"+
    "\1\u0104\10\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\11\13\1\u0105\15\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\6\13"+
    "\1\u0106\20\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\4\13\1\u0107\22\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\5\13"+
    "\1\u0108\21\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\2\13\1\u0109\24\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\4\13"+
    "\1\u010a\22\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\20\13\1\u010b\6\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\22\13"+
    "\1\u010c\4\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\2\13\1\u010d\24\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\4\13"+
    "\1\u010e\22\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\15\13\1\u010f\11\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\12\13"+
    "\1\u0110\14\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\2\13\1\u0111\24\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\6\13"+
    "\1\u0112\20\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\10\13\1\u0113\16\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\10\13"+
    "\1\u0114\16\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\6\13\1\u0115\20\13\30\0\2\u0116"+
    "\5\0\1\u0116\1\0\1\u0116\3\0\2\u0116\14\0\1\u0116"+
    "\2\0\3\u0116\2\0\1\u0116\4\0\1\u0116\36\0\2\u0117"+
    "\5\0\1\u0117\1\0\1\u0117\3\0\2\u0117\14\0\1\u0117"+
    "\2\0\3\u0117\2\0\1\u0117\4\0\1\u0117\76\0\1\u0118"+
    "\42\0\6\13\5\0\5\13\1\0\2\13\3\0\1\13"+
    "\5\0\16\13\1\u0119\10\13\24\0\6\13\5\0\5\13"+
    "\1\0\2\13\3\0\1\13\5\0\6\13\1\u011a\20\13"+
    "\24\0\6\13\5\0\5\13\1\0\2\13\3\0\1\13"+
    "\5\0\16\13\1\u011b\10\13\24\0\6\13\5\0\5\13"+
    "\1\0\2\13\3\0\1\13\5\0\4\13\1\u011c\22\13"+
    "\24\0\6\13\5\0\5\13\1\0\2\13\3\0\1\13"+
    "\5\0\24\13\1\u011d\2\13\24\0\6\13\5\0\5\13"+
    "\1\0\2\13\3\0\1\13\5\0\6\13\1\u011e\20\13"+
    "\24\0\6\13\5\0\5\13\1\0\2\13\3\0\1\13"+
    "\5\0\6\13\1\u011f\20\13\24\0\6\13\5\0\5\13"+
    "\1\0\2\13\3\0\1\13\5\0\26\13\1\u0120\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\12\13\1\u0121\14\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\16\13\1\u0122\10\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\3\13\1\u0123\6\13\1\u0124\14\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\11\13\1\u0125"+
    "\15\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\20\13\1\u0126\6\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\15\13\1\u0127"+
    "\11\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\16\13\1\u0128\10\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\5\13\1\u0129"+
    "\21\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\20\13\1\u012a\6\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\20\13\1\u012b"+
    "\6\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\4\13\1\u012c\22\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\17\13\1\u012d"+
    "\7\13\30\0\2\226\5\0\1\226\1\0\1\226\3\0"+
    "\2\226\14\0\1\226\2\0\3\226\2\0\1\226\4\0"+
    "\1\226\36\0\2\76\5\0\1\76\1\0\1\76\3\0"+
    "\2\76\14\0\1\76\2\0\3\76\2\0\1\76\4\0"+
    "\1\76\104\0\1\u012e\34\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\10\13\1\u012f\16\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\20\13\1\u0130\6\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\6\13\1\u0131\20\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\11\13\1\u0132\15\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\12\13\1\u0133\14\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\2\13\1\u0134\24\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\14\13\1\u0135\12\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\u0136\5\0"+
    "\27\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\u0137\5\0\27\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\4\13\1\u0138\22\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\6\13\1\u0139\20\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\6\13\1\u013a\20\13\100\0"+
    "\1\u013b\32\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\11\13\1\u013c\15\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\6\13\1\u013d"+
    "\20\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\16\13\1\u013e\10\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\11\13\1\u013f"+
    "\15\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\1\13\1\u0140\25\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\6\13\1\u0141"+
    "\20\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\20\13\1\u0142\6\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\6\13\1\u0143"+
    "\20\13\66\0\1\u0144\44\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\1\13\1\u0145\25\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\4\13\1\u0146\22\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\16\13\1\u0147\10\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\4\13\1\u0148\22\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\3\13\1\u0149\23\13\61\0"+
    "\1\u014a\51\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\7\13\1\u014b\17\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\12\13\1\u014c"+
    "\14\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\1\13\1\u014d\25\13\67\0\1\u014e\43\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\5\13\1\u014f\21\13\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16827];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\11\1\1\11\1\1\3\11\20\1\6\11"+
    "\1\1\1\11\6\1\2\11\2\1\1\11\1\1\2\11"+
    "\2\1\1\11\3\1\1\0\1\11\1\1\1\11\1\1"+
    "\1\11\1\0\3\11\1\1\1\0\1\11\3\1\1\11"+
    "\1\1\1\0\1\1\1\0\4\1\3\11\1\0\1\11"+
    "\45\1\12\11\1\1\1\11\1\1\2\11\1\1\1\0"+
    "\2\11\3\1\1\0\3\11\51\1\1\11\1\0\1\1"+
    "\1\0\1\11\1\0\46\1\3\0\34\1\3\0\25\1"+
    "\1\0\14\1\1\0\10\1\1\0\5\1\1\0\3\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

     private int yyline;
     private int yycolumn;

     public MarcelJflexer() {}

     private static final class State {
            final int lBraceCount;
            final int state;

            public State(int state, int lBraceCount) {
                this.state = state;
                this.lBraceCount = lBraceCount;
            }

            @Override
            public String toString() {
                return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
            }
        }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;

    private int commentStart;
    private int commentDepth;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

        private LexToken commentStateToTokenType(int state) {
            switch (state) {
                case BLOCK_COMMENT:
                    return new LexToken(getTokenStart(), getTokenEnd(), yyline, yycolumn, TokenType.BLOCK_COMMENT, null);
                case DOC_COMMENT:
                    return new LexToken(getTokenStart(), getTokenEnd(), yyline, yycolumn, TokenType.DOC_COMMENT, null);
                default:
                    throw new IllegalArgumentException("Unexpected state: " + state);
            }
        }

  // tokens for which we need to save current buffer
  private LexToken valueToken(TokenType tokenType) {
    return new LexToken(getTokenStart(), getTokenEnd(), yyline, yycolumn, tokenType, getTokenString());
  }
  private LexToken token(TokenType tokenType) {
    return new LexToken(getTokenStart(), getTokenEnd(), yyline, yycolumn, tokenType, null);
  }

  public String getTokenString() {
    return zzBuffer.subSequence(getTokenStart(), getTokenEnd()).toString();
  }

  private Character getLastNonWhitespaceChar() {
      int i = zzCurrentPos - 1;
      while (i >= 0) {
        char c = zzBuffer.charAt(i);
        if (!Character.isWhitespace(c)) return c;
        i--;
      }
      return null;
  }

  public int getYyline() { return yyline; }
  public int getYycolumn() { return yycolumn; }
  public int getZzLexicalState() { return zzLexicalState; }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MarcelJflexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws MarcelJfexerException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new MarcelJfexerException(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  throws MarcelJfexerException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      // end of file

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public LexToken nextToken() throws java.io.IOException, MarcelJfexerException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return commentStateToTokenType(state);
            }  // fall though
            case 336: break;
            case DOC_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return commentStateToTokenType(state);
            }  // fall though
            case 337: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return token(BAD_CHARACTER);
            } 
            // fall through
          case 126: break;
          case 2: 
            { return valueToken(IDENTIFIER);
            } 
            // fall through
          case 127: break;
          case 3: 
            { return valueToken(INTEGER);
            } 
            // fall through
          case 128: break;
          case 4: 
            { return token(WHITE_SPACE);
            } 
            // fall through
          case 129: break;
          case 5: 
            { Character lastChar = getLastNonWhitespaceChar();
      if (lastChar == null || !Character.isLetterOrDigit(lastChar)) {
        pushState(REGEX_STRING);
        return token(OPEN_REGEX_QUOTE);
      } else {
        return token(DIV);
      }
            } 
            // fall through
          case 130: break;
          case 6: 
            { return token(NOT);
            } 
            // fall through
          case 131: break;
          case 7: 
            { return token(DOT);
            } 
            // fall through
          case 132: break;
          case 8: 
            { return token(MINUS);
            } 
            // fall through
          case 133: break;
          case 9: 
            { pushState(SIMPLE_STRING); return token(OPEN_SIMPLE_QUOTE);
            } 
            // fall through
          case 134: break;
          case 10: 
            { pushState(STRING); return token(OPEN_QUOTE);
            } 
            // fall through
          case 135: break;
          case 11: 
            { pushState(CHAR_STRING); return token(OPEN_CHAR_QUOTE);
            } 
            // fall through
          case 136: break;
          case 12: 
            { return token(BRACKETS_OPEN);
            } 
            // fall through
          case 137: break;
          case 13: 
            { return token(BRACKETS_CLOSE);
            } 
            // fall through
          case 138: break;
          case 14: 
            { return token(MUL);
            } 
            // fall through
          case 139: break;
          case 15: 
            { return token(LPAR);
            } 
            // fall through
          case 140: break;
          case 16: 
            { return token(RPAR);
            } 
            // fall through
          case 141: break;
          case 17: 
            { return token(SQUARE_BRACKETS_OPEN);
            } 
            // fall through
          case 142: break;
          case 18: 
            { return token(SQUARE_BRACKETS_CLOSE);
            } 
            // fall through
          case 143: break;
          case 19: 
            { return token(COLON);
            } 
            // fall through
          case 144: break;
          case 20: 
            { return token(SEMI_COLON);
            } 
            // fall through
          case 145: break;
          case 21: 
            { return token(PLUS);
            } 
            // fall through
          case 146: break;
          case 22: 
            { return token(MODULO);
            } 
            // fall through
          case 147: break;
          case 23: 
            { return token(QUESTION_MARK);
            } 
            // fall through
          case 148: break;
          case 24: 
            { return token(LT);
            } 
            // fall through
          case 149: break;
          case 25: 
            { return token(GT);
            } 
            // fall through
          case 150: break;
          case 26: 
            { return token(PIPE);
            } 
            // fall through
          case 151: break;
          case 27: 
            { return token(ASSIGNMENT);
            } 
            // fall through
          case 152: break;
          case 28: 
            { return token(COMMA);
            } 
            // fall through
          case 153: break;
          case 29: 
            { return token(AT);
            } 
            // fall through
          case 154: break;
          case 30: 
            { return valueToken(REGULAR_STRING_PART);
            } 
            // fall through
          case 155: break;
          case 31: 
            { popState(); yypushback(1); return valueToken(DANGLING_NEWLINE);
            } 
            // fall through
          case 156: break;
          case 32: 
            { popState(); return token(CLOSING_QUOTE);
            } 
            // fall through
          case 157: break;
          case 33: 
            { popState(); return valueToken(IDENTIFIER);
            } 
            // fall through
          case 158: break;
          case 34: 
            { 
            } 
            // fall through
          case 159: break;
          case 35: 
            { popState(); return token(CLOSING_CHAR_QUOTE);
            } 
            // fall through
          case 160: break;
          case 36: 
            { popState(); return token(CLOSING_SIMPLE_QUOTE);
            } 
            // fall through
          case 161: break;
          case 37: 
            { popState(); return token(CLOSING_REGEX_QUOTE);
            } 
            // fall through
          case 162: break;
          case 38: 
            { lBraceCount++; return valueToken(LBRACE);
            } 
            // fall through
          case 163: break;
          case 39: 
            { if (lBraceCount == 0) {
                                             popState();
                                             return token(LONG_TEMPLATE_ENTRY_END);
                                           }
                                           lBraceCount--;
                                           return valueToken(RBRACE);
            } 
            // fall through
          case 164: break;
          case 40: 
            { return valueToken(FLOAT);
            } 
            // fall through
          case 165: break;
          case 41: 
            { return token(TokenType.EOL_COMMENT);
            } 
            // fall through
          case 166: break;
          case 42: 
            { pushState(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            } 
            // fall through
          case 167: break;
          case 43: 
            { return token(DIV_ASSIGNMENT);
            } 
            // fall through
          case 168: break;
          case 44: 
            { if (zzCurrentPos == 0) {
                return token(TokenType.SHEBANG_COMMENT);
            }
            else {
                yypushback(yylength() - 1);
                return token(HASH);
            }
            } 
            // fall through
          case 169: break;
          case 45: 
            { return token(NOT_EQUAL);
            } 
            // fall through
          case 170: break;
          case 46: 
            { return token(TWO_DOTS);
            } 
            // fall through
          case 171: break;
          case 47: 
            { return token(DECR);
            } 
            // fall through
          case 172: break;
          case 48: 
            { return token(ARROW);
            } 
            // fall through
          case 173: break;
          case 49: 
            { return token(MINUS_ASSIGNMENT);
            } 
            // fall through
          case 174: break;
          case 50: 
            { return token(MUL_ASSIGNMENT);
            } 
            // fall through
          case 175: break;
          case 51: 
            { return token(IF);
            } 
            // fall through
          case 176: break;
          case 52: 
            { return token(IN);
            } 
            // fall through
          case 177: break;
          case 53: 
            { return token(AS);
            } 
            // fall through
          case 178: break;
          case 54: 
            { return token(INCR);
            } 
            // fall through
          case 179: break;
          case 55: 
            { return token(PLUS_ASSIGNMENT);
            } 
            // fall through
          case 180: break;
          case 56: 
            { return token(QUESTION_DOT);
            } 
            // fall through
          case 181: break;
          case 57: 
            { return token(ELVIS);
            } 
            // fall through
          case 182: break;
          case 58: 
            { return token(LEFT_SHIFT);
            } 
            // fall through
          case 183: break;
          case 59: 
            { return token(LOE);
            } 
            // fall through
          case 184: break;
          case 60: 
            { return token(RIGHT_SHIFT);
            } 
            // fall through
          case 185: break;
          case 61: 
            { return token(GOE);
            } 
            // fall through
          case 186: break;
          case 62: 
            { return token(AND);
            } 
            // fall through
          case 187: break;
          case 63: 
            { return token(OR);
            } 
            // fall through
          case 188: break;
          case 64: 
            { return token(EQUAL);
            } 
            // fall through
          case 189: break;
          case 65: 
            { return token(FIND);
            } 
            // fall through
          case 190: break;
          case 66: 
            { pushState(SHORT_TEMPLATE_ENTRY);
                                                        yypushback(yylength() - 1);
                                                        return token(SHORT_TEMPLATE_ENTRY_START);
            } 
            // fall through
          case 191: break;
          case 67: 
            { pushState(LONG_TEMPLATE_ENTRY); return token(LONG_TEMPLATE_ENTRY_START);
            } 
            // fall through
          case 192: break;
          case 68: 
            { return valueToken(ESCAPE_SEQUENCE);
            } 
            // fall through
          case 193: break;
          case 69: 
            { commentDepth++;
            } 
            // fall through
          case 194: break;
          case 70: 
            { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             popState();
             zzStartRead = commentStart;
             return commentStateToTokenType(state);
        }
            } 
            // fall through
          case 195: break;
          case 71: 
            { pushState(DOC_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            } 
            // fall through
          case 196: break;
          case 72: 
            { return token(IS_NOT);
            } 
            // fall through
          case 197: break;
          case 73: 
            { return token(TWO_DOTS_END_EXCLUSIVE);
            } 
            // fall through
          case 198: break;
          case 74: 
            { pushState(RAW_STRING); return token(OPEN_QUOTE);
            } 
            // fall through
          case 199: break;
          case 75: 
            { return valueToken(TYPE_INT);
            } 
            // fall through
          case 200: break;
          case 76: 
            { return valueToken(DEF);
            } 
            // fall through
          case 201: break;
          case 77: 
            { return token(TRY);
            } 
            // fall through
          case 202: break;
          case 78: 
            { return token(FUN);
            } 
            // fall through
          case 203: break;
          case 79: 
            { return token(FOR);
            } 
            // fall through
          case 204: break;
          case 80: 
            { return token(NEW);
            } 
            // fall through
          case 205: break;
          case 81: 
            { return token(IS);
            } 
            // fall through
          case 206: break;
          case 82: 
            { int length = yytext().length();
                                    if (length <= 3) { // closing """
                                        popState();
                                        return token(CLOSING_QUOTE);
                                    }
                                    else { // some quotes at the end of a string, e.g. """ "foo""""
                                        yypushback(3); // return the closing quotes (""") to the stream
                                        return valueToken(REGULAR_STRING_PART);
                                    }
            } 
            // fall through
          case 207: break;
          case 83: 
            { return token(TokenType.BLOCK_COMMENT);
            } 
            // fall through
          case 208: break;
          case 84: 
            { return valueToken(TYPE_VOID);
            } 
            // fall through
          case 209: break;
          case 85: 
            { return token(VALUE_TRUE);
            } 
            // fall through
          case 210: break;
          case 86: 
            { return token(THIS);
            } 
            // fall through
          case 211: break;
          case 87: 
            { return token(ELSE);
            } 
            // fall through
          case 212: break;
          case 88: 
            { return valueToken(TYPE_LONG);
            } 
            // fall through
          case 213: break;
          case 89: 
            { return valueToken(TYPE_BOOL);
            } 
            // fall through
          case 214: break;
          case 90: 
            { return valueToken(TYPE_BYTE);
            } 
            // fall through
          case 215: break;
          case 91: 
            { return token(NULL);
            } 
            // fall through
          case 216: break;
          case 92: 
            { return valueToken(TYPE_CHAR);
            } 
            // fall through
          case 217: break;
          case 93: 
            { return token(WHEN);
            } 
            // fall through
          case 218: break;
          case 94: 
            { return token(THROW);
            } 
            // fall through
          case 219: break;
          case 95: 
            { return token(FINAL);
            } 
            // fall through
          case 220: break;
          case 96: 
            { return token(VALUE_FALSE);
            } 
            // fall through
          case 221: break;
          case 97: 
            { return valueToken(TYPE_FLOAT);
            } 
            // fall through
          case 222: break;
          case 98: 
            { return token(SUPER);
            } 
            // fall through
          case 223: break;
          case 99: 
            { return valueToken(TYPE_SHORT);
            } 
            // fall through
          case 224: break;
          case 100: 
            { return token(BREAK);
            } 
            // fall through
          case 225: break;
          case 101: 
            { return token(CATCH);
            } 
            // fall through
          case 226: break;
          case 102: 
            { return token(CLASS);
            } 
            // fall through
          case 227: break;
          case 103: 
            { return token(WHILE);
            } 
            // fall through
          case 228: break;
          case 104: 
            { return token(INLINE);
            } 
            // fall through
          case 229: break;
          case 105: 
            { return token(IMPORT);
            } 
            // fall through
          case 230: break;
          case 106: 
            { return valueToken(TYPE_DOUBLE);
            } 
            // fall through
          case 231: break;
          case 107: 
            { return token(DYNOBJ);
            } 
            // fall through
          case 232: break;
          case 108: 
            { return token(THROWS);
            } 
            // fall through
          case 233: break;
          case 109: 
            { return token(RETURN);
            } 
            // fall through
          case 234: break;
          case 110: 
            { return token(STATIC);
            } 
            // fall through
          case 235: break;
          case 111: 
            { return token(SWITCH);
            } 
            // fall through
          case 236: break;
          case 112: 
            { return token(VISIBILITY_PUBLIC);
            } 
            // fall through
          case 237: break;
          case 113: 
            { return token(EXTENDS);
            } 
            // fall through
          case 238: break;
          case 114: 
            { return token(FINALLY);
            } 
            // fall through
          case 239: break;
          case 115: 
            { return token(VISIBILITY_PRIVATE);
            } 
            // fall through
          case 240: break;
          case 116: 
            { return token(PACKAGE);
            } 
            // fall through
          case 241: break;
          case 117: 
            { return token(VISIBILITY_INTERNAL);
            } 
            // fall through
          case 242: break;
          case 118: 
            { return token(DUMBBELL);
            } 
            // fall through
          case 243: break;
          case 119: 
            { return token(CONTINUE);
            } 
            // fall through
          case 244: break;
          case 120: 
            { return token(EXTENSION);
            } 
            // fall through
          case 245: break;
          case 121: 
            { return token(VISIBILITY_PROTECTED);
            } 
            // fall through
          case 246: break;
          case 122: 
            { return token(INSTANCEOF);
            } 
            // fall through
          case 247: break;
          case 123: 
            { return token(IMPLEMENTS);
            } 
            // fall through
          case 248: break;
          case 124: 
            { return token(NOT_INSTANCEOF);
            } 
            // fall through
          case 249: break;
          case 125: 
            { return token(CONSTRUCTOR);
            } 
            // fall through
          case 250: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
