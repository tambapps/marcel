// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/flex/Marcel.flex

package com.tambapps.marcel.lexer;
import static com.tambapps.marcel.lexer.TokenType.*;
import java.util.Stack;

/**
  * Marcel lang lexer
  */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class MarcelJflexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int RAW_STRING = 4;
  public static final int SHORT_TEMPLATE_ENTRY = 6;
  public static final int BLOCK_COMMENT = 8;
  public static final int DOC_COMMENT = 10;
  public static final int LONG_TEMPLATE_ENTRY = 12;
  public static final int UNMATCHED_BACKTICK = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  5,  5,  0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\23\0\1\1\1\3"+
    "\1\4\1\0\1\5\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\11\21"+
    "\1\22\1\23\1\24\1\25\1\26\2\0\1\27\1\30"+
    "\4\27\5\31\1\32\10\31\1\33\2\31\1\34\2\31"+
    "\1\0\1\35\2\0\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\31\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\31\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\34\1\65\1\31\1\66"+
    "\1\67\1\70\54\0\1\31\12\0\1\31\4\0\1\31"+
    "\5\0\27\31\1\0\37\31\1\0\u01ca\31\4\0\14\31"+
    "\16\0\5\31\7\0\1\31\1\0\1\31\201\0\5\31"+
    "\1\0\2\31\2\0\4\31\1\0\1\31\6\0\1\31"+
    "\1\0\3\31\1\0\1\31\1\0\24\31\1\0\123\31"+
    "\1\0\213\31\10\0\246\31\1\0\46\31\2\0\1\31"+
    "\6\0\51\31\107\0\33\31\4\0\4\31\55\0\53\31"+
    "\25\0\12\71\4\0\2\31\1\0\143\31\1\0\1\31"+
    "\17\0\2\31\7\0\2\31\12\71\3\31\2\0\1\31"+
    "\20\0\1\31\1\0\36\31\35\0\131\31\13\0\1\31"+
    "\16\0\12\71\41\31\11\0\2\31\4\0\1\31\5\0"+
    "\26\31\4\0\1\31\11\0\1\31\3\0\1\31\27\0"+
    "\31\31\7\0\13\31\65\0\25\31\1\0\10\31\106\0"+
    "\66\31\3\0\1\31\22\0\1\31\7\0\12\31\4\0"+
    "\12\71\1\0\20\31\4\0\10\31\2\0\2\31\2\0"+
    "\26\31\1\0\7\31\1\0\1\31\3\0\4\31\3\0"+
    "\1\31\20\0\1\31\15\0\2\31\1\0\3\31\4\0"+
    "\12\71\2\31\12\0\1\31\10\0\6\31\4\0\2\31"+
    "\2\0\26\31\1\0\7\31\1\0\2\31\1\0\2\31"+
    "\1\0\2\31\37\0\4\31\1\0\1\31\7\0\12\71"+
    "\2\0\3\31\20\0\11\31\1\0\3\31\1\0\26\31"+
    "\1\0\7\31\1\0\2\31\1\0\5\31\3\0\1\31"+
    "\22\0\1\31\17\0\2\31\4\0\12\71\11\0\1\31"+
    "\13\0\10\31\2\0\2\31\2\0\26\31\1\0\7\31"+
    "\1\0\2\31\1\0\5\31\3\0\1\31\36\0\2\31"+
    "\1\0\3\31\4\0\12\71\1\0\1\31\21\0\1\31"+
    "\1\0\6\31\3\0\3\31\1\0\4\31\3\0\2\31"+
    "\1\0\1\31\1\0\2\31\3\0\2\31\3\0\3\31"+
    "\3\0\14\31\26\0\1\31\25\0\12\71\25\0\10\31"+
    "\1\0\3\31\1\0\27\31\1\0\20\31\3\0\1\31"+
    "\32\0\3\31\5\0\2\31\4\0\12\71\20\0\1\31"+
    "\4\0\10\31\1\0\3\31\1\0\27\31\1\0\12\31"+
    "\1\0\5\31\3\0\1\31\40\0\1\31\1\0\2\31"+
    "\4\0\12\71\1\0\2\31\22\0\10\31\1\0\3\31"+
    "\1\0\51\31\2\0\1\31\20\0\1\31\5\0\3\31"+
    "\10\0\3\31\4\0\12\71\12\0\6\31\5\0\22\31"+
    "\3\0\30\31\1\0\11\31\1\0\1\31\2\0\7\31"+
    "\37\0\12\71\21\0\60\31\1\0\2\31\14\0\7\31"+
    "\11\0\12\71\47\0\2\31\1\0\1\31\1\0\5\31"+
    "\1\0\30\31\1\0\1\31\1\0\12\31\1\0\2\31"+
    "\11\0\1\31\2\0\5\31\1\0\1\31\11\0\12\71"+
    "\2\0\4\31\40\0\1\31\37\0\12\71\26\0\10\31"+
    "\1\0\44\31\33\0\5\31\163\0\53\31\24\0\1\31"+
    "\12\71\6\0\6\31\4\0\4\31\3\0\1\31\3\0"+
    "\2\31\7\0\3\31\4\0\15\31\14\0\1\31\1\0"+
    "\12\71\6\0\46\31\1\0\1\31\5\0\1\31\2\0"+
    "\53\31\1\0\115\31\1\0\4\31\2\0\7\31\1\0"+
    "\1\31\1\0\4\31\2\0\51\31\1\0\4\31\2\0"+
    "\41\31\1\0\4\31\2\0\7\31\1\0\1\31\1\0"+
    "\4\31\2\0\17\31\1\0\71\31\1\0\4\31\2\0"+
    "\103\31\45\0\20\31\20\0\126\31\2\0\6\31\3\0"+
    "\u016c\31\2\0\21\31\1\0\32\31\5\0\113\31\6\0"+
    "\10\31\7\0\15\31\1\0\4\31\16\0\22\31\16\0"+
    "\22\31\16\0\15\31\1\0\3\31\17\0\64\31\43\0"+
    "\1\31\4\0\1\31\3\0\12\71\46\0\12\71\6\0"+
    "\131\31\7\0\5\31\2\0\42\31\1\0\1\31\5\0"+
    "\106\31\12\0\37\31\47\0\12\71\36\31\2\0\5\31"+
    "\13\0\54\31\4\0\32\31\6\0\12\71\46\0\27\31"+
    "\11\0\65\31\53\0\12\71\6\0\12\71\15\0\1\31"+
    "\135\0\57\31\21\0\7\31\4\0\12\71\51\0\36\31"+
    "\15\0\2\31\12\71\54\31\32\0\44\31\34\0\12\71"+
    "\3\0\3\31\12\71\44\31\2\0\11\31\7\0\53\31"+
    "\2\0\3\31\51\0\4\31\1\0\6\31\1\0\2\31"+
    "\3\0\1\31\5\0\300\31\100\0\26\31\2\0\6\31"+
    "\2\0\46\31\2\0\6\31\2\0\10\31\1\0\1\31"+
    "\1\0\1\31\1\0\1\31\1\0\37\31\2\0\65\31"+
    "\1\0\7\31\1\0\1\31\3\0\3\31\1\0\7\31"+
    "\3\0\4\31\2\0\6\31\4\0\15\31\5\0\3\31"+
    "\1\0\7\31\164\0\1\31\15\0\1\31\20\0\15\31"+
    "\145\0\1\31\4\0\1\31\2\0\12\31\1\0\1\31"+
    "\3\0\5\31\6\0\1\31\1\0\1\31\1\0\1\31"+
    "\1\0\4\31\1\0\13\31\2\0\4\31\5\0\5\31"+
    "\4\0\1\31\64\0\2\31\u017b\0\57\31\1\0\57\31"+
    "\1\0\205\31\6\0\4\31\3\0\2\31\14\0\46\31"+
    "\1\0\1\31\5\0\1\31\2\0\70\31\7\0\1\31"+
    "\20\0\27\31\11\0\7\31\1\0\7\31\1\0\7\31"+
    "\1\0\7\31\1\0\7\31\1\0\7\31\1\0\7\31"+
    "\1\0\7\31\120\0\1\31\325\0\2\31\52\0\5\31"+
    "\5\0\2\31\4\0\126\31\6\0\3\31\1\0\132\31"+
    "\1\0\4\31\5\0\53\31\1\0\136\31\21\0\33\31"+
    "\65\0\306\31\112\0\360\31\20\0\215\31\103\0\56\31"+
    "\2\0\15\31\3\0\20\31\12\71\2\31\24\0\57\31"+
    "\20\0\37\31\2\0\106\31\61\0\11\31\2\0\147\31"+
    "\2\0\65\31\2\0\5\31\60\0\13\31\1\0\3\31"+
    "\1\0\4\31\1\0\27\31\35\0\64\31\16\0\62\31"+
    "\34\0\12\71\30\0\6\31\3\0\1\31\1\0\2\31"+
    "\1\0\12\71\34\31\12\0\27\31\31\0\35\31\7\0"+
    "\57\31\34\0\1\31\12\71\6\0\5\31\1\0\12\31"+
    "\12\71\5\31\1\0\51\31\27\0\3\31\1\0\10\31"+
    "\4\0\12\71\6\0\27\31\3\0\1\31\3\0\62\31"+
    "\1\0\1\31\3\0\2\31\2\0\5\31\2\0\1\31"+
    "\1\0\1\31\30\0\3\31\2\0\13\31\7\0\3\31"+
    "\14\0\6\31\2\0\6\31\2\0\6\31\11\0\7\31"+
    "\1\0\7\31\1\0\53\31\1\0\14\31\10\0\163\31"+
    "\15\0\12\71\6\0\244\31\14\0\27\31\4\0\61\31"+
    "\4\0\156\31\2\0\152\31\46\0\7\31\14\0\5\31"+
    "\5\0\1\31\1\0\12\31\1\0\15\31\1\0\5\31"+
    "\1\0\1\31\1\0\2\31\1\0\2\31\1\0\154\31"+
    "\41\0\153\31\22\0\100\31\2\0\66\31\50\0\14\31"+
    "\164\0\5\31\1\0\207\31\23\0\12\71\7\0\32\31"+
    "\6\0\32\31\13\0\131\31\3\0\6\31\2\0\6\31"+
    "\2\0\6\31\2\0\3\31\43\0\14\31\1\0\32\31"+
    "\1\0\23\31\1\0\2\31\1\0\17\31\2\0\16\31"+
    "\42\0\173\31\205\0\35\31\3\0\61\31\57\0\40\31"+
    "\15\0\24\31\1\0\10\31\6\0\46\31\12\0\36\31"+
    "\2\0\44\31\4\0\10\31\60\0\236\31\2\0\12\71"+
    "\6\0\44\31\4\0\44\31\4\0\50\31\10\0\64\31"+
    "\234\0\67\31\11\0\26\31\12\0\10\31\230\0\6\31"+
    "\2\0\1\31\1\0\54\31\1\0\2\31\3\0\1\31"+
    "\2\0\27\31\12\0\27\31\11\0\37\31\101\0\23\31"+
    "\1\0\2\31\12\0\26\31\12\0\32\31\106\0\70\31"+
    "\6\0\2\31\100\0\1\31\17\0\4\31\1\0\3\31"+
    "\1\0\35\31\52\0\35\31\3\0\35\31\43\0\10\31"+
    "\1\0\34\31\33\0\66\31\12\0\26\31\12\0\23\31"+
    "\15\0\22\31\156\0\111\31\67\0\63\31\15\0\63\31"+
    "\15\0\44\31\14\0\12\71\306\0\35\31\12\0\1\31"+
    "\10\0\26\31\232\0\27\31\14\0\65\31\56\0\12\71"+
    "\23\0\55\31\40\0\31\31\7\0\12\71\11\0\44\31"+
    "\17\0\12\71\4\0\1\31\13\0\43\31\3\0\1\31"+
    "\14\0\60\31\16\0\4\31\13\0\12\71\1\31\1\0"+
    "\1\31\43\0\22\31\1\0\31\31\124\0\7\31\1\0"+
    "\1\31\1\0\4\31\1\0\17\31\1\0\12\31\7\0"+
    "\57\31\21\0\12\71\13\0\10\31\2\0\2\31\2\0"+
    "\26\31\1\0\7\31\1\0\2\31\1\0\5\31\3\0"+
    "\1\31\22\0\1\31\14\0\5\31\236\0\65\31\22\0"+
    "\4\31\5\0\12\71\5\0\1\31\40\0\60\31\24\0"+
    "\2\31\1\0\1\31\10\0\12\71\246\0\57\31\51\0"+
    "\4\31\44\0\60\31\24\0\1\31\13\0\12\71\46\0"+
    "\53\31\15\0\1\31\7\0\12\71\66\0\33\31\25\0"+
    "\12\71\306\0\54\31\164\0\100\31\12\71\25\0\1\31"+
    "\240\0\10\31\2\0\47\31\20\0\1\31\1\0\1\31"+
    "\34\0\1\31\12\0\50\31\7\0\1\31\25\0\1\31"+
    "\13\0\56\31\23\0\1\31\42\0\71\31\7\0\11\31"+
    "\1\0\45\31\21\0\1\31\17\0\12\71\30\0\36\31"+
    "\160\0\7\31\1\0\2\31\1\0\46\31\25\0\1\31"+
    "\11\0\12\71\6\0\6\31\1\0\2\31\1\0\40\31"+
    "\16\0\1\31\7\0\12\71\u0136\0\23\31\15\0\232\31"+
    "\346\0\304\31\274\0\57\31\321\0\107\31\271\0\71\31"+
    "\7\0\37\31\1\0\12\71\146\0\36\31\22\0\60\31"+
    "\20\0\4\31\14\0\12\71\11\0\25\31\5\0\23\31"+
    "\260\0\100\31\200\0\113\31\5\0\1\31\102\0\15\31"+
    "\100\0\2\31\1\0\1\31\34\0\370\31\10\0\363\31"+
    "\15\0\37\31\61\0\3\31\21\0\4\31\10\0\u018c\31"+
    "\4\0\153\31\5\0\15\31\3\0\11\31\7\0\12\31"+
    "\146\0\125\31\1\0\107\31\1\0\2\31\2\0\1\31"+
    "\2\0\2\31\2\0\4\31\1\0\14\31\1\0\1\31"+
    "\1\0\7\31\1\0\101\31\1\0\4\31\2\0\10\31"+
    "\1\0\7\31\1\0\34\31\1\0\4\31\1\0\5\31"+
    "\1\0\1\31\3\0\7\31\1\0\u0154\31\2\0\31\31"+
    "\1\0\31\31\1\0\37\31\1\0\31\31\1\0\37\31"+
    "\1\0\31\31\1\0\37\31\1\0\31\31\1\0\37\31"+
    "\1\0\31\31\1\0\10\31\2\0\62\71\55\31\12\0"+
    "\7\31\2\0\12\71\4\0\1\31\u0171\0\54\31\4\0"+
    "\12\71\6\0\305\31\73\0\104\31\7\0\1\31\4\0"+
    "\12\71\246\0\4\31\1\0\33\31\1\0\2\31\1\0"+
    "\1\31\2\0\1\31\1\0\12\31\1\0\4\31\1\0"+
    "\1\31\1\0\1\31\6\0\1\31\4\0\1\31\1\0"+
    "\1\31\1\0\1\31\1\0\3\31\1\0\2\31\1\0"+
    "\1\31\2\0\1\31\1\0\1\31\1\0\1\31\1\0"+
    "\1\31\1\0\1\31\1\0\2\31\1\0\1\31\2\0"+
    "\4\31\1\0\7\31\1\0\4\31\1\0\4\31\1\0"+
    "\1\31\1\0\12\31\1\0\21\31\5\0\3\31\1\0"+
    "\5\31\1\0\21\31\104\0\327\31\51\0\65\31\13\0"+
    "\336\31\2\0\u0182\31\16\0\u0131\31\37\0\36\31\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\0\17\23\1\24"+
    "\1\0\1\25\1\26\1\27\1\30\1\26\1\0\2\26"+
    "\1\31\1\0\1\32\1\33\1\34\1\0\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\3\15\1\44\1\45"+
    "\1\46\1\0\1\47\12\23\1\50\1\23\1\51\13\23"+
    "\1\52\1\53\1\0\1\54\2\55\2\0\1\56\11\23"+
    "\1\57\1\60\1\23\1\61\1\23\1\62\12\23\2\0"+
    "\1\63\1\31\1\64\1\23\1\65\2\23\1\66\4\23"+
    "\1\67\1\70\6\23\1\71\1\72\1\23\1\53\1\0"+
    "\1\73\2\23\1\74\1\75\6\23\1\76\1\23\1\77"+
    "\1\0\1\23\1\100\1\101\3\23\1\102\1\103\1\104"+
    "\2\23\1\105\1\23\1\106\1\107\1\23\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\350\0\u020a\0\350\0\350\0\u0244\0\u027e\0\350"+
    "\0\u02b8\0\350\0\u02f2\0\u032c\0\u0366\0\350\0\350\0\u03a0"+
    "\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570"+
    "\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740"+
    "\0\u077a\0\u07b4\0\u07ee\0\350\0\u0828\0\350\0\u0862\0\350"+
    "\0\350\0\u089c\0\u08d6\0\350\0\u0910\0\u094a\0\u0984\0\350"+
    "\0\350\0\350\0\u09be\0\350\0\350\0\350\0\350\0\350"+
    "\0\350\0\350\0\350\0\u09f8\0\u0a32\0\350\0\350\0\350"+
    "\0\u0a6c\0\u044e\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u044e\0\u0cea\0\u0d24\0\u0d5e"+
    "\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\u0fa2\0\350\0\u0fdc\0\u1016\0\350\0\350\0\u1050"+
    "\0\u108a\0\u10c4\0\350\0\350\0\u10fe\0\u1138\0\u1172\0\u11ac"+
    "\0\u11e6\0\u1220\0\u125a\0\u1294\0\u044e\0\u044e\0\u12ce\0\u1308"+
    "\0\u1342\0\u044e\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e"+
    "\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u108a\0\350"+
    "\0\u044e\0\u1634\0\u044e\0\u166e\0\u16a8\0\u044e\0\u16e2\0\u171c"+
    "\0\u1756\0\u1790\0\u044e\0\u044e\0\u17ca\0\u1804\0\u183e\0\u1878"+
    "\0\u18b2\0\u18ec\0\u044e\0\u044e\0\u1926\0\350\0\u1960\0\u044e"+
    "\0\u199a\0\u19d4\0\u044e\0\u044e\0\u1a0e\0\u1a48\0\u1a82\0\u1abc"+
    "\0\u1af6\0\u1b30\0\u044e\0\u1b6a\0\u044e\0\u1ba4\0\u1bde\0\u044e"+
    "\0\u044e\0\u1c18\0\u1c52\0\u1c8c\0\u044e\0\u044e\0\u044e\0\u1cc6"+
    "\0\u1d00\0\u044e\0\u1d3a\0\u044e\0\u044e\0\u1d74\0\u044e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\6\33\1\0"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\2\33\1\43\1\33\1\44\1\33\1\45\1\33\1\46"+
    "\1\47\1\50\1\51\1\33\1\52\1\53\1\33\1\54"+
    "\1\55\1\56\1\0\2\57\1\60\1\57\1\61\1\62"+
    "\27\57\1\63\36\57\1\64\1\57\1\65\1\62\27\57"+
    "\1\64\34\57\27\0\6\66\1\0\1\66\1\67\26\66"+
    "\77\0\2\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\6\33\1\0"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\2\33\1\43\1\33\1\44\1\33\1\45\1\33\1\46"+
    "\1\47\1\50\1\51\1\33\1\52\1\53\1\33\1\70"+
    "\1\55\1\71\2\0\2\7\114\0\1\72\50\0\1\73"+
    "\74\0\1\74\107\0\1\75\57\0\1\76\11\0\1\77"+
    "\61\0\1\100\7\0\1\101\71\0\1\102\74\0\1\25"+
    "\1\0\1\103\1\104\1\105\4\0\1\25\10\0\1\103"+
    "\7\0\1\104\27\0\2\25\10\0\1\103\1\104\2\0"+
    "\1\25\13\0\1\103\7\0\1\104\34\0\1\106\71\0"+
    "\1\107\71\0\1\110\64\0\2\33\5\0\6\33\1\0"+
    "\1\33\1\0\26\33\3\0\1\33\2\111\1\0\34\111"+
    "\1\0\32\111\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\20\33\1\112\5\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\15\33\1\113\1\33"+
    "\1\114\5\33\1\115\3\0\1\33\20\0\2\33\5\0"+
    "\6\33\1\0\1\33\1\0\15\33\1\116\10\33\3\0"+
    "\1\33\20\0\2\33\5\0\6\33\1\0\1\33\1\0"+
    "\15\33\1\117\10\33\3\0\1\33\20\0\2\33\5\0"+
    "\6\33\1\0\1\33\1\0\12\33\1\120\13\33\3\0"+
    "\1\33\20\0\2\33\5\0\6\33\1\0\1\33\1\0"+
    "\1\121\11\33\1\122\2\33\1\123\4\33\1\124\3\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\5\33\1\125\5\33\1\126\1\127\11\33\3\0"+
    "\1\33\20\0\2\33\5\0\6\33\1\0\1\33\1\0"+
    "\15\33\1\130\10\33\3\0\1\33\20\0\2\33\5\0"+
    "\6\33\1\0\1\33\1\0\4\33\1\131\15\33\1\132"+
    "\3\33\3\0\1\33\20\0\2\33\5\0\6\33\1\0"+
    "\1\33\1\0\17\33\1\133\2\33\1\134\3\33\3\0"+
    "\1\33\20\0\2\33\5\0\6\33\1\0\1\33\1\0"+
    "\4\33\1\135\21\33\3\0\1\33\20\0\2\33\5\0"+
    "\6\33\1\0\1\33\1\0\7\33\1\136\11\33\1\137"+
    "\4\33\3\0\1\33\20\0\2\33\5\0\6\33\1\0"+
    "\1\33\1\0\17\33\1\140\6\33\3\0\1\33\20\0"+
    "\2\33\5\0\6\33\1\0\1\33\1\0\15\33\1\141"+
    "\10\33\3\0\1\33\20\0\2\33\5\0\6\33\1\0"+
    "\1\33\1\0\7\33\1\142\16\33\3\0\1\33\67\0"+
    "\1\143\2\0\2\57\1\0\1\57\2\0\27\57\1\0"+
    "\34\57\27\0\6\144\1\0\1\144\1\145\26\144\1\146"+
    "\3\0\2\147\1\0\57\147\1\150\7\147\4\0\1\151"+
    "\105\0\2\66\5\0\6\66\1\0\1\66\1\0\26\66"+
    "\3\0\1\66\2\152\1\0\34\152\1\0\32\152\4\0"+
    "\1\153\117\0\1\103\17\0\1\103\37\0\2\105\5\0"+
    "\2\105\1\0\1\103\1\104\2\0\1\105\1\0\6\105"+
    "\4\0\1\103\7\0\1\104\7\0\2\111\1\0\34\111"+
    "\1\154\32\111\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\15\33\1\155\10\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\4\33\1\156\21\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\21\33\1\157\4\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\14\33\1\160\11\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\22\33\1\161\3\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\20\33\1\162\5\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\12\33\1\163\13\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\15\33\1\164\10\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\17\33\1\165\6\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\14\33\1\166\11\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\16\33\1\167\7\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\21\33\1\170\4\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\14\33\1\171\11\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\24\33\1\172\1\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\12\33\1\173\13\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\10\33\1\174\4\33"+
    "\1\175\10\33\3\0\1\33\20\0\2\33\5\0\6\33"+
    "\1\0\1\33\1\0\1\33\1\176\24\33\3\0\1\33"+
    "\20\0\2\33\5\0\6\33\1\0\1\33\1\0\21\33"+
    "\1\177\4\33\3\0\1\33\20\0\2\33\5\0\6\33"+
    "\1\0\1\33\1\0\15\33\1\200\10\33\3\0\1\33"+
    "\20\0\2\33\5\0\6\33\1\0\1\33\1\0\1\201"+
    "\25\33\3\0\1\33\20\0\2\33\5\0\6\33\1\0"+
    "\1\33\1\0\22\33\1\202\3\33\3\0\1\33\20\0"+
    "\2\33\5\0\6\33\1\0\1\33\1\0\10\33\1\203"+
    "\15\33\3\0\1\33\20\0\2\33\5\0\6\33\1\0"+
    "\1\33\1\0\10\33\1\204\15\33\3\0\1\33\20\0"+
    "\2\144\5\0\6\144\1\0\1\144\1\0\26\144\3\0"+
    "\1\144\2\205\1\0\34\205\1\0\32\205\20\0\2\206"+
    "\5\0\2\206\7\0\6\206\30\0\1\207\65\0\2\152"+
    "\1\0\34\152\1\210\32\152\20\0\2\33\5\0\6\33"+
    "\1\0\1\33\1\0\12\33\1\211\13\33\3\0\1\33"+
    "\20\0\2\33\5\0\6\33\1\0\1\33\1\0\1\212"+
    "\25\33\3\0\1\33\20\0\2\33\5\0\6\33\1\0"+
    "\1\33\1\0\4\33\1\213\21\33\3\0\1\33\20\0"+
    "\2\33\5\0\6\33\1\0\1\33\1\0\21\33\1\214"+
    "\4\33\3\0\1\33\20\0\2\33\5\0\6\33\1\0"+
    "\1\33\1\0\1\33\1\215\24\33\3\0\1\33\20\0"+
    "\2\33\5\0\6\33\1\0\1\33\1\0\4\33\1\216"+
    "\21\33\3\0\1\33\20\0\2\33\5\0\6\33\1\0"+
    "\1\33\1\0\20\33\1\217\5\33\3\0\1\33\20\0"+
    "\2\33\5\0\6\33\1\0\1\33\1\0\1\220\25\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\15\33\1\221\10\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\4\33\1\222\21\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\6\33\1\223\17\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\12\33\1\224\13\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\23\33\1\225\2\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\21\33\1\226\4\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\12\33\1\227\13\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\22\33\1\230\3\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\17\33\1\231\6\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\21\33\1\232\4\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\4\33\1\233\21\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\3\33\1\234\22\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\12\33\1\235\13\33\3\0\1\33\2\205\1\0"+
    "\34\205\1\236\32\205\20\0\2\237\5\0\2\237\7\0"+
    "\6\237\44\0\2\33\5\0\6\33\1\0\1\33\1\0"+
    "\11\33\1\240\14\33\3\0\1\33\20\0\2\33\5\0"+
    "\6\33\1\0\1\33\1\0\10\33\1\241\15\33\3\0"+
    "\1\33\20\0\2\33\5\0\6\33\1\0\1\33\1\0"+
    "\12\33\1\242\13\33\3\0\1\33\20\0\2\33\5\0"+
    "\6\33\1\0\1\33\1\0\4\33\1\243\21\33\3\0"+
    "\1\33\20\0\2\33\5\0\6\33\1\0\1\33\1\0"+
    "\21\33\1\244\4\33\3\0\1\33\20\0\2\33\5\0"+
    "\6\33\1\0\1\33\1\0\17\33\1\245\6\33\3\0"+
    "\1\33\20\0\2\33\5\0\6\33\1\0\1\33\1\0"+
    "\17\33\1\246\6\33\3\0\1\33\20\0\2\33\5\0"+
    "\6\33\1\0\1\33\1\0\1\247\25\33\3\0\1\33"+
    "\20\0\2\33\5\0\6\33\1\0\1\33\1\0\4\33"+
    "\1\250\21\33\3\0\1\33\20\0\2\33\5\0\6\33"+
    "\1\0\1\33\1\0\10\33\1\251\15\33\3\0\1\33"+
    "\20\0\2\33\5\0\6\33\1\0\1\33\1\0\17\33"+
    "\1\252\6\33\3\0\1\33\20\0\2\33\5\0\6\33"+
    "\1\0\1\33\1\0\21\33\1\253\4\33\3\0\1\33"+
    "\20\0\2\33\5\0\6\33\1\0\1\33\1\0\10\33"+
    "\1\254\15\33\3\0\1\33\20\0\2\33\5\0\6\33"+
    "\1\0\1\33\1\0\4\33\1\255\21\33\3\0\1\33"+
    "\20\0\2\256\5\0\2\256\7\0\6\256\44\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\14\33\1\257\11\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\4\33\1\260\21\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\21\33\1\261\4\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\14\33\1\262\11\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\21\33\1\263\4\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\2\33\1\264\23\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\2\33\1\265\23\33"+
    "\3\0\1\33\20\0\2\33\5\0\6\33\1\0\1\33"+
    "\1\0\14\33\1\266\11\33\3\0\1\33\20\0\2\33"+
    "\5\0\6\33\1\0\1\33\1\0\2\33\1\267\23\33"+
    "\3\0\1\33\20\0\2\147\5\0\2\147\7\0\6\147"+
    "\44\0\2\33\5\0\6\33\1\0\1\33\1\0\22\33"+
    "\1\270\3\33\3\0\1\33\20\0\2\33\5\0\6\33"+
    "\1\0\1\33\1\0\1\271\25\33\3\0\1\33\20\0"+
    "\2\33\5\0\6\33\1\0\1\33\1\0\4\33\1\272"+
    "\21\33\3\0\1\33\20\0\2\33\5\0\6\33\1\0"+
    "\1\33\1\0\21\33\1\273\4\33\3\0\1\33\20\0"+
    "\2\33\5\0\6\33\1\0\1\33\1\0\4\33\1\274"+
    "\21\33\3\0\1\33\20\0\2\33\5\0\6\33\1\0"+
    "\1\33\1\0\12\33\1\275\13\33\3\0\1\33\20\0"+
    "\2\33\5\0\6\33\1\0\1\33\1\0\4\33\1\276"+
    "\21\33\3\0\1\33\20\0\2\33\5\0\6\33\1\0"+
    "\1\33\1\0\3\33\1\277\22\33\3\0\1\33";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7598];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\10\1\0\3\1\1\11\1\0\2\11\2\1"+
    "\1\11\1\1\1\11\3\1\2\11\4\1\1\0\17\1"+
    "\1\11\1\0\1\11\1\1\2\11\1\1\1\0\1\11"+
    "\2\1\1\0\3\11\1\0\10\11\2\1\3\11\1\0"+
    "\31\1\1\11\1\1\1\0\2\11\1\1\2\0\2\11"+
    "\30\1\2\0\1\1\1\11\25\1\1\11\1\0\16\1"+
    "\1\0\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

     private static final class State {
            final int lBraceCount;
            final int state;

            public State(int state, int lBraceCount) {
                this.state = state;
                this.lBraceCount = lBraceCount;
            }

            @Override
            public String toString() {
                return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
            }
        }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;

    private int commentStart;
    private int commentDepth;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

  // tokens for which we need to save current buffer
  private LexToken valueToken(TokenType tokenType) {
    return new LexToken(tokenType, getTokenString());
  }
  private LexToken token(TokenType tokenType) {
    return new LexToken(tokenType, null);
  }

  public String getTokenString() {
    return new String(zzBuffer, getTokenStart(), getTokenEnd() - getTokenStart());
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MarcelJflexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) throws MarcelLexerException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new MarcelLexerException(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  throws MarcelLexerException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  // end of file
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public LexToken nextToken() throws java.io.IOException, MarcelLexerException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(WHITE_SPACE);
            }
            // fall through
          case 73: break;
          case 2:
            { return token(NOT);
            }
            // fall through
          case 74: break;
          case 3:
            { pushState(STRING); return token(OPEN_QUOTE);
            }
            // fall through
          case 75: break;
          case 4:
            { return token(MODULO);
            }
            // fall through
          case 76: break;
          case 5:
            { return token(LPAR);
            }
            // fall through
          case 77: break;
          case 6:
            { return token(RPAR);
            }
            // fall through
          case 78: break;
          case 7:
            { return token(MUL);
            }
            // fall through
          case 79: break;
          case 8:
            { return token(PLUS);
            }
            // fall through
          case 80: break;
          case 9:
            { return token(COMMA);
            }
            // fall through
          case 81: break;
          case 10:
            { return token(MINUS);
            }
            // fall through
          case 82: break;
          case 11:
            { return token(DOT);
            }
            // fall through
          case 83: break;
          case 12:
            { return token(DIV);
            }
            // fall through
          case 84: break;
          case 13:
            { return valueToken(INTEGER);
            }
            // fall through
          case 85: break;
          case 14:
            { return token(COLON);
            }
            // fall through
          case 86: break;
          case 15:
            { return token(SEMI_COLON);
            }
            // fall through
          case 87: break;
          case 16:
            { return token(LT);
            }
            // fall through
          case 88: break;
          case 17:
            { return token(ASSIGNMENT);
            }
            // fall through
          case 89: break;
          case 18:
            { return token(GT);
            }
            // fall through
          case 90: break;
          case 19:
            { return valueToken(IDENTIFIER);
            }
            // fall through
          case 91: break;
          case 20:
            { return token(BRACKETS_OPEN);
            }
            // fall through
          case 92: break;
          case 21:
            { return token(BRACKETS_CLOSE);
            }
            // fall through
          case 93: break;
          case 22:
            { return valueToken(REGULAR_STRING_PART);
            }
            // fall through
          case 94: break;
          case 23:
            { popState(); yypushback(1); return valueToken(DANGLING_NEWLINE);
            }
            // fall through
          case 95: break;
          case 24:
            { popState(); return token(CLOSING_QUOTE);
            }
            // fall through
          case 96: break;
          case 25:
            { popState(); return valueToken(IDENTIFIER);
            }
            // fall through
          case 97: break;
          case 26:
            { lBraceCount++; return valueToken(LBRACE);
            }
            // fall through
          case 98: break;
          case 27:
            { if (lBraceCount == 0) {
                                             popState();
                                             return token(LONG_TEMPLATE_ENTRY_END);
                                           }
                                           lBraceCount--;
                                           return valueToken(RBRACE);
            }
            // fall through
          case 99: break;
          case 28:
            { return token(NOT_EQUAL);
            }
            // fall through
          case 100: break;
          case 29:
            { return token(AND);
            }
            // fall through
          case 101: break;
          case 30:
            { return token(MUL_ASSIGNMENT);
            }
            // fall through
          case 102: break;
          case 31:
            { return token(INCR);
            }
            // fall through
          case 103: break;
          case 32:
            { return token(PLUS_ASSIGNMENT);
            }
            // fall through
          case 104: break;
          case 33:
            { return token(DECR);
            }
            // fall through
          case 105: break;
          case 34:
            { return token(MINUS_ASSIGNMENT);
            }
            // fall through
          case 106: break;
          case 35:
            { return token(DIV_ASSIGNMENT);
            }
            // fall through
          case 107: break;
          case 36:
            { return token(LOE);
            }
            // fall through
          case 108: break;
          case 37:
            { return token(EQUAL);
            }
            // fall through
          case 109: break;
          case 38:
            { return token(GOE);
            }
            // fall through
          case 110: break;
          case 39:
            { return token(AS);
            }
            // fall through
          case 111: break;
          case 40:
            { return token(IF);
            }
            // fall through
          case 112: break;
          case 41:
            { return token(IN);
            }
            // fall through
          case 113: break;
          case 42:
            { return token(OR);
            }
            // fall through
          case 114: break;
          case 43:
            { pushState(SHORT_TEMPLATE_ENTRY);
                                                        yypushback(yylength() - 1);
                                                        return token(SHORT_TEMPLATE_ENTRY_START);
            }
            // fall through
          case 115: break;
          case 44:
            { pushState(LONG_TEMPLATE_ENTRY); return token(LONG_TEMPLATE_ENTRY_START);
            }
            // fall through
          case 116: break;
          case 45:
            { return valueToken(ESCAPE_SEQUENCE);
            }
            // fall through
          case 117: break;
          case 46:
            { pushState(RAW_STRING); return token(OPEN_QUOTE);
            }
            // fall through
          case 118: break;
          case 47:
            { return token(FOR);
            }
            // fall through
          case 119: break;
          case 48:
            { return token(FUN);
            }
            // fall through
          case 120: break;
          case 49:
            { return token(TYPE_INT);
            }
            // fall through
          case 121: break;
          case 50:
            { return token(NEW);
            }
            // fall through
          case 122: break;
          case 51:
            { int length = yytext().length();
                                    if (length <= 3) { // closing """
                                        popState();
                                        return token(CLOSING_QUOTE);
                                    }
                                    else { // some quotes at the end of a string, e.g. """ "foo""""
                                        yypushback(3); // return the closing quotes (""") to the stream
                                        return valueToken(REGULAR_STRING_PART);
                                    }
            }
            // fall through
          case 123: break;
          case 52:
            { return token(TYPE_BOOL);
            }
            // fall through
          case 124: break;
          case 53:
            { return token(TYPE_BYTE);
            }
            // fall through
          case 125: break;
          case 54:
            { return token(ELSE);
            }
            // fall through
          case 126: break;
          case 55:
            { return token(TYPE_LONG);
            }
            // fall through
          case 127: break;
          case 56:
            { return token(NULL);
            }
            // fall through
          case 128: break;
          case 57:
            { return token(VALUE_TRUE);
            }
            // fall through
          case 129: break;
          case 58:
            { return token(TYPE_VOID);
            }
            // fall through
          case 130: break;
          case 59:
            { return token(BREAK);
            }
            // fall through
          case 131: break;
          case 60:
            { return token(VALUE_FALSE);
            }
            // fall through
          case 132: break;
          case 61:
            { return token(TYPE_FLOAT);
            }
            // fall through
          case 133: break;
          case 62:
            { return token(TYPE_SHORT);
            }
            // fall through
          case 134: break;
          case 63:
            { return token(WHILE);
            }
            // fall through
          case 135: break;
          case 64:
            { return token(TYPE_DOUBLE);
            }
            // fall through
          case 136: break;
          case 65:
            { return token(IMPORT);
            }
            // fall through
          case 137: break;
          case 66:
            { return token(VISIBILITY_PUBLIC);
            }
            // fall through
          case 138: break;
          case 67:
            { return token(RETURN);
            }
            // fall through
          case 139: break;
          case 68:
            { return token(STATIC);
            }
            // fall through
          case 140: break;
          case 69:
            { return token(VISIBILITY_PRIVATE);
            }
            // fall through
          case 141: break;
          case 70:
            { return token(CONTINUE);
            }
            // fall through
          case 142: break;
          case 71:
            { return token(VISIBILITY_INTERNAL);
            }
            // fall through
          case 143: break;
          case 72:
            { return token(VISIBILITY_PROTECTED);
            }
            // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
