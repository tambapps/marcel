/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.tambapps.marcel.lexer;
import static com.tambapps.marcel.lexer.TokenType.*;
import java.util.Stack;
import java.io.IOException;
import java.io.StringReader;

/**
  * Marcel lang lexer
  */

public class MarcelJflexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int RAW_STRING = 4;
  public static final int SHORT_TEMPLATE_ENTRY = 6;
  public static final int BLOCK_COMMENT = 8;
  public static final int DOC_COMMENT = 10;
  public static final int CHAR_STRING = 12;
  public static final int SIMPLE_STRING = 14;
  public static final int REGEX_STRING = 16;
  public static final int LONG_TEMPLATE_ENTRY = 18;
  public static final int UNMATCHED_BACKTICK = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14336 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1"+
    "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65"+
    "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2"+
    "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115"+
    "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13"+
    "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142"+
    "\1\25\45\13\1\143\1\13\1\25\1\30\4\13\1\30\1\144\1\145\1\16\1\13\1\16\1\13"+
    "\1\16\1\145\1\71\3\13\1\146\1\1\1\147\1\115\2\1\1\115\5\13\1\27\1\150\1\13"+
    "\1\151\4\13\1\40\1\13\1\152\2\1\1\65\1\13\1\153\1\154\2\13\1\155\1\13\1\77"+
    "\1\115\2\1\1\13\1\113\3\13\1\154\2\1\2\115\1\156\5\1\1\110\2\13\1\146\1\157"+
    "\1\115\2\1\1\160\1\13\1\161\1\42\2\13\1\40\1\1\2\13\1\146\1\1\1\162\1\42\1"+
    "\13\1\153\1\46\5\1\1\163\1\164\14\13\4\1\21\13\1\142\2\13\1\142\1\165\1\13"+
    "\1\153\3\13\1\166\1\167\1\170\1\125\1\167\2\1\1\171\4\1\1\172\1\1\1\125\6"+
    "\1\1\173\1\174\1\175\1\176\1\177\3\1\1\200\147\1\2\13\1\152\2\13\1\152\10"+
    "\13\1\201\1\202\2\13\1\134\3\13\1\203\1\1\1\13\1\113\4\204\4\1\1\127\35\1"+
    "\1\205\2\1\1\206\1\25\4\13\1\207\1\25\4\13\1\135\1\110\1\13\1\153\1\25\4\13"+
    "\1\152\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1"+
    "\125\4\1\2\13\1\153\20\13\1\125\1\13\1\210\1\1\2\13\1\152\1\127\1\13\1\153"+
    "\4\13\1\40\2\1\1\211\1\212\5\13\1\213\1\13\1\152\1\27\3\1\1\211\1\214\1\13"+
    "\1\31\1\1\3\13\1\146\1\212\2\13\1\146\1\1\1\115\1\1\1\215\1\42\1\13\1\40\1"+
    "\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\216\1\217\2\13\1\46"+
    "\1\1\1\220\1\115\1\13\1\221\3\13\1\222\1\223\1\224\1\30\1\66\1\225\1\226\1"+
    "\204\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\146\1\13\1\227\2\13\1\155\20"+
    "\1\26\13\1\153\6\13\1\77\2\1\1\113\1\230\1\56\1\231\1\232\6\13\1\16\1\1\1"+
    "\160\25\13\1\153\1\1\4\13\1\212\2\13\1\27\2\1\1\155\7\1\1\216\7\13\1\125\1"+
    "\1\1\115\1\25\1\30\1\25\1\30\1\233\4\13\1\152\1\234\1\235\2\1\1\236\1\13\1"+
    "\14\1\237\2\153\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2\13\1\1\1\13"+
    "\1\240\2\13\1\40\1\13\1\153\2\13\1\241\3\1\11\13\1\153\1\115\2\13\1\241\1"+
    "\13\1\155\2\13\1\27\3\13\1\146\11\1\23\13\1\113\1\13\1\40\1\27\11\1\1\242"+
    "\2\13\1\243\1\13\1\40\1\13\1\113\1\13\1\152\4\1\1\13\1\244\1\13\1\40\1\13"+
    "\1\77\4\1\3\13\1\245\4\1\1\71\1\246\1\13\1\146\2\1\1\13\1\125\1\13\1\125\2"+
    "\1\1\124\1\13\1\154\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1"+
    "\46\3\1\3\13\1\31\3\13\1\31\60\1\1\160\2\13\1\27\2\1\1\65\1\1\1\160\2\13\2"+
    "\1\1\13\1\46\1\115\1\160\1\13\1\113\1\65\1\1\2\13\1\247\1\160\2\13\1\31\1"+
    "\250\1\251\2\1\1\13\1\22\1\155\5\1\1\252\1\253\1\46\2\13\1\152\1\1\1\115\1"+
    "\73\1\55\1\56\1\70\1\1\1\254\1\16\11\1\3\13\1\154\1\255\1\115\2\1\3\13\1\1"+
    "\1\256\1\115\12\1\2\13\1\152\2\1\1\257\2\1\3\13\1\1\1\260\1\115\2\1\2\13\1"+
    "\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34\1\3\13\1\46"+
    "\20\1\1\56\1\13\1\152\1\1\1\71\1\115\1\1\1\212\1\13\67\1\71\13\1\77\16\1\14"+
    "\13\1\146\53\1\2\13\1\152\75\1\44\13\1\113\33\1\43\13\1\46\1\13\1\152\1\115"+
    "\6\1\1\13\1\153\1\1\3\13\1\1\1\146\1\115\1\160\1\261\1\13\67\1\4\13\1\154"+
    "\1\71\3\1\1\160\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1\1\16\77\1\6\13"+
    "\1\30\1\125\1\46\1\77\66\1\5\13\1\216\3\13\1\145\1\262\1\263\1\264\3\13\1"+
    "\265\1\266\1\13\1\267\1\270\1\36\24\13\1\271\1\13\1\36\1\135\1\13\1\135\1"+
    "\13\1\216\1\13\1\216\1\152\1\13\1\152\1\13\1\56\1\13\1\56\1\13\1\272\3\273"+
    "\14\13\1\154\3\1\4\13\1\146\1\115\112\1\1\264\1\13\1\274\1\275\1\276\1\277"+
    "\1\300\1\301\1\302\1\155\1\303\1\155\24\1\55\13\1\113\2\1\103\13\1\154\15"+
    "\13\1\153\150\13\1\16\25\1\41\13\1\153\36\1");

  /* The ZZ_CMAP_A table has 3136 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\7\1\11\1\104\1\105\1\104\22\0\1\7\1\13\1\30\1\12\1\4\1\72\1\76\1\25"+
    "\1\63\1\64\1\34\1\71\1\101\1\24\1\21\1\10\1\14\11\5\1\67\1\70\1\74\1\100\1"+
    "\75\1\73\1\103\1\6\1\16\1\6\1\22\1\23\1\22\5\1\1\17\10\1\1\20\2\1\1\15\2\1"+
    "\1\65\1\26\1\66\1\0\1\2\1\31\1\45\1\50\1\55\1\40\1\43\1\44\1\54\1\52\1\37"+
    "\1\1\1\57\1\46\1\61\1\53\1\36\1\56\1\1\1\42\1\47\1\41\1\27\1\35\1\62\1\60"+
    "\1\51\1\1\1\32\1\77\1\33\1\102\6\0\1\104\24\0\1\1\12\0\1\1\4\0\1\1\5\0\27"+
    "\1\1\0\12\1\4\0\14\1\16\0\5\1\7\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1\2\0\4\1\1\0"+
    "\1\1\6\0\1\1\1\0\3\1\1\0\1\1\1\0\4\1\1\0\23\1\1\0\13\1\10\0\6\1\1\0\26\1\2"+
    "\0\1\1\6\0\10\1\10\0\13\1\5\0\3\1\15\0\12\3\4\0\6\1\1\0\1\1\17\0\2\1\7\0\2"+
    "\1\12\3\3\1\2\0\2\1\1\0\16\1\15\0\11\1\13\0\1\1\16\0\12\3\6\1\4\0\2\1\4\0"+
    "\1\1\5\0\6\1\4\0\1\1\11\0\1\1\3\0\1\1\7\0\11\1\7\0\5\1\1\0\10\1\6\0\26\1\3"+
    "\0\1\1\2\0\1\1\7\0\12\1\4\0\12\3\1\1\4\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\1\1\3\0\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0\1\1\5\0\6\1\4\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\17\0\4\1\1\0\1\1\7\0\12\3\2\0\3\1\20\0\11\1\1\0\2\1\1\0\2\1\1"+
    "\0\5\1\3\0\1\1\2\0\1\1\30\0\1\1\13\0\10\1\2\0\1\1\3\0\1\1\1\0\6\1\3\0\3\1"+
    "\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0\14\1\13\0\10\1\1\0\2"+
    "\1\10\0\3\1\5\0\1\1\4\0\10\1\1\0\6\1\1\0\5\1\3\0\1\1\3\0\2\1\15\0\13\1\2\0"+
    "\1\1\6\0\3\1\10\0\1\1\12\0\6\1\5\0\22\1\3\0\10\1\1\0\11\1\1\0\1\1\2\0\7\1"+
    "\11\0\1\1\1\0\2\1\14\0\12\3\7\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4"+
    "\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0\2\1\11\0\1\1\2\0\5"+
    "\1\1\0\1\1\11\0\12\3\2\0\14\1\1\0\24\1\13\0\5\1\22\0\7\1\4\0\4\1\3\0\1\1\3"+
    "\0\2\1\7\0\3\1\4\0\15\1\14\0\1\1\1\0\6\1\1\0\1\1\5\0\1\1\2\0\13\1\1\0\15\1"+
    "\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2"+
    "\0\16\1\2\0\6\1\2\0\15\1\2\0\1\1\1\0\10\1\7\0\15\1\1\0\6\1\23\0\1\1\4\0\1"+
    "\1\3\0\5\1\2\0\22\1\1\0\1\1\5\0\17\1\1\0\16\1\2\0\5\1\13\0\14\1\13\0\1\1\15"+
    "\0\7\1\7\0\16\1\15\0\2\1\12\3\3\0\3\1\11\0\4\1\1\0\4\1\3\0\2\1\11\0\10\1\1"+
    "\0\1\1\1\0\1\1\1\0\1\1\1\0\6\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0"+
    "\6\1\14\0\2\104\7\0\1\1\15\0\1\1\2\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1"+
    "\6\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0\1\1\4\0\2\1"+
    "\13\0\5\1\6\0\4\1\3\0\2\1\14\0\10\1\7\0\10\1\1\0\7\1\6\0\2\1\12\0\5\1\5\0"+
    "\2\1\3\0\7\1\6\0\3\1\12\3\2\1\13\0\11\1\2\0\27\1\2\0\7\1\1\0\3\1\1\0\4\1\1"+
    "\0\4\1\2\0\6\1\3\0\1\1\1\0\1\1\2\0\5\1\1\0\12\1\12\3\5\1\1\0\3\1\1\0\10\1"+
    "\4\0\7\1\3\0\1\1\3\0\2\1\1\0\1\1\3\0\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1"+
    "\3\0\6\1\2\0\6\1\2\0\6\1\11\0\7\1\4\0\5\1\3\0\5\1\5\0\1\1\1\0\10\1\1\0\5\1"+
    "\1\0\1\1\1\0\2\1\1\0\2\1\1\0\12\1\6\0\12\1\2\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1"+
    "\3\0\14\1\1\0\16\1\1\0\2\1\1\0\2\1\1\0\10\1\6\0\4\1\4\0\16\1\2\0\1\1\1\0\14"+
    "\1\1\0\2\1\3\0\1\1\2\0\4\1\1\0\2\1\12\0\10\1\6\0\6\1\1\0\3\1\1\0\12\1\3\0"+
    "\1\1\12\0\4\1\13\0\12\3\1\1\1\0\1\1\3\0\7\1\1\0\1\1\1\0\4\1\1\0\17\1\1\0\2"+
    "\1\14\0\3\1\7\0\4\1\11\0\2\1\1\0\1\1\20\0\4\1\10\0\1\1\13\0\10\1\5\0\3\1\2"+
    "\0\1\1\2\0\2\1\2\0\4\1\1\0\14\1\1\0\1\1\1\0\7\1\1\0\21\1\1\0\4\1\2\0\10\1"+
    "\1\0\7\1\1\0\14\1\1\0\4\1\1\0\5\1\1\0\1\1\3\0\14\1\2\0\13\1\1\0\10\1\2\0\22"+
    "\3\1\0\2\1\1\0\1\1\2\0\1\1\1\0\12\1\1\0\4\1\1\0\1\1\1\0\1\1\6\0\1\1\4\0\1"+
    "\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\2\0\4\1\1\0\7\1\1\0\4\1\1\0\4\1\1\0\1\1\1\0\12\1"+
    "\1\0\5\1\1\0\3\1\1\0\5\1\1\0\5\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\3\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\20\2\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\1\1\32\1\33"+
    "\1\34\1\35\2\36\1\37\1\1\1\40\2\36\1\41"+
    "\3\42\1\36\1\0\1\43\1\36\1\44\1\36\1\45"+
    "\1\0\1\46\1\47\2\3\1\0\2\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\0\2\3\1\50\1\56\1\57"+
    "\1\60\1\61\1\0\1\62\1\2\1\63\1\64\1\65"+
    "\16\2\1\66\23\2\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\2\104\1\0\1\105\1\106\1\36\1\50\1\107\1\110"+
    "\1\111\1\2\1\112\5\2\1\113\1\2\1\114\5\2"+
    "\1\115\1\116\15\2\1\117\12\2\1\120\1\0\1\121"+
    "\1\0\1\122\1\123\7\2\1\124\1\125\2\2\1\126"+
    "\5\2\1\127\4\2\1\130\1\2\1\131\1\132\4\2"+
    "\1\133\5\2\1\134\2\0\7\2\1\135\2\2\1\136"+
    "\1\137\1\140\1\2\1\141\1\2\1\142\1\2\1\143"+
    "\2\2\1\144\1\145\4\2\1\146\2\0\1\2\1\147"+
    "\1\2\1\150\2\2\1\151\1\152\1\153\4\2\1\154"+
    "\1\155\2\2\1\156\7\2\1\157\1\2\1\160\4\2"+
    "\1\161\1\162\1\163\2\2\1\164\2\2\1\165\4\2"+
    "\1\166\2\2\1\167\1\170\1\171\1\172\1\2\1\173";

  private static int [] zzUnpackAction() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0276\0\u0532\0\u0276\0\u0276\0\u0276"+
    "\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762"+
    "\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992"+
    "\0\u09d8\0\u0276\0\u0276\0\u0276\0\u0276\0\u0276\0\u0276\0\u0a1e"+
    "\0\u0276\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0276"+
    "\0\u0276\0\u0c08\0\u0c4e\0\u0276\0\u0c94\0\u0276\0\u0276\0\u0cda"+
    "\0\u0d20\0\u0276\0\u0d66\0\u0dac\0\u0df2\0\u0c94\0\u0276\0\u0e38"+
    "\0\u0276\0\u0e7e\0\u0276\0\u0ec4\0\u0276\0\u0276\0\u0276\0\u0f0a"+
    "\0\u0f50\0\u0276\0\u0f96\0\u0fdc\0\u1022\0\u0276\0\u1068\0\u10ae"+
    "\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u0276\0\u0276\0\u0276\0\u0276"+
    "\0\u120c\0\u0276\0\u1252\0\u02bc\0\u02bc\0\u1298\0\u12de\0\u1324"+
    "\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554"+
    "\0\u159a\0\u15e0\0\u1626\0\u166c\0\u02bc\0\u16b2\0\u16f8\0\u173e"+
    "\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e"+
    "\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e"+
    "\0\u0276\0\u0276\0\u0276\0\u0276\0\u0276\0\u0276\0\u0276\0\u0276"+
    "\0\u0276\0\u1be4\0\u0276\0\u1c2a\0\u0276\0\u0276\0\u1c70\0\u1cb6"+
    "\0\u0276\0\u0276\0\u1cfc\0\u1d42\0\u1d88\0\u0276\0\u0276\0\u1dce"+
    "\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u02bc\0\u1fb8"+
    "\0\u02bc\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u02bc\0\u02bc"+
    "\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346"+
    "\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u02bc\0\u24ea\0\u2530"+
    "\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760"+
    "\0\u0276\0\u27a6\0\u1cb6\0\u27ec\0\u0276\0\u02bc\0\u2832\0\u2878"+
    "\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6\0\u02bc\0\u02bc\0\u2a1c"+
    "\0\u2a62\0\u02bc\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u02bc"+
    "\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u02bc\0\u2d1e\0\u02bc\0\u02bc"+
    "\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u02bc\0\u2e7c\0\u2ec2\0\u2f08"+
    "\0\u2f4e\0\u2f94\0\u02bc\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2"+
    "\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322"+
    "\0\u02bc\0\u02bc\0\u3368\0\u02bc\0\u33ae\0\u02bc\0\u33f4\0\u02bc"+
    "\0\u343a\0\u3480\0\u02bc\0\u02bc\0\u34c6\0\u350c\0\u3552\0\u3598"+
    "\0\u02bc\0\u35de\0\u3624\0\u366a\0\u02bc\0\u36b0\0\u02bc\0\u36f6"+
    "\0\u373c\0\u02bc\0\u02bc\0\u02bc\0\u3782\0\u37c8\0\u380e\0\u3854"+
    "\0\u02bc\0\u02bc\0\u389a\0\u38e0\0\u02bc\0\u3926\0\u396c\0\u39b2"+
    "\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u02bc\0\u3b10\0\u02bc\0\u3b56"+
    "\0\u3b9c\0\u3be2\0\u3c28\0\u02bc\0\u02bc\0\u02bc\0\u3c6e\0\u3cb4"+
    "\0\u02bc\0\u3cfa\0\u3d40\0\u02bc\0\u3d86\0\u3dcc\0\u3e12\0\u3e58"+
    "\0\u02bc\0\u3e9e\0\u3ee4\0\u02bc\0\u02bc\0\u02bc\0\u02bc\0\u3f2a"+
    "\0\u02bc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\2\12\1\14\1\13\1\15\1\16\1\15"+
    "\1\17\1\20\1\21\4\13\1\22\2\13\1\23\1\24"+
    "\1\12\1\13\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\2\13\1\46\1\13\1\47\1\50"+
    "\3\13\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\12\1\71\1\12\1\15\4\72\1\73\4\72"+
    "\1\74\14\72\1\75\1\72\1\76\61\72\1\73\4\72"+
    "\1\77\14\72\1\77\1\72\1\100\55\72\1\12\2\101"+
    "\3\12\1\101\2\12\1\0\3\12\4\101\1\12\2\101"+
    "\3\12\1\101\5\12\26\101\21\12\2\0\10\102\1\103"+
    "\23\102\1\104\51\102\26\105\1\106\2\105\1\107\54\105"+
    "\25\110\1\111\1\106\57\110\10\112\1\113\15\112\1\114"+
    "\57\112\1\12\2\13\2\12\1\14\1\13\1\15\1\16"+
    "\1\15\1\17\1\20\1\21\4\13\1\22\2\13\1\23"+
    "\1\24\1\12\1\13\1\25\1\26\1\115\1\116\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\2\13\1\46\1\13\1\47"+
    "\1\50\3\13\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\12\1\71\1\12\1\15\107\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\26\13"+
    "\25\0\1\14\2\0\1\14\6\0\1\14\2\0\1\117"+
    "\1\120\1\121\1\122\1\123\3\0\1\120\10\0\1\122"+
    "\2\0\1\123\1\122\1\0\1\117\46\0\1\15\1\0"+
    "\1\15\73\0\1\15\10\0\1\124\23\0\1\125\43\0"+
    "\1\126\20\0\1\127\172\0\1\130\7\0\1\131\2\0"+
    "\1\131\6\0\1\131\1\132\1\133\1\117\1\120\1\121"+
    "\1\122\1\123\3\0\1\120\10\0\1\122\2\0\1\123"+
    "\1\122\1\0\1\117\1\0\1\133\7\0\1\132\32\0"+
    "\1\134\6\0\1\134\4\0\1\135\110\0\1\136\50\0"+
    "\1\137\2\0\1\140\35\0\1\141\155\0\1\142\6\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\1\13\1\143\24\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\7\13\1\144\16\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\7\13\1\145\6\13\1\146\5\13\1\147\1\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\150\5\0"+
    "\1\13\1\151\4\13\1\152\17\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\5\13\1\153"+
    "\7\13\1\154\10\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\6\13\1\155\17\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\11\13\1\156\11\13\1\157\2\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\160\5\0\1\13\1\161"+
    "\1\162\5\13\1\163\1\164\14\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\12\13\1\165"+
    "\3\13\1\166\7\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\1\13\1\167\24\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\170\5\0"+
    "\4\13\1\171\10\13\1\172\7\13\1\173\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\1\13"+
    "\1\174\3\13\1\175\6\13\1\176\11\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\177\5\0\6\13"+
    "\1\200\17\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\1\13\1\201\6\13\1\202\1\203"+
    "\3\13\1\204\10\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\205\5\0\5\13\1\206\2\13\1\207"+
    "\15\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\15\13\1\210\10\13\114\0\1\211\6\0"+
    "\1\212\26\0\1\213\160\0\1\214\3\0\1\215\102\0"+
    "\1\216\2\0\1\217\103\0\1\220\106\0\1\221\106\0"+
    "\1\222\1\0\1\223\3\0\4\72\1\0\4\72\1\0"+
    "\14\72\1\0\1\72\1\0\55\72\1\0\2\224\3\0"+
    "\1\224\6\0\4\224\1\0\2\224\3\0\1\224\2\0"+
    "\1\225\2\0\26\224\23\0\11\226\1\0\15\226\1\227"+
    "\56\226\30\0\1\230\56\0\6\101\5\0\5\101\1\0"+
    "\2\101\3\0\1\101\5\0\26\101\57\0\1\231\61\0"+
    "\1\232\75\0\26\105\1\0\2\105\1\0\54\105\25\110"+
    "\2\0\57\110\10\112\1\0\15\112\1\0\57\112\10\77"+
    "\1\226\1\0\15\77\1\233\56\77\17\0\1\117\26\0"+
    "\1\117\44\0\1\134\6\0\1\134\73\0\1\234\2\0"+
    "\1\234\6\0\1\234\5\0\1\122\1\0\1\234\13\0"+
    "\1\122\3\0\1\122\24\0\1\234\14\0\11\124\1\0"+
    "\74\124\34\0\1\235\51\0\11\127\1\0\74\127\100\0"+
    "\1\236\7\0\1\131\2\0\1\131\6\0\1\131\4\0"+
    "\1\121\1\122\1\123\14\0\1\122\2\0\1\123\1\122"+
    "\43\0\1\132\2\0\2\132\5\0\1\132\1\0\1\132"+
    "\1\117\1\120\1\0\2\132\3\0\1\120\10\0\1\132"+
    "\2\0\3\132\1\117\1\0\1\132\4\0\1\132\32\0"+
    "\1\133\2\0\1\133\6\0\1\133\2\0\1\117\1\120"+
    "\6\0\1\120\16\0\1\117\41\0\1\134\2\0\1\134"+
    "\6\0\1\134\5\0\1\122\1\123\14\0\1\122\2\0"+
    "\1\123\1\122\71\0\1\237\56\0\6\13\5\0\5\13"+
    "\1\0\2\13\3\0\1\13\5\0\2\13\1\240\23\13"+
    "\24\0\6\13\5\0\5\13\1\0\2\13\3\0\1\13"+
    "\5\0\4\13\1\241\4\13\1\242\1\243\13\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\21\13\1\244\4\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\24\13\1\245\1\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\246\5\0"+
    "\26\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\7\13\1\247\16\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\250\5\0\14\13\1\251"+
    "\11\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\2\13\1\252\2\13\1\253\20\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\4\13\1\254\21\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\12\13\1\255\13\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\4\13\1\256\21\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\16\13\1\257\7\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\5\13\1\260\20\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\16\13\1\261\7\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\11\13\1\262\14\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\1\13\1\263\24\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\16\13\1\264\7\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\16\13\1\265\7\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\21\13\1\266\4\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\10\13\1\267\15\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\1\13\1\270\24\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\2\13\1\271\23\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\1\13\1\272\24\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\6\13\1\273\17\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\4\13\1\274\21\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\11\13\1\275\14\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\25\13\1\276\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\16\13\1\277\7\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\4\13"+
    "\1\300\21\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\10\13\1\301\15\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\10\13"+
    "\1\302\15\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\13\13\1\303\12\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\1\13"+
    "\1\304\1\305\23\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\20\13\1\306\5\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\2\13\1\307\3\13\1\310\17\13\123\0\1\311\6\0"+
    "\6\224\5\0\5\224\1\0\2\224\3\0\1\224\5\0"+
    "\26\224\30\0\2\312\5\0\1\312\1\0\1\312\3\0"+
    "\2\312\14\0\1\312\2\0\3\312\2\0\1\312\4\0"+
    "\1\312\60\0\1\313\62\0\2\314\5\0\1\314\1\0"+
    "\1\314\3\0\2\314\14\0\1\314\2\0\3\314\2\0"+
    "\1\314\4\0\1\314\32\0\1\234\2\0\1\234\6\0"+
    "\1\234\5\0\1\122\15\0\1\122\3\0\1\122\51\0"+
    "\1\315\76\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\3\13\1\316\22\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\6\13\1\317"+
    "\17\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\2\13\1\320\23\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\4\13\1\321"+
    "\21\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\1\13\1\322\7\13\1\323\14\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\13\13\1\324\12\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\13\13\1\325\12\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\6\13\1\326\17\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\12\13\1\327\13\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\1\13\1\330\24\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\331\5\0\26\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\6\13\1\332"+
    "\17\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\6\13\1\333\17\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\10\13\1\334"+
    "\15\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\12\13\1\335\13\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\10\13\1\336"+
    "\15\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\1\13\1\337\24\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\17\13\1\340"+
    "\6\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\6\13\1\341\17\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\4\13\1\342"+
    "\21\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\5\13\1\343\20\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\4\13\1\344"+
    "\21\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\11\13\1\345\14\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\10\13\1\346"+
    "\15\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\6\13\1\347\17\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\11\13\1\350"+
    "\14\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\4\13\1\351\5\13\1\352\13\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\20\13\1\353\5\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\12\13\1\354\13\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\5\13\1\355\20\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\11\13\1\356\14\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\4\13\1\357\21\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\1\360\25\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\22\13"+
    "\1\361\3\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\11\13\1\362\14\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\16\13"+
    "\1\363\7\13\30\0\2\364\5\0\1\364\1\0\1\364"+
    "\3\0\2\364\14\0\1\364\2\0\3\364\2\0\1\364"+
    "\4\0\1\364\35\0\2\365\5\0\1\365\1\0\1\365"+
    "\3\0\2\365\14\0\1\365\2\0\3\365\2\0\1\365"+
    "\4\0\1\365\31\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\5\13\1\366\20\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\16\13"+
    "\1\367\7\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\10\13\1\370\15\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\5\13"+
    "\1\371\20\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\6\13\1\372\17\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\13\13"+
    "\1\373\12\13\24\0\6\13\5\0\5\13\1\0\2\13"+
    "\3\0\1\13\5\0\11\13\1\374\14\13\24\0\6\13"+
    "\5\0\5\13\1\0\2\13\3\0\1\13\5\0\25\13"+
    "\1\375\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\5\13\1\376\20\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\16\13\1\377"+
    "\7\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\11\13\1\u0100\14\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\6\13\1\u0101"+
    "\17\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\4\13\1\u0102\21\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\4\13\1\u0103"+
    "\21\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\5\13\1\u0104\20\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\2\13\1\u0105"+
    "\23\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\4\13\1\u0106\21\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\20\13\1\u0107"+
    "\5\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\22\13\1\u0108\3\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\2\13\1\u0109"+
    "\23\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\4\13\1\u010a\21\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\15\13\1\u010b"+
    "\10\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\12\13\1\u010c\13\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\2\13\1\u010d"+
    "\23\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\6\13\1\u010e\17\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\10\13\1\u010f"+
    "\15\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\10\13\1\u0110\15\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\6\13\1\u0111"+
    "\17\13\30\0\2\u0112\5\0\1\u0112\1\0\1\u0112\3\0"+
    "\2\u0112\14\0\1\u0112\2\0\3\u0112\2\0\1\u0112\4\0"+
    "\1\u0112\35\0\2\u0113\5\0\1\u0113\1\0\1\u0113\3\0"+
    "\2\u0113\14\0\1\u0113\2\0\3\u0113\2\0\1\u0113\4\0"+
    "\1\u0113\31\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\16\13\1\u0114\7\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\6\13\1\u0115"+
    "\17\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\16\13\1\u0116\7\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\4\13\1\u0117"+
    "\21\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\24\13\1\u0118\1\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\6\13\1\u0119"+
    "\17\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\6\13\1\u011a\17\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\12\13\1\u011b"+
    "\13\13\24\0\6\13\5\0\5\13\1\0\2\13\3\0"+
    "\1\13\5\0\16\13\1\u011c\7\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\13\5\0\3\13\1\u011d"+
    "\6\13\1\u011e\13\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\11\13\1\u011f\14\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\10\13\1\u0120\15\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\20\13\1\u0121\5\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\15\13\1\u0122\10\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\16\13\1\u0123\7\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\5\13\1\u0124\20\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\20\13\1\u0125\5\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\20\13\1\u0126\5\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\4\13\1\u0127\21\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\17\13\1\u0128\6\13\30\0\2\226\5\0\1\226\1\0"+
    "\1\226\3\0\2\226\14\0\1\226\2\0\3\226\2\0"+
    "\1\226\4\0\1\226\35\0\2\77\5\0\1\77\1\0"+
    "\1\77\3\0\2\77\14\0\1\77\2\0\3\77\2\0"+
    "\1\77\4\0\1\77\31\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\10\13\1\u0129\15\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\20\13\1\u012a\5\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\6\13\1\u012b\17\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\11\13\1\u012c\14\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\12\13\1\u012d\13\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\2\13\1\u012e\23\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\14\13\1\u012f\11\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\4\13\1\u0130\21\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\u0131\5\0\26\13\24\0\6\13\5\0"+
    "\5\13\1\0\2\13\3\0\1\u0132\5\0\26\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\4\13\1\u0133\21\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\6\13\1\u0134\17\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\6\13\1\u0135\17\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\11\13\1\u0136\14\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\6\13\1\u0137\17\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\16\13\1\u0138\7\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\11\13\1\u0139\14\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\1\13\1\u013a\24\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\2\13\1\u013b\23\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\6\13\1\u013c\17\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\20\13\1\u013d\5\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\6\13\1\u013e\17\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\1\13\1\u013f\24\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\4\13\1\u0140\21\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\16\13\1\u0141\7\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\1\13\1\u0142\24\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\4\13\1\u0143\21\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\3\13\1\u0144\22\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\7\13\1\u0145\16\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\12\13\1\u0146\13\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\16\13\1\u0147\7\13\24\0\6\13\5\0\5\13\1\0"+
    "\2\13\3\0\1\13\5\0\1\13\1\u0148\24\13\24\0"+
    "\6\13\5\0\5\13\1\0\2\13\3\0\1\13\5\0"+
    "\5\13\1\u0149\20\13\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\11\1\1\11\1\1\3\11\21\1\6\11"+
    "\1\1\1\11\6\1\2\11\2\1\1\11\1\1\2\11"+
    "\2\1\1\11\3\1\1\0\1\11\1\1\1\11\1\1"+
    "\1\11\1\0\3\11\1\1\1\0\1\11\3\1\1\11"+
    "\2\1\1\0\3\1\4\11\1\0\1\11\46\1\11\11"+
    "\1\1\1\11\1\1\2\11\1\1\1\0\2\11\3\1"+
    "\2\11\51\1\1\11\1\0\1\1\1\0\1\11\46\1"+
    "\2\0\34\1\2\0\66\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

     private int yyline;
     private int yycolumn;

     public MarcelJflexer() {}

     private static final class State {
            final int lBraceCount;
            final int state;

            public State(int state, int lBraceCount) {
                this.state = state;
                this.lBraceCount = lBraceCount;
            }

            @Override
            public String toString() {
                return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
            }
        }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;

    private int commentStart;
    private int commentDepth;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

        private LexToken commentStateToTokenType(int state) {
            switch (state) {
                case BLOCK_COMMENT:
                    return new LexToken(getTokenStart(), getTokenEnd(), yyline, yycolumn, TokenType.BLOCK_COMMENT, null);
                case DOC_COMMENT:
                    return new LexToken(getTokenStart(), getTokenEnd(), yyline, yycolumn, TokenType.DOC_COMMENT, null);
                default:
                    throw new IllegalArgumentException("Unexpected state: " + state);
            }
        }

  // tokens for which we need to save current buffer
  private LexToken valueToken(TokenType tokenType) {
    return new LexToken(getTokenStart(), getTokenEnd(), yyline, yycolumn, tokenType, getTokenString());
  }
  private LexToken token(TokenType tokenType) {
    return new LexToken(getTokenStart(), getTokenEnd(), yyline, yycolumn, tokenType, null);
  }

  public String getTokenString() {
    return zzBuffer.subSequence(getTokenStart(), getTokenEnd()).toString();
  }

  private Character getLastNonWhitespaceChar() {
      int i = zzCurrentPos - 1;
      while (i >= 0) {
        char c = zzBuffer.charAt(i);
        if (!Character.isWhitespace(c)) return c;
        i--;
      }
      return null;
  }

  public int getYyline() { return yyline; }
  public int getYycolumn() { return yycolumn; }
  public int getZzLexicalState() { return zzLexicalState; }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MarcelJflexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws MarcelJfexerException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new MarcelJfexerException(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  throws MarcelJfexerException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      // end of file

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public LexToken nextToken() throws java.io.IOException, MarcelJfexerException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return commentStateToTokenType(state);
            }  // fall though
            case 330: break;
            case DOC_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return commentStateToTokenType(state);
            }  // fall though
            case 331: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return token(BAD_CHARACTER);
            } 
            // fall through
          case 124: break;
          case 2: 
            { return valueToken(IDENTIFIER);
            } 
            // fall through
          case 125: break;
          case 3: 
            { return valueToken(INTEGER);
            } 
            // fall through
          case 126: break;
          case 4: 
            { return token(WHITE_SPACE);
            } 
            // fall through
          case 127: break;
          case 5: 
            { Character lastChar = getLastNonWhitespaceChar();
      if (lastChar == null || !Character.isLetterOrDigit(lastChar)) {
        pushState(REGEX_STRING);
        return token(OPEN_REGEX_QUOTE);
      } else {
        return token(DIV);
      }
            } 
            // fall through
          case 128: break;
          case 6: 
            { return token(NOT);
            } 
            // fall through
          case 129: break;
          case 7: 
            { return token(DOT);
            } 
            // fall through
          case 130: break;
          case 8: 
            { return token(MINUS);
            } 
            // fall through
          case 131: break;
          case 9: 
            { pushState(SIMPLE_STRING); return token(OPEN_SIMPLE_QUOTE);
            } 
            // fall through
          case 132: break;
          case 10: 
            { pushState(STRING); return token(OPEN_QUOTE);
            } 
            // fall through
          case 133: break;
          case 11: 
            { pushState(CHAR_STRING); return token(OPEN_CHAR_QUOTE);
            } 
            // fall through
          case 134: break;
          case 12: 
            { return token(BRACKETS_OPEN);
            } 
            // fall through
          case 135: break;
          case 13: 
            { return token(BRACKETS_CLOSE);
            } 
            // fall through
          case 136: break;
          case 14: 
            { return token(MUL);
            } 
            // fall through
          case 137: break;
          case 15: 
            { return token(LPAR);
            } 
            // fall through
          case 138: break;
          case 16: 
            { return token(RPAR);
            } 
            // fall through
          case 139: break;
          case 17: 
            { return token(SQUARE_BRACKETS_OPEN);
            } 
            // fall through
          case 140: break;
          case 18: 
            { return token(SQUARE_BRACKETS_CLOSE);
            } 
            // fall through
          case 141: break;
          case 19: 
            { return token(COLON);
            } 
            // fall through
          case 142: break;
          case 20: 
            { return token(SEMI_COLON);
            } 
            // fall through
          case 143: break;
          case 21: 
            { return token(PLUS);
            } 
            // fall through
          case 144: break;
          case 22: 
            { return token(MODULO);
            } 
            // fall through
          case 145: break;
          case 23: 
            { return token(QUESTION_MARK);
            } 
            // fall through
          case 146: break;
          case 24: 
            { return token(LT);
            } 
            // fall through
          case 147: break;
          case 25: 
            { return token(GT);
            } 
            // fall through
          case 148: break;
          case 26: 
            { return token(PIPE);
            } 
            // fall through
          case 149: break;
          case 27: 
            { return token(ASSIGNMENT);
            } 
            // fall through
          case 150: break;
          case 28: 
            { return token(COMMA);
            } 
            // fall through
          case 151: break;
          case 29: 
            { return token(AT);
            } 
            // fall through
          case 152: break;
          case 30: 
            { return valueToken(REGULAR_STRING_PART);
            } 
            // fall through
          case 153: break;
          case 31: 
            { popState(); yypushback(1); return valueToken(DANGLING_NEWLINE);
            } 
            // fall through
          case 154: break;
          case 32: 
            { popState(); return token(CLOSING_QUOTE);
            } 
            // fall through
          case 155: break;
          case 33: 
            { popState(); return valueToken(IDENTIFIER);
            } 
            // fall through
          case 156: break;
          case 34: 
            { 
            } 
            // fall through
          case 157: break;
          case 35: 
            { popState(); return token(CLOSING_CHAR_QUOTE);
            } 
            // fall through
          case 158: break;
          case 36: 
            { popState(); return token(CLOSING_SIMPLE_QUOTE);
            } 
            // fall through
          case 159: break;
          case 37: 
            { popState(); return token(CLOSING_REGEX_QUOTE);
            } 
            // fall through
          case 160: break;
          case 38: 
            { lBraceCount++; return valueToken(LBRACE);
            } 
            // fall through
          case 161: break;
          case 39: 
            { if (lBraceCount == 0) {
                                             popState();
                                             return token(LONG_TEMPLATE_ENTRY_END);
                                           }
                                           lBraceCount--;
                                           return valueToken(RBRACE);
            } 
            // fall through
          case 162: break;
          case 40: 
            { return valueToken(FLOAT);
            } 
            // fall through
          case 163: break;
          case 41: 
            { return token(TokenType.EOL_COMMENT);
            } 
            // fall through
          case 164: break;
          case 42: 
            { pushState(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            } 
            // fall through
          case 165: break;
          case 43: 
            { return token(DIV_ASSIGNMENT);
            } 
            // fall through
          case 166: break;
          case 44: 
            { if (zzCurrentPos == 0) {
                return token(TokenType.SHEBANG_COMMENT);
            }
            else {
                yypushback(yylength() - 1);
                return token(HASH);
            }
            } 
            // fall through
          case 167: break;
          case 45: 
            { return token(NOT_EQUAL);
            } 
            // fall through
          case 168: break;
          case 46: 
            { return token(TWO_DOTS);
            } 
            // fall through
          case 169: break;
          case 47: 
            { return token(DECR);
            } 
            // fall through
          case 170: break;
          case 48: 
            { return token(ARROW);
            } 
            // fall through
          case 171: break;
          case 49: 
            { return token(MINUS_ASSIGNMENT);
            } 
            // fall through
          case 172: break;
          case 50: 
            { return token(MUL_ASSIGNMENT);
            } 
            // fall through
          case 173: break;
          case 51: 
            { return token(OF);
            } 
            // fall through
          case 174: break;
          case 52: 
            { return token(IF);
            } 
            // fall through
          case 175: break;
          case 53: 
            { return token(IN);
            } 
            // fall through
          case 176: break;
          case 54: 
            { return token(AS);
            } 
            // fall through
          case 177: break;
          case 55: 
            { return token(INCR);
            } 
            // fall through
          case 178: break;
          case 56: 
            { return token(PLUS_ASSIGNMENT);
            } 
            // fall through
          case 179: break;
          case 57: 
            { return token(QUESTION_DOT);
            } 
            // fall through
          case 180: break;
          case 58: 
            { return token(LEFT_SHIFT);
            } 
            // fall through
          case 181: break;
          case 59: 
            { return token(LOE);
            } 
            // fall through
          case 182: break;
          case 60: 
            { return token(RIGHT_SHIFT);
            } 
            // fall through
          case 183: break;
          case 61: 
            { return token(GOE);
            } 
            // fall through
          case 184: break;
          case 62: 
            { return token(AND);
            } 
            // fall through
          case 185: break;
          case 63: 
            { return token(OR);
            } 
            // fall through
          case 186: break;
          case 64: 
            { return token(EQUAL);
            } 
            // fall through
          case 187: break;
          case 65: 
            { return token(FIND);
            } 
            // fall through
          case 188: break;
          case 66: 
            { pushState(SHORT_TEMPLATE_ENTRY);
                                                        yypushback(yylength() - 1);
                                                        return token(SHORT_TEMPLATE_ENTRY_START);
            } 
            // fall through
          case 189: break;
          case 67: 
            { pushState(LONG_TEMPLATE_ENTRY); return token(LONG_TEMPLATE_ENTRY_START);
            } 
            // fall through
          case 190: break;
          case 68: 
            { return valueToken(ESCAPE_SEQUENCE);
            } 
            // fall through
          case 191: break;
          case 69: 
            { commentDepth++;
            } 
            // fall through
          case 192: break;
          case 70: 
            { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             popState();
             zzStartRead = commentStart;
             return commentStateToTokenType(state);
        }
            } 
            // fall through
          case 193: break;
          case 71: 
            { pushState(DOC_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            } 
            // fall through
          case 194: break;
          case 72: 
            { return token(IS_NOT);
            } 
            // fall through
          case 195: break;
          case 73: 
            { pushState(RAW_STRING); return token(OPEN_QUOTE);
            } 
            // fall through
          case 196: break;
          case 74: 
            { return valueToken(TYPE_INT);
            } 
            // fall through
          case 197: break;
          case 75: 
            { return valueToken(DEF);
            } 
            // fall through
          case 198: break;
          case 76: 
            { return token(TRY);
            } 
            // fall through
          case 199: break;
          case 77: 
            { return token(FUN);
            } 
            // fall through
          case 200: break;
          case 78: 
            { return token(FOR);
            } 
            // fall through
          case 201: break;
          case 79: 
            { return token(NEW);
            } 
            // fall through
          case 202: break;
          case 80: 
            { return token(IS);
            } 
            // fall through
          case 203: break;
          case 81: 
            { int length = yytext().length();
                                    if (length <= 3) { // closing """
                                        popState();
                                        return token(CLOSING_QUOTE);
                                    }
                                    else { // some quotes at the end of a string, e.g. """ "foo""""
                                        yypushback(3); // return the closing quotes (""") to the stream
                                        return valueToken(REGULAR_STRING_PART);
                                    }
            } 
            // fall through
          case 204: break;
          case 82: 
            { return token(TokenType.BLOCK_COMMENT);
            } 
            // fall through
          case 205: break;
          case 83: 
            { return valueToken(TYPE_VOID);
            } 
            // fall through
          case 206: break;
          case 84: 
            { return token(VALUE_TRUE);
            } 
            // fall through
          case 207: break;
          case 85: 
            { return token(THIS);
            } 
            // fall through
          case 208: break;
          case 86: 
            { return token(ELSE);
            } 
            // fall through
          case 209: break;
          case 87: 
            { return valueToken(TYPE_LONG);
            } 
            // fall through
          case 210: break;
          case 88: 
            { return valueToken(TYPE_BOOL);
            } 
            // fall through
          case 211: break;
          case 89: 
            { return valueToken(TYPE_BYTE);
            } 
            // fall through
          case 212: break;
          case 90: 
            { return token(NULL);
            } 
            // fall through
          case 213: break;
          case 91: 
            { return valueToken(TYPE_CHAR);
            } 
            // fall through
          case 214: break;
          case 92: 
            { return token(WHEN);
            } 
            // fall through
          case 215: break;
          case 93: 
            { return token(THROW);
            } 
            // fall through
          case 216: break;
          case 94: 
            { return token(FINAL);
            } 
            // fall through
          case 217: break;
          case 95: 
            { return token(VALUE_FALSE);
            } 
            // fall through
          case 218: break;
          case 96: 
            { return valueToken(TYPE_FLOAT);
            } 
            // fall through
          case 219: break;
          case 97: 
            { return token(SUPER);
            } 
            // fall through
          case 220: break;
          case 98: 
            { return valueToken(TYPE_SHORT);
            } 
            // fall through
          case 221: break;
          case 99: 
            { return token(BREAK);
            } 
            // fall through
          case 222: break;
          case 100: 
            { return token(CATCH);
            } 
            // fall through
          case 223: break;
          case 101: 
            { return token(CLASS);
            } 
            // fall through
          case 224: break;
          case 102: 
            { return token(WHILE);
            } 
            // fall through
          case 225: break;
          case 103: 
            { return token(INLINE);
            } 
            // fall through
          case 226: break;
          case 104: 
            { return token(IMPORT);
            } 
            // fall through
          case 227: break;
          case 105: 
            { return valueToken(TYPE_DOUBLE);
            } 
            // fall through
          case 228: break;
          case 106: 
            { return token(THROWS);
            } 
            // fall through
          case 229: break;
          case 107: 
            { return token(RETURN);
            } 
            // fall through
          case 230: break;
          case 108: 
            { return token(STATIC);
            } 
            // fall through
          case 231: break;
          case 109: 
            { return token(SWITCH);
            } 
            // fall through
          case 232: break;
          case 110: 
            { return token(VISIBILITY_PUBLIC);
            } 
            // fall through
          case 233: break;
          case 111: 
            { return token(EXTENDS);
            } 
            // fall through
          case 234: break;
          case 112: 
            { return token(FINALLY);
            } 
            // fall through
          case 235: break;
          case 113: 
            { return token(VISIBILITY_PRIVATE);
            } 
            // fall through
          case 236: break;
          case 114: 
            { return token(PACKAGE);
            } 
            // fall through
          case 237: break;
          case 115: 
            { return token(VISIBILITY_INTERNAL);
            } 
            // fall through
          case 238: break;
          case 116: 
            { return token(DUMBBELL);
            } 
            // fall through
          case 239: break;
          case 117: 
            { return token(CONTINUE);
            } 
            // fall through
          case 240: break;
          case 118: 
            { return token(EXTENSION);
            } 
            // fall through
          case 241: break;
          case 119: 
            { return token(VISIBILITY_PROTECTED);
            } 
            // fall through
          case 242: break;
          case 120: 
            { return token(INSTANCEOF);
            } 
            // fall through
          case 243: break;
          case 121: 
            { return token(IMPLEMENTS);
            } 
            // fall through
          case 244: break;
          case 122: 
            { return token(ANNOTATION);
            } 
            // fall through
          case 245: break;
          case 123: 
            { return token(CONSTRUCTOR);
            } 
            // fall through
          case 246: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
