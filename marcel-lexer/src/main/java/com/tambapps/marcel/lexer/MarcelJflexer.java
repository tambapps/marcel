// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/flex/Marcel.flex

package com.tambapps.marcel.lexer;
import static com.tambapps.marcel.lexer.TokenType.*;
import java.util.Stack;

/**
  * Marcel lang lexer
  */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class MarcelJflexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int RAW_STRING = 4;
  public static final int SHORT_TEMPLATE_ENTRY = 6;
  public static final int BLOCK_COMMENT = 8;
  public static final int DOC_COMMENT = 10;
  public static final int LONG_TEMPLATE_ENTRY = 12;
  public static final int UNMATCHED_BACKTICK = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  5,  5,  0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\23\0\1\1\1\3"+
    "\1\4\1\0\1\5\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\0\1\14\1\0\1\15\1\16\11\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\0\1\25\1\26"+
    "\4\25\5\27\1\30\10\27\1\31\2\27\1\32\2\27"+
    "\1\0\1\33\2\0\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\2\27\1\47"+
    "\1\27\1\50\1\51\1\52\1\27\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\32\1\61\1\27\1\62\1\63"+
    "\1\64\54\0\1\27\12\0\1\27\4\0\1\27\5\0"+
    "\27\27\1\0\37\27\1\0\u01ca\27\4\0\14\27\16\0"+
    "\5\27\7\0\1\27\1\0\1\27\201\0\5\27\1\0"+
    "\2\27\2\0\4\27\1\0\1\27\6\0\1\27\1\0"+
    "\3\27\1\0\1\27\1\0\24\27\1\0\123\27\1\0"+
    "\213\27\10\0\246\27\1\0\46\27\2\0\1\27\6\0"+
    "\51\27\107\0\33\27\4\0\4\27\55\0\53\27\25\0"+
    "\12\65\4\0\2\27\1\0\143\27\1\0\1\27\17\0"+
    "\2\27\7\0\2\27\12\65\3\27\2\0\1\27\20\0"+
    "\1\27\1\0\36\27\35\0\131\27\13\0\1\27\16\0"+
    "\12\65\41\27\11\0\2\27\4\0\1\27\5\0\26\27"+
    "\4\0\1\27\11\0\1\27\3\0\1\27\27\0\31\27"+
    "\7\0\13\27\65\0\25\27\1\0\10\27\106\0\66\27"+
    "\3\0\1\27\22\0\1\27\7\0\12\27\4\0\12\65"+
    "\1\0\20\27\4\0\10\27\2\0\2\27\2\0\26\27"+
    "\1\0\7\27\1\0\1\27\3\0\4\27\3\0\1\27"+
    "\20\0\1\27\15\0\2\27\1\0\3\27\4\0\12\65"+
    "\2\27\12\0\1\27\10\0\6\27\4\0\2\27\2\0"+
    "\26\27\1\0\7\27\1\0\2\27\1\0\2\27\1\0"+
    "\2\27\37\0\4\27\1\0\1\27\7\0\12\65\2\0"+
    "\3\27\20\0\11\27\1\0\3\27\1\0\26\27\1\0"+
    "\7\27\1\0\2\27\1\0\5\27\3\0\1\27\22\0"+
    "\1\27\17\0\2\27\4\0\12\65\11\0\1\27\13\0"+
    "\10\27\2\0\2\27\2\0\26\27\1\0\7\27\1\0"+
    "\2\27\1\0\5\27\3\0\1\27\36\0\2\27\1\0"+
    "\3\27\4\0\12\65\1\0\1\27\21\0\1\27\1\0"+
    "\6\27\3\0\3\27\1\0\4\27\3\0\2\27\1\0"+
    "\1\27\1\0\2\27\3\0\2\27\3\0\3\27\3\0"+
    "\14\27\26\0\1\27\25\0\12\65\25\0\10\27\1\0"+
    "\3\27\1\0\27\27\1\0\20\27\3\0\1\27\32\0"+
    "\3\27\5\0\2\27\4\0\12\65\20\0\1\27\4\0"+
    "\10\27\1\0\3\27\1\0\27\27\1\0\12\27\1\0"+
    "\5\27\3\0\1\27\40\0\1\27\1\0\2\27\4\0"+
    "\12\65\1\0\2\27\22\0\10\27\1\0\3\27\1\0"+
    "\51\27\2\0\1\27\20\0\1\27\5\0\3\27\10\0"+
    "\3\27\4\0\12\65\12\0\6\27\5\0\22\27\3\0"+
    "\30\27\1\0\11\27\1\0\1\27\2\0\7\27\37\0"+
    "\12\65\21\0\60\27\1\0\2\27\14\0\7\27\11\0"+
    "\12\65\47\0\2\27\1\0\1\27\1\0\5\27\1\0"+
    "\30\27\1\0\1\27\1\0\12\27\1\0\2\27\11\0"+
    "\1\27\2\0\5\27\1\0\1\27\11\0\12\65\2\0"+
    "\4\27\40\0\1\27\37\0\12\65\26\0\10\27\1\0"+
    "\44\27\33\0\5\27\163\0\53\27\24\0\1\27\12\65"+
    "\6\0\6\27\4\0\4\27\3\0\1\27\3\0\2\27"+
    "\7\0\3\27\4\0\15\27\14\0\1\27\1\0\12\65"+
    "\6\0\46\27\1\0\1\27\5\0\1\27\2\0\53\27"+
    "\1\0\115\27\1\0\4\27\2\0\7\27\1\0\1\27"+
    "\1\0\4\27\2\0\51\27\1\0\4\27\2\0\41\27"+
    "\1\0\4\27\2\0\7\27\1\0\1\27\1\0\4\27"+
    "\2\0\17\27\1\0\71\27\1\0\4\27\2\0\103\27"+
    "\45\0\20\27\20\0\126\27\2\0\6\27\3\0\u016c\27"+
    "\2\0\21\27\1\0\32\27\5\0\113\27\6\0\10\27"+
    "\7\0\15\27\1\0\4\27\16\0\22\27\16\0\22\27"+
    "\16\0\15\27\1\0\3\27\17\0\64\27\43\0\1\27"+
    "\4\0\1\27\3\0\12\65\46\0\12\65\6\0\131\27"+
    "\7\0\5\27\2\0\42\27\1\0\1\27\5\0\106\27"+
    "\12\0\37\27\47\0\12\65\36\27\2\0\5\27\13\0"+
    "\54\27\4\0\32\27\6\0\12\65\46\0\27\27\11\0"+
    "\65\27\53\0\12\65\6\0\12\65\15\0\1\27\135\0"+
    "\57\27\21\0\7\27\4\0\12\65\51\0\36\27\15\0"+
    "\2\27\12\65\54\27\32\0\44\27\34\0\12\65\3\0"+
    "\3\27\12\65\44\27\2\0\11\27\7\0\53\27\2\0"+
    "\3\27\51\0\4\27\1\0\6\27\1\0\2\27\3\0"+
    "\1\27\5\0\300\27\100\0\26\27\2\0\6\27\2\0"+
    "\46\27\2\0\6\27\2\0\10\27\1\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\37\27\2\0\65\27\1\0"+
    "\7\27\1\0\1\27\3\0\3\27\1\0\7\27\3\0"+
    "\4\27\2\0\6\27\4\0\15\27\5\0\3\27\1\0"+
    "\7\27\164\0\1\27\15\0\1\27\20\0\15\27\145\0"+
    "\1\27\4\0\1\27\2\0\12\27\1\0\1\27\3\0"+
    "\5\27\6\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\1\0\13\27\2\0\4\27\5\0\5\27\4\0"+
    "\1\27\64\0\2\27\u017b\0\57\27\1\0\57\27\1\0"+
    "\205\27\6\0\4\27\3\0\2\27\14\0\46\27\1\0"+
    "\1\27\5\0\1\27\2\0\70\27\7\0\1\27\20\0"+
    "\27\27\11\0\7\27\1\0\7\27\1\0\7\27\1\0"+
    "\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0"+
    "\7\27\120\0\1\27\325\0\2\27\52\0\5\27\5\0"+
    "\2\27\4\0\126\27\6\0\3\27\1\0\132\27\1\0"+
    "\4\27\5\0\53\27\1\0\136\27\21\0\33\27\65\0"+
    "\306\27\112\0\360\27\20\0\215\27\103\0\56\27\2\0"+
    "\15\27\3\0\20\27\12\65\2\27\24\0\57\27\20\0"+
    "\37\27\2\0\106\27\61\0\11\27\2\0\147\27\2\0"+
    "\65\27\2\0\5\27\60\0\13\27\1\0\3\27\1\0"+
    "\4\27\1\0\27\27\35\0\64\27\16\0\62\27\34\0"+
    "\12\65\30\0\6\27\3\0\1\27\1\0\2\27\1\0"+
    "\12\65\34\27\12\0\27\27\31\0\35\27\7\0\57\27"+
    "\34\0\1\27\12\65\6\0\5\27\1\0\12\27\12\65"+
    "\5\27\1\0\51\27\27\0\3\27\1\0\10\27\4\0"+
    "\12\65\6\0\27\27\3\0\1\27\3\0\62\27\1\0"+
    "\1\27\3\0\2\27\2\0\5\27\2\0\1\27\1\0"+
    "\1\27\30\0\3\27\2\0\13\27\7\0\3\27\14\0"+
    "\6\27\2\0\6\27\2\0\6\27\11\0\7\27\1\0"+
    "\7\27\1\0\53\27\1\0\14\27\10\0\163\27\15\0"+
    "\12\65\6\0\244\27\14\0\27\27\4\0\61\27\4\0"+
    "\156\27\2\0\152\27\46\0\7\27\14\0\5\27\5\0"+
    "\1\27\1\0\12\27\1\0\15\27\1\0\5\27\1\0"+
    "\1\27\1\0\2\27\1\0\2\27\1\0\154\27\41\0"+
    "\153\27\22\0\100\27\2\0\66\27\50\0\14\27\164\0"+
    "\5\27\1\0\207\27\23\0\12\65\7\0\32\27\6\0"+
    "\32\27\13\0\131\27\3\0\6\27\2\0\6\27\2\0"+
    "\6\27\2\0\3\27\43\0\14\27\1\0\32\27\1\0"+
    "\23\27\1\0\2\27\1\0\17\27\2\0\16\27\42\0"+
    "\173\27\205\0\35\27\3\0\61\27\57\0\40\27\15\0"+
    "\24\27\1\0\10\27\6\0\46\27\12\0\36\27\2\0"+
    "\44\27\4\0\10\27\60\0\236\27\2\0\12\65\6\0"+
    "\44\27\4\0\44\27\4\0\50\27\10\0\64\27\234\0"+
    "\67\27\11\0\26\27\12\0\10\27\230\0\6\27\2\0"+
    "\1\27\1\0\54\27\1\0\2\27\3\0\1\27\2\0"+
    "\27\27\12\0\27\27\11\0\37\27\101\0\23\27\1\0"+
    "\2\27\12\0\26\27\12\0\32\27\106\0\70\27\6\0"+
    "\2\27\100\0\1\27\17\0\4\27\1\0\3\27\1\0"+
    "\35\27\52\0\35\27\3\0\35\27\43\0\10\27\1\0"+
    "\34\27\33\0\66\27\12\0\26\27\12\0\23\27\15\0"+
    "\22\27\156\0\111\27\67\0\63\27\15\0\63\27\15\0"+
    "\44\27\14\0\12\65\306\0\35\27\12\0\1\27\10\0"+
    "\26\27\232\0\27\27\14\0\65\27\56\0\12\65\23\0"+
    "\55\27\40\0\31\27\7\0\12\65\11\0\44\27\17\0"+
    "\12\65\4\0\1\27\13\0\43\27\3\0\1\27\14\0"+
    "\60\27\16\0\4\27\13\0\12\65\1\27\1\0\1\27"+
    "\43\0\22\27\1\0\31\27\124\0\7\27\1\0\1\27"+
    "\1\0\4\27\1\0\17\27\1\0\12\27\7\0\57\27"+
    "\21\0\12\65\13\0\10\27\2\0\2\27\2\0\26\27"+
    "\1\0\7\27\1\0\2\27\1\0\5\27\3\0\1\27"+
    "\22\0\1\27\14\0\5\27\236\0\65\27\22\0\4\27"+
    "\5\0\12\65\5\0\1\27\40\0\60\27\24\0\2\27"+
    "\1\0\1\27\10\0\12\65\246\0\57\27\51\0\4\27"+
    "\44\0\60\27\24\0\1\27\13\0\12\65\46\0\53\27"+
    "\15\0\1\27\7\0\12\65\66\0\33\27\25\0\12\65"+
    "\306\0\54\27\164\0\100\27\12\65\25\0\1\27\240\0"+
    "\10\27\2\0\47\27\20\0\1\27\1\0\1\27\34\0"+
    "\1\27\12\0\50\27\7\0\1\27\25\0\1\27\13\0"+
    "\56\27\23\0\1\27\42\0\71\27\7\0\11\27\1\0"+
    "\45\27\21\0\1\27\17\0\12\65\30\0\36\27\160\0"+
    "\7\27\1\0\2\27\1\0\46\27\25\0\1\27\11\0"+
    "\12\65\6\0\6\27\1\0\2\27\1\0\40\27\16\0"+
    "\1\27\7\0\12\65\u0136\0\23\27\15\0\232\27\346\0"+
    "\304\27\274\0\57\27\321\0\107\27\271\0\71\27\7\0"+
    "\37\27\1\0\12\65\146\0\36\27\22\0\60\27\20\0"+
    "\4\27\14\0\12\65\11\0\25\27\5\0\23\27\260\0"+
    "\100\27\200\0\113\27\5\0\1\27\102\0\15\27\100\0"+
    "\2\27\1\0\1\27\34\0\370\27\10\0\363\27\15\0"+
    "\37\27\61\0\3\27\21\0\4\27\10\0\u018c\27\4\0"+
    "\153\27\5\0\15\27\3\0\11\27\7\0\12\27\146\0"+
    "\125\27\1\0\107\27\1\0\2\27\2\0\1\27\2\0"+
    "\2\27\2\0\4\27\1\0\14\27\1\0\1\27\1\0"+
    "\7\27\1\0\101\27\1\0\4\27\2\0\10\27\1\0"+
    "\7\27\1\0\34\27\1\0\4\27\1\0\5\27\1\0"+
    "\1\27\3\0\7\27\1\0\u0154\27\2\0\31\27\1\0"+
    "\31\27\1\0\37\27\1\0\31\27\1\0\37\27\1\0"+
    "\31\27\1\0\37\27\1\0\31\27\1\0\37\27\1\0"+
    "\31\27\1\0\10\27\2\0\62\65\55\27\12\0\7\27"+
    "\2\0\12\65\4\0\1\27\u0171\0\54\27\4\0\12\65"+
    "\6\0\305\27\73\0\104\27\7\0\1\27\4\0\12\65"+
    "\246\0\4\27\1\0\33\27\1\0\2\27\1\0\1\27"+
    "\2\0\1\27\1\0\12\27\1\0\4\27\1\0\1\27"+
    "\1\0\1\27\6\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\1\27"+
    "\2\0\1\27\1\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\2\27\1\0\1\27\2\0\4\27"+
    "\1\0\7\27\1\0\4\27\1\0\4\27\1\0\1\27"+
    "\1\0\12\27\1\0\21\27\5\0\3\27\1\0\5\27"+
    "\1\0\21\27\104\0\327\27\51\0\65\27\13\0\336\27"+
    "\2\0\u0182\27\16\0\u0131\27\37\0\36\27\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\0\14\21\1\22\1\0\1\23"+
    "\1\24\1\25\1\26\1\24\1\0\2\24\1\27\1\0"+
    "\1\30\1\31\1\32\1\0\1\33\3\13\1\34\1\35"+
    "\1\36\1\0\20\21\1\37\1\40\1\0\1\41\2\42"+
    "\2\0\1\43\6\21\1\44\1\21\1\45\1\21\1\46"+
    "\7\21\2\0\1\47\1\27\1\50\1\51\4\21\1\52"+
    "\5\21\1\53\1\54\1\40\1\0\1\21\1\55\1\56"+
    "\5\21\1\57\1\0\1\60\1\61\2\21\1\62\1\63"+
    "\1\64\2\21\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\330\0\u01e6\0\330\0\330\0\330\0\330\0\330"+
    "\0\330\0\u021c\0\u0252\0\330\0\330\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\330\0\u061e"+
    "\0\330\0\u0654\0\330\0\330\0\u068a\0\u06c0\0\330\0\u06f6"+
    "\0\u072c\0\u0762\0\330\0\330\0\330\0\u0798\0\330\0\330"+
    "\0\u07ce\0\u0804\0\330\0\330\0\330\0\u083a\0\u0870\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\330\0\u0bd0"+
    "\0\u0c06\0\330\0\330\0\u0c3c\0\u0c72\0\u0ca8\0\330\0\330"+
    "\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u032a\0\u0dec\0\u032a"+
    "\0\u0e22\0\u032a\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u1008\0\u0c72\0\330\0\u032a\0\u032a\0\u103e"+
    "\0\u1074\0\u10aa\0\u10e0\0\u032a\0\u1116\0\u114c\0\u1182\0\u11b8"+
    "\0\u11ee\0\u032a\0\u032a\0\330\0\u1224\0\u125a\0\u032a\0\u032a"+
    "\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u032a\0\u139e\0\u032a"+
    "\0\u032a\0\u13d4\0\u140a\0\u032a\0\u032a\0\u032a\0\u1440\0\u1476"+
    "\0\u032a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\6\31\1\0\1\31\1\32"+
    "\1\31\1\33\1\31\1\34\1\31\1\35\1\31\1\36"+
    "\1\37\1\40\1\41\1\31\1\42\1\43\1\44\1\45"+
    "\1\31\1\46\2\31\1\47\1\50\1\51\1\0\2\52"+
    "\1\53\1\52\1\54\1\55\25\52\1\56\34\52\1\57"+
    "\1\52\1\60\1\55\25\52\1\57\32\52\25\0\6\61"+
    "\1\0\1\61\1\62\24\61\73\0\2\7\1\10\1\11"+
    "\1\0\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\6\31\1\0\1\31\1\32\1\31\1\33\1\31\1\34"+
    "\1\31\1\35\1\31\1\36\1\37\1\40\1\41\1\31"+
    "\1\42\1\43\1\44\1\45\1\31\1\46\2\31\1\63"+
    "\1\50\1\64\2\0\2\7\106\0\1\65\46\0\1\66"+
    "\70\0\1\67\104\0\1\23\1\0\1\70\1\71\1\72"+
    "\4\0\1\23\7\0\1\70\6\0\1\71\25\0\2\23"+
    "\10\0\1\70\1\71\2\0\1\23\12\0\1\70\6\0"+
    "\1\71\32\0\1\73\65\0\1\74\65\0\1\75\60\0"+
    "\2\31\5\0\6\31\1\0\1\31\1\0\24\31\3\0"+
    "\1\31\2\76\1\0\32\76\1\0\30\76\16\0\2\31"+
    "\5\0\6\31\1\0\1\31\1\0\13\31\1\77\7\31"+
    "\1\100\3\0\1\31\16\0\2\31\5\0\6\31\1\0"+
    "\1\31\1\0\13\31\1\101\10\31\3\0\1\31\16\0"+
    "\2\31\5\0\6\31\1\0\1\31\1\0\1\102\10\31"+
    "\1\103\6\31\1\104\3\31\3\0\1\31\16\0\2\31"+
    "\5\0\6\31\1\0\1\31\1\0\10\31\1\105\13\31"+
    "\3\0\1\31\16\0\2\31\5\0\6\31\1\0\1\31"+
    "\1\0\12\31\1\106\11\31\3\0\1\31\16\0\2\31"+
    "\5\0\6\31\1\0\1\31\1\0\13\31\1\107\10\31"+
    "\3\0\1\31\16\0\2\31\5\0\6\31\1\0\1\31"+
    "\1\0\4\31\1\110\17\31\3\0\1\31\16\0\2\31"+
    "\5\0\6\31\1\0\1\31\1\0\15\31\1\111\2\31"+
    "\1\112\3\31\3\0\1\31\16\0\2\31\5\0\6\31"+
    "\1\0\1\31\1\0\4\31\1\113\17\31\3\0\1\31"+
    "\16\0\2\31\5\0\6\31\1\0\1\31\1\0\7\31"+
    "\1\114\14\31\3\0\1\31\16\0\2\31\5\0\6\31"+
    "\1\0\1\31\1\0\15\31\1\115\6\31\3\0\1\31"+
    "\16\0\2\31\5\0\6\31\1\0\1\31\1\0\13\31"+
    "\1\116\10\31\3\0\1\31\63\0\1\117\2\0\2\52"+
    "\1\0\1\52\2\0\25\52\1\0\32\52\25\0\6\120"+
    "\1\0\1\120\1\121\24\120\1\122\3\0\2\123\1\0"+
    "\53\123\1\124\7\123\4\0\1\125\77\0\2\61\5\0"+
    "\6\61\1\0\1\61\1\0\24\61\3\0\1\61\2\126"+
    "\1\0\32\126\1\0\30\126\4\0\1\127\111\0\1\70"+
    "\16\0\1\70\34\0\2\72\5\0\2\72\1\0\1\70"+
    "\1\71\2\0\1\72\1\0\6\72\3\0\1\70\6\0"+
    "\1\71\7\0\2\76\1\0\32\76\1\130\30\76\16\0"+
    "\2\31\5\0\6\31\1\0\1\31\1\0\13\31\1\131"+
    "\10\31\3\0\1\31\16\0\2\31\5\0\6\31\1\0"+
    "\1\31\1\0\17\31\1\132\4\31\3\0\1\31\16\0"+
    "\2\31\5\0\6\31\1\0\1\31\1\0\20\31\1\133"+
    "\3\31\3\0\1\31\16\0\2\31\5\0\6\31\1\0"+
    "\1\31\1\0\11\31\1\134\12\31\3\0\1\31\16\0"+
    "\2\31\5\0\6\31\1\0\1\31\1\0\13\31\1\135"+
    "\10\31\3\0\1\31\16\0\2\31\5\0\6\31\1\0"+
    "\1\31\1\0\12\31\1\136\11\31\3\0\1\31\16\0"+
    "\2\31\5\0\6\31\1\0\1\31\1\0\3\31\1\137"+
    "\20\31\3\0\1\31\16\0\2\31\5\0\6\31\1\0"+
    "\1\31\1\0\17\31\1\140\4\31\3\0\1\31\16\0"+
    "\2\31\5\0\6\31\1\0\1\31\1\0\12\31\1\141"+
    "\11\31\3\0\1\31\16\0\2\31\5\0\6\31\1\0"+
    "\1\31\1\0\22\31\1\142\1\31\3\0\1\31\16\0"+
    "\2\31\5\0\6\31\1\0\1\31\1\0\10\31\1\143"+
    "\2\31\1\144\10\31\3\0\1\31\16\0\2\31\5\0"+
    "\6\31\1\0\1\31\1\0\1\31\1\145\22\31\3\0"+
    "\1\31\16\0\2\31\5\0\6\31\1\0\1\31\1\0"+
    "\17\31\1\146\4\31\3\0\1\31\16\0\2\31\5\0"+
    "\6\31\1\0\1\31\1\0\13\31\1\147\10\31\3\0"+
    "\1\31\16\0\2\31\5\0\6\31\1\0\1\31\1\0"+
    "\20\31\1\150\3\31\3\0\1\31\16\0\2\31\5\0"+
    "\6\31\1\0\1\31\1\0\10\31\1\151\13\31\3\0"+
    "\1\31\16\0\2\120\5\0\6\120\1\0\1\120\1\0"+
    "\24\120\3\0\1\120\2\152\1\0\32\152\1\0\30\152"+
    "\16\0\2\153\5\0\2\153\7\0\6\153\26\0\1\154"+
    "\61\0\2\126\1\0\32\126\1\155\30\126\16\0\2\31"+
    "\5\0\6\31\1\0\1\31\1\0\11\31\1\156\12\31"+
    "\3\0\1\31\16\0\2\31\5\0\6\31\1\0\1\31"+
    "\1\0\4\31\1\157\17\31\3\0\1\31\16\0\2\31"+
    "\5\0\6\31\1\0\1\31\1\0\1\31\1\160\22\31"+
    "\3\0\1\31\16\0\2\31\5\0\6\31\1\0\1\31"+
    "\1\0\16\31\1\161\5\31\3\0\1\31\16\0\2\31"+
    "\5\0\6\31\1\0\1\31\1\0\1\162\23\31\3\0"+
    "\1\31\16\0\2\31\5\0\6\31\1\0\1\31\1\0"+
    "\3\31\1\163\20\31\3\0\1\31\16\0\2\31\5\0"+
    "\6\31\1\0\1\31\1\0\6\31\1\164\15\31\3\0"+
    "\1\31\16\0\2\31\5\0\6\31\1\0\1\31\1\0"+
    "\21\31\1\165\2\31\3\0\1\31\16\0\2\31\5\0"+
    "\6\31\1\0\1\31\1\0\17\31\1\166\4\31\3\0"+
    "\1\31\16\0\2\31\5\0\6\31\1\0\1\31\1\0"+
    "\11\31\1\167\12\31\3\0\1\31\16\0\2\31\5\0"+
    "\6\31\1\0\1\31\1\0\20\31\1\170\3\31\3\0"+
    "\1\31\16\0\2\31\5\0\6\31\1\0\1\31\1\0"+
    "\15\31\1\171\6\31\3\0\1\31\16\0\2\31\5\0"+
    "\6\31\1\0\1\31\1\0\4\31\1\172\17\31\3\0"+
    "\1\31\16\0\2\31\5\0\6\31\1\0\1\31\1\0"+
    "\3\31\1\173\20\31\3\0\1\31\2\152\1\0\32\152"+
    "\1\174\30\152\16\0\2\175\5\0\2\175\7\0\6\175"+
    "\40\0\2\31\5\0\6\31\1\0\1\31\1\0\11\31"+
    "\1\176\12\31\3\0\1\31\16\0\2\31\5\0\6\31"+
    "\1\0\1\31\1\0\4\31\1\177\17\31\3\0\1\31"+
    "\16\0\2\31\5\0\6\31\1\0\1\31\1\0\17\31"+
    "\1\200\4\31\3\0\1\31\16\0\2\31\5\0\6\31"+
    "\1\0\1\31\1\0\4\31\1\201\17\31\3\0\1\31"+
    "\16\0\2\31\5\0\6\31\1\0\1\31\1\0\1\202"+
    "\23\31\3\0\1\31\16\0\2\31\5\0\6\31\1\0"+
    "\1\31\1\0\4\31\1\203\17\31\3\0\1\31\16\0"+
    "\2\31\5\0\6\31\1\0\1\31\1\0\10\31\1\204"+
    "\13\31\3\0\1\31\16\0\2\31\5\0\6\31\1\0"+
    "\1\31\1\0\15\31\1\205\6\31\3\0\1\31\16\0"+
    "\2\31\5\0\6\31\1\0\1\31\1\0\17\31\1\206"+
    "\4\31\3\0\1\31\16\0\2\207\5\0\2\207\7\0"+
    "\6\207\40\0\2\31\5\0\6\31\1\0\1\31\1\0"+
    "\4\31\1\210\17\31\3\0\1\31\16\0\2\31\5\0"+
    "\6\31\1\0\1\31\1\0\12\31\1\211\11\31\3\0"+
    "\1\31\16\0\2\31\5\0\6\31\1\0\1\31\1\0"+
    "\17\31\1\212\4\31\3\0\1\31\16\0\2\31\5\0"+
    "\6\31\1\0\1\31\1\0\2\31\1\213\21\31\3\0"+
    "\1\31\16\0\2\31\5\0\6\31\1\0\1\31\1\0"+
    "\2\31\1\214\21\31\3\0\1\31\16\0\2\31\5\0"+
    "\6\31\1\0\1\31\1\0\12\31\1\215\11\31\3\0"+
    "\1\31\16\0\2\123\5\0\2\123\7\0\6\123\40\0"+
    "\2\31\5\0\6\31\1\0\1\31\1\0\4\31\1\216"+
    "\17\31\3\0\1\31\16\0\2\31\5\0\6\31\1\0"+
    "\1\31\1\0\17\31\1\217\4\31\3\0\1\31\16\0"+
    "\2\31\5\0\6\31\1\0\1\31\1\0\4\31\1\220"+
    "\17\31\3\0\1\31\16\0\2\31\5\0\6\31\1\0"+
    "\1\31\1\0\3\31\1\221\20\31\3\0\1\31";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5292];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\10\1\0\3\1\1\11\1\0\6\11\2\1"+
    "\2\11\4\1\1\0\14\1\1\11\1\0\1\11\1\1"+
    "\2\11\1\1\1\0\1\11\2\1\1\0\3\11\1\0"+
    "\2\11\2\1\3\11\1\0\20\1\1\11\1\1\1\0"+
    "\2\11\1\1\2\0\2\11\21\1\2\0\1\1\1\11"+
    "\16\1\1\11\1\0\11\1\1\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

     private static final class State {
            final int lBraceCount;
            final int state;

            public State(int state, int lBraceCount) {
                this.state = state;
                this.lBraceCount = lBraceCount;
            }

            @Override
            public String toString() {
                return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
            }
        }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;

    private int commentStart;
    private int commentDepth;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

  // tokens for which we need to save current buffer
  private LexToken valueToken(TokenType tokenType) {
    return new LexToken(tokenType, new String(zzBuffer, zzCurrentPos, zzMarkedPos - zzCurrentPos));
  }
  private LexToken token(TokenType tokenType) {
    return new LexToken(tokenType, null);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MarcelJflexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) throws MarcelLexerException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new MarcelLexerException(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  throws MarcelLexerException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  // end of file
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public LexToken nextToken() throws java.io.IOException, MarcelLexerException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(WHITE_SPACE);
            }
            // fall through
          case 54: break;
          case 2:
            { return token(NOT);
            }
            // fall through
          case 55: break;
          case 3:
            { pushState(STRING); return token(OPEN_QUOTE);
            }
            // fall through
          case 56: break;
          case 4:
            { return token(MODULO);
            }
            // fall through
          case 57: break;
          case 5:
            { return token(LPAR);
            }
            // fall through
          case 58: break;
          case 6:
            { return token(RPAR);
            }
            // fall through
          case 59: break;
          case 7:
            { return token(MUL);
            }
            // fall through
          case 60: break;
          case 8:
            { return token(PLUS);
            }
            // fall through
          case 61: break;
          case 9:
            { return token(MINUS);
            }
            // fall through
          case 62: break;
          case 10:
            { return token(DIV);
            }
            // fall through
          case 63: break;
          case 11:
            { return valueToken(INTEGER);
            }
            // fall through
          case 64: break;
          case 12:
            { return token(COLON);
            }
            // fall through
          case 65: break;
          case 13:
            { return token(SEMI_COLON);
            }
            // fall through
          case 66: break;
          case 14:
            { return token(LT);
            }
            // fall through
          case 67: break;
          case 15:
            { return token(ASSIGNMENT);
            }
            // fall through
          case 68: break;
          case 16:
            { return token(GT);
            }
            // fall through
          case 69: break;
          case 17:
            { return valueToken(IDENTIFIER);
            }
            // fall through
          case 70: break;
          case 18:
            { return token(BRACKETS_OPEN);
            }
            // fall through
          case 71: break;
          case 19:
            { return token(BRACKETS_CLOSE);
            }
            // fall through
          case 72: break;
          case 20:
            { return valueToken(REGULAR_STRING_PART);
            }
            // fall through
          case 73: break;
          case 21:
            { popState(); yypushback(1); return valueToken(DANGLING_NEWLINE);
            }
            // fall through
          case 74: break;
          case 22:
            { popState(); return token(CLOSING_QUOTE);
            }
            // fall through
          case 75: break;
          case 23:
            { popState(); return valueToken(IDENTIFIER);
            }
            // fall through
          case 76: break;
          case 24:
            { lBraceCount++; return valueToken(LBRACE);
            }
            // fall through
          case 77: break;
          case 25:
            { if (lBraceCount == 0) {
                                             popState();
                                             return token(LONG_TEMPLATE_ENTRY_END);
                                           }
                                           lBraceCount--;
                                           return valueToken(RBRACE);
            }
            // fall through
          case 78: break;
          case 26:
            { return token(NOT_EQUAL);
            }
            // fall through
          case 79: break;
          case 27:
            { return token(AND);
            }
            // fall through
          case 80: break;
          case 28:
            { return token(LOE);
            }
            // fall through
          case 81: break;
          case 29:
            { return token(EQUAL);
            }
            // fall through
          case 82: break;
          case 30:
            { return token(GOE);
            }
            // fall through
          case 83: break;
          case 31:
            { return token(OR);
            }
            // fall through
          case 84: break;
          case 32:
            { pushState(SHORT_TEMPLATE_ENTRY);
                                                        yypushback(yylength() - 1);
                                                        return token(SHORT_TEMPLATE_ENTRY_START);
            }
            // fall through
          case 85: break;
          case 33:
            { pushState(LONG_TEMPLATE_ENTRY); return token(LONG_TEMPLATE_ENTRY_START);
            }
            // fall through
          case 86: break;
          case 34:
            { return valueToken(ESCAPE_SEQUENCE);
            }
            // fall through
          case 87: break;
          case 35:
            { pushState(RAW_STRING); return token(OPEN_QUOTE);
            }
            // fall through
          case 88: break;
          case 36:
            { return token(FUN);
            }
            // fall through
          case 89: break;
          case 37:
            { return token(TYPE_INT);
            }
            // fall through
          case 90: break;
          case 38:
            { return token(NEW);
            }
            // fall through
          case 91: break;
          case 39:
            { int length = yytext().length();
                                    if (length <= 3) { // closing """
                                        popState();
                                        return token(CLOSING_QUOTE);
                                    }
                                    else { // some quotes at the end of a string, e.g. """ "foo""""
                                        yypushback(3); // return the closing quotes (""") to the stream
                                        return valueToken(REGULAR_STRING_PART);
                                    }
            }
            // fall through
          case 92: break;
          case 40:
            { return token(TYPE_BOOL);
            }
            // fall through
          case 93: break;
          case 41:
            { return token(TYPE_BYTE);
            }
            // fall through
          case 94: break;
          case 42:
            { return token(TYPE_LONG);
            }
            // fall through
          case 95: break;
          case 43:
            { return token(VALUE_TRUE);
            }
            // fall through
          case 96: break;
          case 44:
            { return token(TYPE_VOID);
            }
            // fall through
          case 97: break;
          case 45:
            { return token(VALUE_FALSE);
            }
            // fall through
          case 98: break;
          case 46:
            { return token(TYPE_FLOAT);
            }
            // fall through
          case 99: break;
          case 47:
            { return token(TYPE_SHORT);
            }
            // fall through
          case 100: break;
          case 48:
            { return token(TYPE_DOUBLE);
            }
            // fall through
          case 101: break;
          case 49:
            { return token(VISIBILITY_HIDDEN);
            }
            // fall through
          case 102: break;
          case 50:
            { return token(VISIBILITY_PUBLIC);
            }
            // fall through
          case 103: break;
          case 51:
            { return token(RETURN);
            }
            // fall through
          case 104: break;
          case 52:
            { return token(VISIBILITY_PRIVATE);
            }
            // fall through
          case 105: break;
          case 53:
            { return token(VISIBILITY_PROTECTED);
            }
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
