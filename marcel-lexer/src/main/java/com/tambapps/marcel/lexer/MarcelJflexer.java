// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/flex/Marcel.flex

package com.tambapps.marcel.lexer;
import static com.tambapps.marcel.lexer.TokenType.*;
import java.util.Stack;

/**
  * Marcel lang lexer
  */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class MarcelJflexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int RAW_STRING = 4;
  public static final int SHORT_TEMPLATE_ENTRY = 6;
  public static final int BLOCK_COMMENT = 8;
  public static final int DOC_COMMENT = 10;
  public static final int CHAR_STRING = 12;
  public static final int LONG_TEMPLATE_ENTRY = 14;
  public static final int UNMATCHED_BACKTICK = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  5,  5,  6,  6, 
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\23\0\1\1\1\3"+
    "\1\4\1\5\1\6\1\7\1\10\1\0\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\11\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\0\1\31"+
    "\1\32\1\31\1\33\1\34\1\33\5\35\1\36\10\35"+
    "\1\37\2\35\1\40\2\35\1\41\1\42\1\43\1\0"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\35\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\35\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\35\1\75\1\76\1\77\54\0"+
    "\1\35\12\0\1\35\4\0\1\35\5\0\27\35\1\0"+
    "\37\35\1\0\u01ca\35\4\0\14\35\16\0\5\35\7\0"+
    "\1\35\1\0\1\35\201\0\5\35\1\0\2\35\2\0"+
    "\4\35\1\0\1\35\6\0\1\35\1\0\3\35\1\0"+
    "\1\35\1\0\24\35\1\0\123\35\1\0\213\35\10\0"+
    "\246\35\1\0\46\35\2\0\1\35\6\0\51\35\107\0"+
    "\33\35\4\0\4\35\55\0\53\35\25\0\12\100\4\0"+
    "\2\35\1\0\143\35\1\0\1\35\17\0\2\35\7\0"+
    "\2\35\12\100\3\35\2\0\1\35\20\0\1\35\1\0"+
    "\36\35\35\0\131\35\13\0\1\35\16\0\12\100\41\35"+
    "\11\0\2\35\4\0\1\35\5\0\26\35\4\0\1\35"+
    "\11\0\1\35\3\0\1\35\27\0\31\35\7\0\13\35"+
    "\65\0\25\35\1\0\10\35\106\0\66\35\3\0\1\35"+
    "\22\0\1\35\7\0\12\35\4\0\12\100\1\0\20\35"+
    "\4\0\10\35\2\0\2\35\2\0\26\35\1\0\7\35"+
    "\1\0\1\35\3\0\4\35\3\0\1\35\20\0\1\35"+
    "\15\0\2\35\1\0\3\35\4\0\12\100\2\35\12\0"+
    "\1\35\10\0\6\35\4\0\2\35\2\0\26\35\1\0"+
    "\7\35\1\0\2\35\1\0\2\35\1\0\2\35\37\0"+
    "\4\35\1\0\1\35\7\0\12\100\2\0\3\35\20\0"+
    "\11\35\1\0\3\35\1\0\26\35\1\0\7\35\1\0"+
    "\2\35\1\0\5\35\3\0\1\35\22\0\1\35\17\0"+
    "\2\35\4\0\12\100\11\0\1\35\13\0\10\35\2\0"+
    "\2\35\2\0\26\35\1\0\7\35\1\0\2\35\1\0"+
    "\5\35\3\0\1\35\36\0\2\35\1\0\3\35\4\0"+
    "\12\100\1\0\1\35\21\0\1\35\1\0\6\35\3\0"+
    "\3\35\1\0\4\35\3\0\2\35\1\0\1\35\1\0"+
    "\2\35\3\0\2\35\3\0\3\35\3\0\14\35\26\0"+
    "\1\35\25\0\12\100\25\0\10\35\1\0\3\35\1\0"+
    "\27\35\1\0\20\35\3\0\1\35\32\0\3\35\5\0"+
    "\2\35\4\0\12\100\20\0\1\35\4\0\10\35\1\0"+
    "\3\35\1\0\27\35\1\0\12\35\1\0\5\35\3\0"+
    "\1\35\40\0\1\35\1\0\2\35\4\0\12\100\1\0"+
    "\2\35\22\0\10\35\1\0\3\35\1\0\51\35\2\0"+
    "\1\35\20\0\1\35\5\0\3\35\10\0\3\35\4\0"+
    "\12\100\12\0\6\35\5\0\22\35\3\0\30\35\1\0"+
    "\11\35\1\0\1\35\2\0\7\35\37\0\12\100\21\0"+
    "\60\35\1\0\2\35\14\0\7\35\11\0\12\100\47\0"+
    "\2\35\1\0\1\35\1\0\5\35\1\0\30\35\1\0"+
    "\1\35\1\0\12\35\1\0\2\35\11\0\1\35\2\0"+
    "\5\35\1\0\1\35\11\0\12\100\2\0\4\35\40\0"+
    "\1\35\37\0\12\100\26\0\10\35\1\0\44\35\33\0"+
    "\5\35\163\0\53\35\24\0\1\35\12\100\6\0\6\35"+
    "\4\0\4\35\3\0\1\35\3\0\2\35\7\0\3\35"+
    "\4\0\15\35\14\0\1\35\1\0\12\100\6\0\46\35"+
    "\1\0\1\35\5\0\1\35\2\0\53\35\1\0\115\35"+
    "\1\0\4\35\2\0\7\35\1\0\1\35\1\0\4\35"+
    "\2\0\51\35\1\0\4\35\2\0\41\35\1\0\4\35"+
    "\2\0\7\35\1\0\1\35\1\0\4\35\2\0\17\35"+
    "\1\0\71\35\1\0\4\35\2\0\103\35\45\0\20\35"+
    "\20\0\126\35\2\0\6\35\3\0\u016c\35\2\0\21\35"+
    "\1\0\32\35\5\0\113\35\6\0\10\35\7\0\15\35"+
    "\1\0\4\35\16\0\22\35\16\0\22\35\16\0\15\35"+
    "\1\0\3\35\17\0\64\35\43\0\1\35\4\0\1\35"+
    "\3\0\12\100\46\0\12\100\6\0\131\35\7\0\5\35"+
    "\2\0\42\35\1\0\1\35\5\0\106\35\12\0\37\35"+
    "\47\0\12\100\36\35\2\0\5\35\13\0\54\35\4\0"+
    "\32\35\6\0\12\100\46\0\27\35\11\0\65\35\53\0"+
    "\12\100\6\0\12\100\15\0\1\35\135\0\57\35\21\0"+
    "\7\35\4\0\12\100\51\0\36\35\15\0\2\35\12\100"+
    "\54\35\32\0\44\35\34\0\12\100\3\0\3\35\12\100"+
    "\44\35\2\0\11\35\7\0\53\35\2\0\3\35\51\0"+
    "\4\35\1\0\6\35\1\0\2\35\3\0\1\35\5\0"+
    "\300\35\100\0\26\35\2\0\6\35\2\0\46\35\2\0"+
    "\6\35\2\0\10\35\1\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\37\35\2\0\65\35\1\0\7\35\1\0"+
    "\1\35\3\0\3\35\1\0\7\35\3\0\4\35\2\0"+
    "\6\35\4\0\15\35\5\0\3\35\1\0\7\35\164\0"+
    "\1\35\15\0\1\35\20\0\15\35\145\0\1\35\4\0"+
    "\1\35\2\0\12\35\1\0\1\35\3\0\5\35\6\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\4\35\1\0"+
    "\13\35\2\0\4\35\5\0\5\35\4\0\1\35\64\0"+
    "\2\35\u017b\0\57\35\1\0\57\35\1\0\205\35\6\0"+
    "\4\35\3\0\2\35\14\0\46\35\1\0\1\35\5\0"+
    "\1\35\2\0\70\35\7\0\1\35\20\0\27\35\11\0"+
    "\7\35\1\0\7\35\1\0\7\35\1\0\7\35\1\0"+
    "\7\35\1\0\7\35\1\0\7\35\1\0\7\35\120\0"+
    "\1\35\325\0\2\35\52\0\5\35\5\0\2\35\4\0"+
    "\126\35\6\0\3\35\1\0\132\35\1\0\4\35\5\0"+
    "\53\35\1\0\136\35\21\0\33\35\65\0\306\35\112\0"+
    "\360\35\20\0\215\35\103\0\56\35\2\0\15\35\3\0"+
    "\20\35\12\100\2\35\24\0\57\35\20\0\37\35\2\0"+
    "\106\35\61\0\11\35\2\0\147\35\2\0\65\35\2\0"+
    "\5\35\60\0\13\35\1\0\3\35\1\0\4\35\1\0"+
    "\27\35\35\0\64\35\16\0\62\35\34\0\12\100\30\0"+
    "\6\35\3\0\1\35\1\0\2\35\1\0\12\100\34\35"+
    "\12\0\27\35\31\0\35\35\7\0\57\35\34\0\1\35"+
    "\12\100\6\0\5\35\1\0\12\35\12\100\5\35\1\0"+
    "\51\35\27\0\3\35\1\0\10\35\4\0\12\100\6\0"+
    "\27\35\3\0\1\35\3\0\62\35\1\0\1\35\3\0"+
    "\2\35\2\0\5\35\2\0\1\35\1\0\1\35\30\0"+
    "\3\35\2\0\13\35\7\0\3\35\14\0\6\35\2\0"+
    "\6\35\2\0\6\35\11\0\7\35\1\0\7\35\1\0"+
    "\53\35\1\0\14\35\10\0\163\35\15\0\12\100\6\0"+
    "\244\35\14\0\27\35\4\0\61\35\4\0\156\35\2\0"+
    "\152\35\46\0\7\35\14\0\5\35\5\0\1\35\1\0"+
    "\12\35\1\0\15\35\1\0\5\35\1\0\1\35\1\0"+
    "\2\35\1\0\2\35\1\0\154\35\41\0\153\35\22\0"+
    "\100\35\2\0\66\35\50\0\14\35\164\0\5\35\1\0"+
    "\207\35\23\0\12\100\7\0\32\35\6\0\32\35\13\0"+
    "\131\35\3\0\6\35\2\0\6\35\2\0\6\35\2\0"+
    "\3\35\43\0\14\35\1\0\32\35\1\0\23\35\1\0"+
    "\2\35\1\0\17\35\2\0\16\35\42\0\173\35\205\0"+
    "\35\35\3\0\61\35\57\0\40\35\15\0\24\35\1\0"+
    "\10\35\6\0\46\35\12\0\36\35\2\0\44\35\4\0"+
    "\10\35\60\0\236\35\2\0\12\100\6\0\44\35\4\0"+
    "\44\35\4\0\50\35\10\0\64\35\234\0\67\35\11\0"+
    "\26\35\12\0\10\35\230\0\6\35\2\0\1\35\1\0"+
    "\54\35\1\0\2\35\3\0\1\35\2\0\27\35\12\0"+
    "\27\35\11\0\37\35\101\0\23\35\1\0\2\35\12\0"+
    "\26\35\12\0\32\35\106\0\70\35\6\0\2\35\100\0"+
    "\1\35\17\0\4\35\1\0\3\35\1\0\35\35\52\0"+
    "\35\35\3\0\35\35\43\0\10\35\1\0\34\35\33\0"+
    "\66\35\12\0\26\35\12\0\23\35\15\0\22\35\156\0"+
    "\111\35\67\0\63\35\15\0\63\35\15\0\44\35\14\0"+
    "\12\100\306\0\35\35\12\0\1\35\10\0\26\35\232\0"+
    "\27\35\14\0\65\35\56\0\12\100\23\0\55\35\40\0"+
    "\31\35\7\0\12\100\11\0\44\35\17\0\12\100\4\0"+
    "\1\35\13\0\43\35\3\0\1\35\14\0\60\35\16\0"+
    "\4\35\13\0\12\100\1\35\1\0\1\35\43\0\22\35"+
    "\1\0\31\35\124\0\7\35\1\0\1\35\1\0\4\35"+
    "\1\0\17\35\1\0\12\35\7\0\57\35\21\0\12\100"+
    "\13\0\10\35\2\0\2\35\2\0\26\35\1\0\7\35"+
    "\1\0\2\35\1\0\5\35\3\0\1\35\22\0\1\35"+
    "\14\0\5\35\236\0\65\35\22\0\4\35\5\0\12\100"+
    "\5\0\1\35\40\0\60\35\24\0\2\35\1\0\1\35"+
    "\10\0\12\100\246\0\57\35\51\0\4\35\44\0\60\35"+
    "\24\0\1\35\13\0\12\100\46\0\53\35\15\0\1\35"+
    "\7\0\12\100\66\0\33\35\25\0\12\100\306\0\54\35"+
    "\164\0\100\35\12\100\25\0\1\35\240\0\10\35\2\0"+
    "\47\35\20\0\1\35\1\0\1\35\34\0\1\35\12\0"+
    "\50\35\7\0\1\35\25\0\1\35\13\0\56\35\23\0"+
    "\1\35\42\0\71\35\7\0\11\35\1\0\45\35\21\0"+
    "\1\35\17\0\12\100\30\0\36\35\160\0\7\35\1\0"+
    "\2\35\1\0\46\35\25\0\1\35\11\0\12\100\6\0"+
    "\6\35\1\0\2\35\1\0\40\35\16\0\1\35\7\0"+
    "\12\100\u0136\0\23\35\15\0\232\35\346\0\304\35\274\0"+
    "\57\35\321\0\107\35\271\0\71\35\7\0\37\35\1\0"+
    "\12\100\146\0\36\35\22\0\60\35\20\0\4\35\14\0"+
    "\12\100\11\0\25\35\5\0\23\35\260\0\100\35\200\0"+
    "\113\35\5\0\1\35\102\0\15\35\100\0\2\35\1\0"+
    "\1\35\34\0\370\35\10\0\363\35\15\0\37\35\61\0"+
    "\3\35\21\0\4\35\10\0\u018c\35\4\0\153\35\5\0"+
    "\15\35\3\0\11\35\7\0\12\35\146\0\125\35\1\0"+
    "\107\35\1\0\2\35\2\0\1\35\2\0\2\35\2\0"+
    "\4\35\1\0\14\35\1\0\1\35\1\0\7\35\1\0"+
    "\101\35\1\0\4\35\2\0\10\35\1\0\7\35\1\0"+
    "\34\35\1\0\4\35\1\0\5\35\1\0\1\35\3\0"+
    "\7\35\1\0\u0154\35\2\0\31\35\1\0\31\35\1\0"+
    "\37\35\1\0\31\35\1\0\37\35\1\0\31\35\1\0"+
    "\37\35\1\0\31\35\1\0\37\35\1\0\31\35\1\0"+
    "\10\35\2\0\62\100\55\35\12\0\7\35\2\0\12\100"+
    "\4\0\1\35\u0171\0\54\35\4\0\12\100\6\0\305\35"+
    "\73\0\104\35\7\0\1\35\4\0\12\100\246\0\4\35"+
    "\1\0\33\35\1\0\2\35\1\0\1\35\2\0\1\35"+
    "\1\0\12\35\1\0\4\35\1\0\1\35\1\0\1\35"+
    "\6\0\1\35\4\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\3\35\1\0\2\35\1\0\1\35\2\0\1\35"+
    "\1\0\1\35\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\2\35\1\0\1\35\2\0\4\35\1\0\7\35"+
    "\1\0\4\35\1\0\4\35\1\0\1\35\1\0\12\35"+
    "\1\0\21\35\5\0\3\35\1\0\5\35\1\0\21\35"+
    "\104\0\327\35\51\0\65\35\13\0\336\35\2\0\u0182\35"+
    "\16\0\u0131\35\37\0\36\35\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\0\1\4\1\0\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\17\24\1\30\1\0\1\31\1\32\1\33"+
    "\1\34\1\32\1\0\2\32\1\35\3\36\1\32\1\37"+
    "\1\40\1\41\1\42\1\0\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\2\0\1\15\2\54\3\15\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\15\24\1\67\1\24\1\70"+
    "\14\24\1\71\1\72\1\73\2\74\1\0\1\75\1\76"+
    "\1\77\1\100\1\54\13\24\1\101\1\102\2\24\1\103"+
    "\1\24\1\104\13\24\1\0\1\105\1\106\1\107\1\24"+
    "\1\110\1\111\3\24\1\112\7\24\1\113\1\114\7\24"+
    "\1\115\1\116\1\24\1\0\1\117\1\120\3\24\1\121"+
    "\1\122\11\24\1\123\1\24\1\124\1\0\1\24\1\125"+
    "\3\24\1\126\1\127\4\24\1\130\1\131\1\132\1\24"+
    "\1\133\3\24\1\134\1\135\1\24\1\136\2\24\1\137"+
    "\1\24\1\140\1\24\1\141\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u02cb\0\u02cb\0\u034d"+
    "\0\u038e\0\u02cb\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u02cb"+
    "\0\u02cb\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618\0\u02cb\0\u02cb"+
    "\0\u02cb\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df"+
    "\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7"+
    "\0\u02cb\0\u0a28\0\u02cb\0\u0a69\0\u02cb\0\u02cb\0\u0aaa\0\u0aeb"+
    "\0\u02cb\0\u0b2c\0\u0b6d\0\u02cb\0\u0bae\0\u0bef\0\u0c30\0\u02cb"+
    "\0\u02cb\0\u02cb\0\u02cb\0\u0c71\0\u0cb2\0\u02cb\0\u02cb\0\u02cb"+
    "\0\u02cb\0\u02cb\0\u02cb\0\u02cb\0\u02cb\0\u0cf3\0\u0d34\0\u0d75"+
    "\0\u02cb\0\u0db6\0\u0df7\0\u0e38\0\u02cb\0\u0e79\0\u02cb\0\u0eba"+
    "\0\u0efb\0\u02cb\0\u02cb\0\u02cb\0\u02cb\0\u02cb\0\u02cb\0\u0618"+
    "\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103"+
    "\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u0618\0\u1289\0\u12ca"+
    "\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2"+
    "\0\u1513\0\u1554\0\u1595\0\u15d6\0\u02cb\0\u1617\0\u02cb\0\u02cb"+
    "\0\u1658\0\u1699\0\u02cb\0\u02cb\0\u02cb\0\u16da\0\u171b\0\u175c"+
    "\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964"+
    "\0\u19a5\0\u19e6\0\u0618\0\u0618\0\u1a27\0\u1a68\0\u1aa9\0\u1aea"+
    "\0\u0618\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1699\0\u02cb\0\u0618"+
    "\0\u1e37\0\u0618\0\u0618\0\u1e78\0\u1eb9\0\u1efa\0\u0618\0\u1f3b"+
    "\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u0618\0\u0618"+
    "\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u0618"+
    "\0\u0618\0\u22c9\0\u230a\0\u0618\0\u0618\0\u234b\0\u238c\0\u23cd"+
    "\0\u0618\0\u0618\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553"+
    "\0\u2594\0\u25d5\0\u2616\0\u0618\0\u2657\0\u0618\0\u2698\0\u26d9"+
    "\0\u0618\0\u271a\0\u275b\0\u279c\0\u0618\0\u0618\0\u27dd\0\u281e"+
    "\0\u285f\0\u28a0\0\u0618\0\u0618\0\u0618\0\u28e1\0\u0618\0\u2922"+
    "\0\u2963\0\u29a4\0\u0618\0\u0618\0\u29e5\0\u0618\0\u2a26\0\u2a67"+
    "\0\u0618\0\u2aa8\0\u0618\0\u2ae9\0\u0618\0\u0618";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\10\1\11\1\12\1\13\1\0\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\10\36\1\37\1\0\1\40\1\36\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\2\36\1\50\1\36\1\51"+
    "\1\36\1\52\1\36\1\53\1\54\1\55\1\56\1\36"+
    "\1\57\1\60\2\36\1\61\1\62\1\63\1\0\2\64"+
    "\1\65\1\64\1\66\1\64\1\67\33\64\1\70\40\64"+
    "\1\71\1\64\1\72\1\64\1\67\33\64\1\71\36\64"+
    "\31\0\10\73\3\0\1\73\1\0\27\73\4\0\13\74"+
    "\1\75\4\74\1\76\60\74\42\77\1\70\2\77\1\100"+
    "\33\77\1\0\2\10\1\11\1\12\1\13\1\0\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\10\36\1\37\1\0\1\40\1\36\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\2\36\1\50\1\36"+
    "\1\51\1\36\1\52\1\36\1\53\1\54\1\55\1\56"+
    "\1\36\1\57\1\60\2\36\1\101\1\62\1\102\2\0"+
    "\2\10\124\0\1\103\56\0\1\104\77\0\1\105\206\0"+
    "\1\106\116\0\1\107\66\0\1\110\11\0\1\111\70\0"+
    "\1\112\7\0\1\113\1\114\70\0\1\115\1\0\2\116"+
    "\71\0\1\117\4\0\1\120\5\0\1\121\71\0\1\122"+
    "\1\0\2\123\7\0\1\124\1\125\1\126\1\0\1\127"+
    "\1\130\1\131\3\0\1\123\2\0\1\124\1\0\1\125"+
    "\1\126\1\125\4\0\1\127\7\0\1\130\2\0\1\131"+
    "\24\0\1\122\1\0\2\27\10\0\1\125\1\126\1\0"+
    "\1\127\1\130\4\0\1\27\4\0\1\125\1\126\1\125"+
    "\4\0\1\127\7\0\1\130\35\0\1\132\1\133\100\0"+
    "\1\134\100\0\1\135\1\136\70\0\1\137\67\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\27\36"+
    "\3\0\1\36\6\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\20\36\1\140\6\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\15\36\1\141\1\36\1\142\6\36\1\143\3\0"+
    "\1\36\6\0\1\36\12\0\2\36\6\0\10\36\3\0"+
    "\1\36\1\0\7\36\1\144\2\36\1\145\2\36\1\146"+
    "\11\36\3\0\1\36\6\0\1\36\12\0\2\36\6\0"+
    "\10\36\3\0\1\36\1\0\15\36\1\147\11\36\3\0"+
    "\1\36\6\0\1\36\12\0\2\36\6\0\10\36\3\0"+
    "\1\36\1\0\12\36\1\150\12\36\1\151\1\36\3\0"+
    "\1\36\6\0\1\36\12\0\2\36\6\0\10\36\3\0"+
    "\1\36\1\0\1\152\11\36\1\153\2\36\1\154\4\36"+
    "\1\155\4\36\3\0\1\36\6\0\1\36\12\0\2\36"+
    "\6\0\10\36\3\0\1\36\1\0\5\36\1\156\5\36"+
    "\1\157\1\160\12\36\3\0\1\36\6\0\1\36\12\0"+
    "\2\36\6\0\10\36\3\0\1\36\1\0\15\36\1\161"+
    "\11\36\3\0\1\36\6\0\1\36\12\0\2\36\6\0"+
    "\10\36\3\0\1\36\1\0\4\36\1\162\15\36\1\163"+
    "\4\36\3\0\1\36\6\0\1\36\12\0\2\36\6\0"+
    "\10\36\3\0\1\36\1\0\1\164\16\36\1\165\2\36"+
    "\1\166\4\36\3\0\1\36\6\0\1\36\12\0\2\36"+
    "\6\0\10\36\3\0\1\36\1\0\4\36\1\167\22\36"+
    "\3\0\1\36\6\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\7\36\1\170\11\36\1\171\5\36"+
    "\3\0\1\36\6\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\17\36\1\172\7\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\15\36\1\173\11\36\3\0\1\36\6\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\7\36"+
    "\1\174\17\36\3\0\1\36\76\0\1\175\2\0\2\64"+
    "\1\0\1\64\1\0\1\64\1\0\33\64\1\0\36\64"+
    "\31\0\10\176\3\0\1\176\1\0\27\176\1\177\3\0"+
    "\2\200\1\0\65\200\1\201\10\200\4\0\1\202\102\0"+
    "\1\73\12\0\2\73\6\0\10\73\3\0\1\73\1\0"+
    "\27\73\3\0\1\73\20\0\1\203\73\0\1\204\65\0"+
    "\42\77\1\0\2\77\1\0\33\77\4\0\1\205\74\0"+
    "\2\105\1\0\76\105\21\0\2\116\10\0\1\125\1\126"+
    "\7\0\1\116\4\0\1\125\1\126\1\125\40\0\1\206"+
    "\65\0\2\120\1\0\76\120\21\0\2\116\75\0\1\122"+
    "\1\0\2\123\10\0\1\125\1\126\7\0\1\123\4\0"+
    "\1\125\1\126\1\125\46\0\2\124\13\0\1\127\1\130"+
    "\4\0\1\124\13\0\1\127\7\0\1\130\24\0\1\207"+
    "\1\0\1\207\2\0\2\207\10\0\1\125\10\0\1\207"+
    "\4\0\1\125\1\0\1\125\63\0\1\127\21\0\1\127"+
    "\41\0\2\131\6\0\4\131\1\0\1\127\1\130\4\0"+
    "\1\131\1\0\6\131\4\0\1\127\7\0\1\130\16\0"+
    "\1\36\12\0\2\36\6\0\10\36\3\0\1\36\1\0"+
    "\15\36\1\210\11\36\3\0\1\36\6\0\1\36\12\0"+
    "\2\36\6\0\10\36\3\0\1\36\1\0\4\36\1\211"+
    "\22\36\3\0\1\36\6\0\1\36\12\0\2\36\6\0"+
    "\10\36\3\0\1\36\1\0\21\36\1\212\5\36\3\0"+
    "\1\36\6\0\1\36\12\0\2\36\6\0\10\36\3\0"+
    "\1\36\1\0\1\213\26\36\3\0\1\36\6\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\1\214"+
    "\26\36\3\0\1\36\6\0\1\36\12\0\2\36\6\0"+
    "\10\36\3\0\1\36\1\0\14\36\1\215\12\36\3\0"+
    "\1\36\6\0\1\36\12\0\2\36\6\0\10\36\3\0"+
    "\1\36\1\0\22\36\1\216\4\36\3\0\1\36\6\0"+
    "\1\36\12\0\2\36\6\0\10\36\3\0\1\36\1\0"+
    "\20\36\1\217\6\36\3\0\1\36\6\0\1\36\12\0"+
    "\2\36\6\0\10\36\3\0\1\36\1\0\21\36\1\220"+
    "\5\36\3\0\1\36\6\0\1\36\12\0\2\36\6\0"+
    "\10\36\3\0\1\36\1\0\12\36\1\221\14\36\3\0"+
    "\1\36\6\0\1\36\12\0\2\36\6\0\10\36\3\0"+
    "\1\36\1\0\15\36\1\222\11\36\3\0\1\36\6\0"+
    "\1\36\12\0\2\36\6\0\10\36\3\0\1\36\1\0"+
    "\17\36\1\223\7\36\3\0\1\36\6\0\1\36\12\0"+
    "\2\36\6\0\10\36\3\0\1\36\1\0\14\36\1\224"+
    "\12\36\3\0\1\36\6\0\1\36\12\0\2\36\6\0"+
    "\10\36\3\0\1\36\1\0\16\36\1\225\10\36\3\0"+
    "\1\36\6\0\1\36\12\0\2\36\6\0\10\36\3\0"+
    "\1\36\1\0\12\36\1\226\6\36\1\227\5\36\3\0"+
    "\1\36\6\0\1\36\12\0\2\36\6\0\10\36\3\0"+
    "\1\36\1\0\14\36\1\230\12\36\3\0\1\36\6\0"+
    "\1\36\12\0\2\36\6\0\10\36\3\0\1\36\1\0"+
    "\24\36\1\231\2\36\3\0\1\36\6\0\1\36\12\0"+
    "\2\36\6\0\10\36\3\0\1\36\1\0\12\36\1\232"+
    "\14\36\3\0\1\36\6\0\1\36\12\0\2\36\6\0"+
    "\10\36\3\0\1\36\1\0\2\36\1\233\24\36\3\0"+
    "\1\36\6\0\1\36\12\0\2\36\6\0\10\36\3\0"+
    "\1\36\1\0\10\36\1\234\4\36\1\235\11\36\3\0"+
    "\1\36\6\0\1\36\12\0\2\36\6\0\10\36\3\0"+
    "\1\36\1\0\1\36\1\236\25\36\3\0\1\36\6\0"+
    "\1\36\12\0\2\36\6\0\10\36\3\0\1\36\1\0"+
    "\21\36\1\237\5\36\3\0\1\36\6\0\1\36\12\0"+
    "\2\36\6\0\10\36\3\0\1\36\1\0\15\36\1\240"+
    "\11\36\3\0\1\36\6\0\1\36\12\0\2\36\6\0"+
    "\10\36\3\0\1\36\1\0\1\241\26\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\22\36\1\242\4\36\3\0\1\36\6\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\10\36"+
    "\1\243\16\36\3\0\1\36\6\0\1\36\12\0\2\36"+
    "\6\0\10\36\3\0\1\36\1\0\10\36\1\244\16\36"+
    "\3\0\1\36\6\0\1\176\12\0\2\176\6\0\10\176"+
    "\3\0\1\176\1\0\27\176\3\0\1\176\21\0\2\245"+
    "\6\0\4\245\11\0\6\245\31\0\1\246\114\0\1\247"+
    "\101\0\2\207\10\0\1\125\10\0\1\207\4\0\1\125"+
    "\1\0\1\125\33\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\12\36\1\250\14\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\1\251\26\36\3\0\1\36\6\0\1\36\12\0"+
    "\2\36\6\0\10\36\3\0\1\36\1\0\4\36\1\252"+
    "\22\36\3\0\1\36\6\0\1\36\12\0\2\36\6\0"+
    "\10\36\3\0\1\36\1\0\17\36\1\253\7\36\3\0"+
    "\1\36\6\0\1\36\12\0\2\36\6\0\10\36\3\0"+
    "\1\36\1\0\20\36\1\254\6\36\3\0\1\36\6\0"+
    "\1\36\12\0\2\36\6\0\10\36\3\0\1\36\1\0"+
    "\21\36\1\255\5\36\3\0\1\36\6\0\1\36\12\0"+
    "\2\36\6\0\10\36\3\0\1\36\1\0\1\36\1\256"+
    "\25\36\3\0\1\36\6\0\1\36\12\0\2\36\6\0"+
    "\10\36\3\0\1\36\1\0\4\36\1\257\22\36\3\0"+
    "\1\36\6\0\1\36\12\0\2\36\6\0\10\36\3\0"+
    "\1\36\1\0\4\36\1\260\22\36\3\0\1\36\6\0"+
    "\1\36\12\0\2\36\6\0\10\36\3\0\1\36\1\0"+
    "\20\36\1\261\6\36\3\0\1\36\6\0\1\36\12\0"+
    "\2\36\6\0\10\36\3\0\1\36\1\0\1\262\26\36"+
    "\3\0\1\36\6\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\12\36\1\263\2\36\1\264\11\36"+
    "\3\0\1\36\6\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\10\36\1\265\16\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\4\36\1\266\22\36\3\0\1\36\6\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\6\36"+
    "\1\267\20\36\3\0\1\36\6\0\1\36\12\0\2\36"+
    "\6\0\10\36\3\0\1\36\1\0\12\36\1\270\14\36"+
    "\3\0\1\36\6\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\11\36\1\271\15\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\23\36\1\272\3\36\3\0\1\36\6\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\21\36"+
    "\1\273\5\36\3\0\1\36\6\0\1\36\12\0\2\36"+
    "\6\0\10\36\3\0\1\36\1\0\12\36\1\274\14\36"+
    "\3\0\1\36\6\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\22\36\1\275\4\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\17\36\1\276\7\36\3\0\1\36\6\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\21\36"+
    "\1\277\5\36\3\0\1\36\6\0\1\36\12\0\2\36"+
    "\6\0\10\36\3\0\1\36\1\0\4\36\1\300\22\36"+
    "\3\0\1\36\6\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\3\36\1\301\23\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\12\36\1\302\14\36\3\0\1\36\21\0\2\303"+
    "\6\0\4\303\11\0\6\303\33\0\1\36\12\0\2\36"+
    "\6\0\10\36\3\0\1\36\1\0\11\36\1\304\15\36"+
    "\3\0\1\36\6\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\20\36\1\305\6\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\10\36\1\306\16\36\3\0\1\36\6\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\12\36"+
    "\1\307\14\36\3\0\1\36\6\0\1\36\12\0\2\36"+
    "\6\0\10\36\3\0\1\36\1\0\14\36\1\310\12\36"+
    "\3\0\1\36\6\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\4\36\1\311\22\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\21\36\1\312\5\36\3\0\1\36\6\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\4\36"+
    "\1\313\22\36\3\0\1\36\6\0\1\36\12\0\2\36"+
    "\6\0\10\36\3\0\1\36\1\0\17\36\1\314\7\36"+
    "\3\0\1\36\6\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\14\36\1\315\12\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\17\36\1\316\7\36\3\0\1\36\6\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\1\317"+
    "\26\36\3\0\1\36\6\0\1\36\12\0\2\36\6\0"+
    "\10\36\3\0\1\36\1\0\1\320\26\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\4\36\1\321\22\36\3\0\1\36\6\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\10\36"+
    "\1\322\16\36\3\0\1\36\6\0\1\36\12\0\2\36"+
    "\6\0\10\36\3\0\1\36\1\0\17\36\1\323\7\36"+
    "\3\0\1\36\6\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\21\36\1\324\5\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\10\36\1\325\16\36\3\0\1\36\6\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\4\36"+
    "\1\326\22\36\3\0\1\36\21\0\2\327\6\0\4\327"+
    "\11\0\6\327\33\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\14\36\1\330\12\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\4\36\1\331\22\36\3\0\1\36\6\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\3\36"+
    "\1\332\14\36\1\333\6\36\3\0\1\36\6\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\13\36"+
    "\1\334\13\36\3\0\1\36\6\0\1\36\12\0\2\36"+
    "\6\0\10\36\3\0\1\36\1\0\21\36\1\335\5\36"+
    "\3\0\1\36\6\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\4\36\1\336\22\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\14\36\1\337\12\36\3\0\1\36\6\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\6\36"+
    "\1\340\20\36\3\0\1\36\6\0\1\36\12\0\2\36"+
    "\6\0\10\36\3\0\1\36\1\0\21\36\1\341\5\36"+
    "\3\0\1\36\6\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\2\36\1\342\24\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\2\36\1\343\24\36\3\0\1\36\6\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\14\36"+
    "\1\344\12\36\3\0\1\36\6\0\1\36\12\0\2\36"+
    "\6\0\10\36\3\0\1\36\1\0\2\36\1\345\24\36"+
    "\3\0\1\36\21\0\2\200\6\0\4\200\11\0\6\200"+
    "\33\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\22\36\1\346\4\36\3\0\1\36\6\0\1\36"+
    "\12\0\2\36\6\0\10\36\3\0\1\36\1\0\20\36"+
    "\1\347\6\36\3\0\1\36\6\0\1\36\12\0\2\36"+
    "\6\0\10\36\3\0\1\36\1\0\10\36\1\350\16\36"+
    "\3\0\1\36\6\0\1\36\12\0\2\36\6\0\10\36"+
    "\3\0\1\36\1\0\4\36\1\351\22\36\3\0\1\36"+
    "\6\0\1\36\12\0\2\36\6\0\10\36\3\0\1\36"+
    "\1\0\1\352\26\36\3\0\1\36\6\0\1\36\12\0"+
    "\2\36\6\0\10\36\3\0\1\36\1\0\4\36\1\353"+
    "\22\36\3\0\1\36\6\0\1\36\12\0\2\36\6\0"+
    "\10\36\3\0\1\36\1\0\4\36\1\354\22\36\3\0"+
    "\1\36\6\0\1\36\12\0\2\36\6\0\10\36\3\0"+
    "\1\36\1\0\21\36\1\355\5\36\3\0\1\36\6\0"+
    "\1\36\12\0\2\36\6\0\10\36\3\0\1\36\1\0"+
    "\4\36\1\356\22\36\3\0\1\36\6\0\1\36\12\0"+
    "\2\36\6\0\10\36\3\0\1\36\1\0\15\36\1\357"+
    "\11\36\3\0\1\36\6\0\1\36\12\0\2\36\6\0"+
    "\10\36\3\0\1\36\1\0\14\36\1\360\12\36\3\0"+
    "\1\36\6\0\1\36\12\0\2\36\6\0\10\36\3\0"+
    "\1\36\1\0\12\36\1\361\14\36\3\0\1\36\6\0"+
    "\1\36\12\0\2\36\6\0\10\36\3\0\1\36\1\0"+
    "\4\36\1\362\22\36\3\0\1\36\6\0\1\36\12\0"+
    "\2\36\6\0\10\36\3\0\1\36\1\0\14\36\1\363"+
    "\12\36\3\0\1\36\6\0\1\36\12\0\2\36\6\0"+
    "\10\36\3\0\1\36\1\0\21\36\1\364\5\36\3\0"+
    "\1\36\6\0\1\36\12\0\2\36\6\0\10\36\3\0"+
    "\1\36\1\0\3\36\1\365\23\36\3\0\1\36\6\0"+
    "\1\36\12\0\2\36\6\0\10\36\3\0\1\36\1\0"+
    "\20\36\1\366\6\36\3\0\1\36";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11050];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\3\1\1\0\1\11\1\0\2\11\2\1\1\11"+
    "\5\1\2\11\5\1\3\11\17\1\1\11\1\0\1\11"+
    "\1\1\2\11\1\1\1\0\1\11\2\1\1\11\3\1"+
    "\4\11\1\0\1\1\10\11\3\1\1\11\2\0\1\1"+
    "\1\11\1\1\1\11\2\1\6\11\35\1\1\11\1\1"+
    "\2\11\1\1\1\0\3\11\37\1\1\0\1\1\1\11"+
    "\33\1\1\0\23\1\1\0\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

     private static final class State {
            final int lBraceCount;
            final int state;

            public State(int state, int lBraceCount) {
                this.state = state;
                this.lBraceCount = lBraceCount;
            }

            @Override
            public String toString() {
                return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
            }
        }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;

    private int commentStart;
    private int commentDepth;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

        private LexToken commentStateToTokenType(int state) {
            switch (state) {
                case BLOCK_COMMENT:
                    return new LexToken(TokenType.BLOCK_COMMENT);
                case DOC_COMMENT:
                    return new LexToken(TokenType.DOC_COMMENT);
                default:
                    throw new IllegalArgumentException("Unexpected state: " + state);
            }
        }

  // tokens for which we need to save current buffer
  private LexToken valueToken(TokenType tokenType) {
    return new LexToken(tokenType, getTokenString());
  }
  private LexToken token(TokenType tokenType) {
    return new LexToken(tokenType, null);
  }

  public String getTokenString() {
    return new String(zzBuffer, getTokenStart(), getTokenEnd() - getTokenStart());
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MarcelJflexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) throws MarcelLexerException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new MarcelLexerException(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  throws MarcelLexerException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  // end of file
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public LexToken nextToken() throws java.io.IOException, MarcelLexerException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return commentStateToTokenType(state);
            }  // fall though
            case 247: break;
            case DOC_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return commentStateToTokenType(state);
            }  // fall though
            case 248: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(WHITE_SPACE);
            }
            // fall through
          case 99: break;
          case 2:
            { return token(NOT);
            }
            // fall through
          case 100: break;
          case 3:
            { pushState(STRING); return token(OPEN_QUOTE);
            }
            // fall through
          case 101: break;
          case 4:
            { return token(MODULO);
            }
            // fall through
          case 102: break;
          case 5:
            { return token(LPAR);
            }
            // fall through
          case 103: break;
          case 6:
            { return token(RPAR);
            }
            // fall through
          case 104: break;
          case 7:
            { return token(MUL);
            }
            // fall through
          case 105: break;
          case 8:
            { return token(PLUS);
            }
            // fall through
          case 106: break;
          case 9:
            { return token(COMMA);
            }
            // fall through
          case 107: break;
          case 10:
            { return token(MINUS);
            }
            // fall through
          case 108: break;
          case 11:
            { return token(DOT);
            }
            // fall through
          case 109: break;
          case 12:
            { return token(DIV);
            }
            // fall through
          case 110: break;
          case 13:
            { return valueToken(INTEGER);
            }
            // fall through
          case 111: break;
          case 14:
            { return token(COLON);
            }
            // fall through
          case 112: break;
          case 15:
            { return token(SEMI_COLON);
            }
            // fall through
          case 113: break;
          case 16:
            { return token(LT);
            }
            // fall through
          case 114: break;
          case 17:
            { return token(ASSIGNMENT);
            }
            // fall through
          case 115: break;
          case 18:
            { return token(GT);
            }
            // fall through
          case 116: break;
          case 19:
            { return token(QUESTION_MARK);
            }
            // fall through
          case 117: break;
          case 20:
            { return valueToken(IDENTIFIER);
            }
            // fall through
          case 118: break;
          case 21:
            { return token(SQUARE_BRACKETS_OPEN);
            }
            // fall through
          case 119: break;
          case 22:
            { return token(SQUARE_BRACKETS_CLOSE);
            }
            // fall through
          case 120: break;
          case 23:
            { pushState(CHAR_STRING); return token(OPEN_CHAR_QUOTE);
            }
            // fall through
          case 121: break;
          case 24:
            { return token(BRACKETS_OPEN);
            }
            // fall through
          case 122: break;
          case 25:
            { return token(BRACKETS_CLOSE);
            }
            // fall through
          case 123: break;
          case 26:
            { return valueToken(REGULAR_STRING_PART);
            }
            // fall through
          case 124: break;
          case 27:
            { popState(); yypushback(1); return valueToken(DANGLING_NEWLINE);
            }
            // fall through
          case 125: break;
          case 28:
            { popState(); return token(CLOSING_QUOTE);
            }
            // fall through
          case 126: break;
          case 29:
            { popState(); return valueToken(IDENTIFIER);
            }
            // fall through
          case 127: break;
          case 30:
            { 
            }
            // fall through
          case 128: break;
          case 31:
            { popState(); return token(CLOSING_CHAR_QUOTE);
            }
            // fall through
          case 129: break;
          case 32:
            { lBraceCount++; return valueToken(LBRACE);
            }
            // fall through
          case 130: break;
          case 33:
            { if (lBraceCount == 0) {
                                             popState();
                                             return token(LONG_TEMPLATE_ENTRY_END);
                                           }
                                           lBraceCount--;
                                           return valueToken(RBRACE);
            }
            // fall through
          case 131: break;
          case 34:
            { return token(NOT_EQUAL);
            }
            // fall through
          case 132: break;
          case 35:
            { if (zzCurrentPos == 0) {
                return token(TokenType.SHEBANG_COMMENT);
            }
            else {
                yypushback(yylength() - 1);
                return token(HASH);
            }
            }
            // fall through
          case 133: break;
          case 36:
            { return token(AND);
            }
            // fall through
          case 134: break;
          case 37:
            { return token(MUL_ASSIGNMENT);
            }
            // fall through
          case 135: break;
          case 38:
            { return token(INCR);
            }
            // fall through
          case 136: break;
          case 39:
            { return token(PLUS_ASSIGNMENT);
            }
            // fall through
          case 137: break;
          case 40:
            { return token(DECR);
            }
            // fall through
          case 138: break;
          case 41:
            { return token(MINUS_ASSIGNMENT);
            }
            // fall through
          case 139: break;
          case 42:
            { return token(ARROW);
            }
            // fall through
          case 140: break;
          case 43:
            { return token(TWO_DOTS);
            }
            // fall through
          case 141: break;
          case 44:
            { return valueToken(FLOAT);
            }
            // fall through
          case 142: break;
          case 45:
            { pushState(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            }
            // fall through
          case 143: break;
          case 46:
            { return token(TokenType.EOL_COMMENT);
            }
            // fall through
          case 144: break;
          case 47:
            { return token(DIV_ASSIGNMENT);
            }
            // fall through
          case 145: break;
          case 48:
            { return token(LEFT_SHIFT);
            }
            // fall through
          case 146: break;
          case 49:
            { return token(LOE);
            }
            // fall through
          case 147: break;
          case 50:
            { return token(EQUAL);
            }
            // fall through
          case 148: break;
          case 51:
            { return token(GOE);
            }
            // fall through
          case 149: break;
          case 52:
            { return token(RIGHT_SHIFT);
            }
            // fall through
          case 150: break;
          case 53:
            { return token(QUESTION_DOT);
            }
            // fall through
          case 151: break;
          case 54:
            { return token(AS);
            }
            // fall through
          case 152: break;
          case 55:
            { return token(IF);
            }
            // fall through
          case 153: break;
          case 56:
            { return token(IN);
            }
            // fall through
          case 154: break;
          case 57:
            { return token(OR);
            }
            // fall through
          case 155: break;
          case 58:
            { pushState(SHORT_TEMPLATE_ENTRY);
                                                        yypushback(yylength() - 1);
                                                        return token(SHORT_TEMPLATE_ENTRY_START);
            }
            // fall through
          case 156: break;
          case 59:
            { pushState(LONG_TEMPLATE_ENTRY); return token(LONG_TEMPLATE_ENTRY_START);
            }
            // fall through
          case 157: break;
          case 60:
            { return valueToken(ESCAPE_SEQUENCE);
            }
            // fall through
          case 158: break;
          case 61:
            { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             popState();
             zzStartRead = commentStart;
             return commentStateToTokenType(state);
        }
            }
            // fall through
          case 159: break;
          case 62:
            { commentDepth++;
            }
            // fall through
          case 160: break;
          case 63:
            { pushState(RAW_STRING); return token(OPEN_QUOTE);
            }
            // fall through
          case 161: break;
          case 64:
            { pushState(DOC_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            }
            // fall through
          case 162: break;
          case 65:
            { return token(FOR);
            }
            // fall through
          case 163: break;
          case 66:
            { return token(FUN);
            }
            // fall through
          case 164: break;
          case 67:
            { return valueToken(TYPE_INT);
            }
            // fall through
          case 165: break;
          case 68:
            { return token(NEW);
            }
            // fall through
          case 166: break;
          case 69:
            { int length = yytext().length();
                                    if (length <= 3) { // closing """
                                        popState();
                                        return token(CLOSING_QUOTE);
                                    }
                                    else { // some quotes at the end of a string, e.g. """ "foo""""
                                        yypushback(3); // return the closing quotes (""") to the stream
                                        return valueToken(REGULAR_STRING_PART);
                                    }
            }
            // fall through
          case 167: break;
          case 70:
            { return token(TokenType.BLOCK_COMMENT);
            }
            // fall through
          case 168: break;
          case 71:
            { return valueToken(TYPE_BOOL);
            }
            // fall through
          case 169: break;
          case 72:
            { return valueToken(TYPE_BYTE);
            }
            // fall through
          case 170: break;
          case 73:
            { return valueToken(TYPE_CHAR);
            }
            // fall through
          case 171: break;
          case 74:
            { return token(ELSE);
            }
            // fall through
          case 172: break;
          case 75:
            { return valueToken(TYPE_LONG);
            }
            // fall through
          case 173: break;
          case 76:
            { return token(NULL);
            }
            // fall through
          case 174: break;
          case 77:
            { return token(VALUE_TRUE);
            }
            // fall through
          case 175: break;
          case 78:
            { return valueToken(TYPE_VOID);
            }
            // fall through
          case 176: break;
          case 79:
            { return token(BREAK);
            }
            // fall through
          case 177: break;
          case 80:
            { return token(CLASS);
            }
            // fall through
          case 178: break;
          case 81:
            { return token(VALUE_FALSE);
            }
            // fall through
          case 179: break;
          case 82:
            { return valueToken(TYPE_FLOAT);
            }
            // fall through
          case 180: break;
          case 83:
            { return valueToken(TYPE_SHORT);
            }
            // fall through
          case 181: break;
          case 84:
            { return token(WHILE);
            }
            // fall through
          case 182: break;
          case 85:
            { return valueToken(TYPE_DOUBLE);
            }
            // fall through
          case 183: break;
          case 86:
            { return token(IMPORT);
            }
            // fall through
          case 184: break;
          case 87:
            { return token(INLINE);
            }
            // fall through
          case 185: break;
          case 88:
            { return token(VISIBILITY_PUBLIC);
            }
            // fall through
          case 186: break;
          case 89:
            { return token(RETURN);
            }
            // fall through
          case 187: break;
          case 90:
            { return token(STATIC);
            }
            // fall through
          case 188: break;
          case 91:
            { return token(EXTENDS);
            }
            // fall through
          case 189: break;
          case 92:
            { return token(PACKAGE);
            }
            // fall through
          case 190: break;
          case 93:
            { return token(VISIBILITY_PRIVATE);
            }
            // fall through
          case 191: break;
          case 94:
            { return token(CONTINUE);
            }
            // fall through
          case 192: break;
          case 95:
            { return token(VISIBILITY_INTERNAL);
            }
            // fall through
          case 193: break;
          case 96:
            { return token(EXTENSION);
            }
            // fall through
          case 194: break;
          case 97:
            { return token(VISIBILITY_PROTECTED);
            }
            // fall through
          case 195: break;
          case 98:
            { return token(IMPLEMENTS);
            }
            // fall through
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
