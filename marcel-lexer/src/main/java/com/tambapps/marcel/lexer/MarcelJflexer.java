/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.tambapps.marcel.lexer;
import static com.tambapps.marcel.lexer.TokenType.*;
import java.util.Stack;
import java.io.IOException;
import java.io.StringReader;

/**
  * Marcel lang lexer
  */

public class MarcelJflexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int RAW_STRING = 4;
  public static final int SHORT_TEMPLATE_ENTRY = 6;
  public static final int BLOCK_COMMENT = 8;
  public static final int DOC_COMMENT = 10;
  public static final int CHAR_STRING = 12;
  public static final int LONG_TEMPLATE_ENTRY = 14;
  public static final int UNMATCHED_BACKTICK = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  5,  5,  6,  6, 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14336 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1"+
    "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65"+
    "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2"+
    "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115"+
    "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13"+
    "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142"+
    "\1\25\45\13\1\143\1\13\1\25\1\30\4\13\1\30\1\144\1\145\1\16\1\13\1\16\1\13"+
    "\1\16\1\145\1\71\3\13\1\146\1\1\1\147\1\115\2\1\1\115\5\13\1\27\1\150\1\13"+
    "\1\151\4\13\1\40\1\13\1\152\2\1\1\65\1\13\1\153\1\154\2\13\1\155\1\13\1\77"+
    "\1\115\2\1\1\13\1\113\3\13\1\154\2\1\2\115\1\156\5\1\1\110\2\13\1\146\1\157"+
    "\1\115\2\1\1\160\1\13\1\161\1\42\2\13\1\40\1\1\2\13\1\146\1\1\1\162\1\42\1"+
    "\13\1\153\1\46\5\1\1\163\1\164\14\13\4\1\21\13\1\142\2\13\1\142\1\165\1\13"+
    "\1\153\3\13\1\166\1\167\1\170\1\125\1\167\2\1\1\171\4\1\1\172\1\1\1\125\6"+
    "\1\1\173\1\174\1\175\1\176\1\177\3\1\1\200\147\1\2\13\1\152\2\13\1\152\10"+
    "\13\1\201\1\202\2\13\1\134\3\13\1\203\1\1\1\13\1\113\4\204\4\1\1\127\35\1"+
    "\1\205\2\1\1\206\1\25\4\13\1\207\1\25\4\13\1\135\1\110\1\13\1\153\1\25\4\13"+
    "\1\152\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1"+
    "\125\4\1\2\13\1\153\20\13\1\125\1\13\1\210\1\1\2\13\1\152\1\127\1\13\1\153"+
    "\4\13\1\40\2\1\1\211\1\212\5\13\1\213\1\13\1\152\1\27\3\1\1\211\1\214\1\13"+
    "\1\31\1\1\3\13\1\146\1\212\2\13\1\146\1\1\1\115\1\1\1\215\1\42\1\13\1\40\1"+
    "\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\216\1\217\2\13\1\46"+
    "\1\1\1\220\1\115\1\13\1\221\3\13\1\222\1\223\1\224\1\30\1\66\1\225\1\226\1"+
    "\204\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\146\1\13\1\227\2\13\1\155\20"+
    "\1\26\13\1\153\6\13\1\77\2\1\1\113\1\230\1\56\1\231\1\232\6\13\1\16\1\1\1"+
    "\160\25\13\1\153\1\1\4\13\1\212\2\13\1\27\2\1\1\155\7\1\1\216\7\13\1\125\1"+
    "\1\1\115\1\25\1\30\1\25\1\30\1\233\4\13\1\152\1\234\1\235\2\1\1\236\1\13\1"+
    "\14\1\237\2\153\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2\13\1\1\1\13"+
    "\1\240\2\13\1\40\1\13\1\153\2\13\1\241\3\1\11\13\1\153\1\115\2\13\1\241\1"+
    "\13\1\155\2\13\1\27\3\13\1\146\11\1\23\13\1\113\1\13\1\40\1\27\11\1\1\242"+
    "\2\13\1\243\1\13\1\40\1\13\1\113\1\13\1\152\4\1\1\13\1\244\1\13\1\40\1\13"+
    "\1\77\4\1\3\13\1\245\4\1\1\71\1\246\1\13\1\146\2\1\1\13\1\125\1\13\1\125\2"+
    "\1\1\124\1\13\1\154\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1"+
    "\46\3\1\3\13\1\31\3\13\1\31\60\1\1\160\2\13\1\27\2\1\1\65\1\1\1\160\2\13\2"+
    "\1\1\13\1\46\1\115\1\160\1\13\1\113\1\65\1\1\2\13\1\247\1\160\2\13\1\31\1"+
    "\250\1\251\2\1\1\13\1\22\1\155\5\1\1\252\1\253\1\46\2\13\1\152\1\1\1\115\1"+
    "\73\1\55\1\56\1\70\1\1\1\254\1\16\11\1\3\13\1\154\1\255\1\115\2\1\3\13\1\1"+
    "\1\256\1\115\12\1\2\13\1\152\2\1\1\257\2\1\3\13\1\1\1\260\1\115\2\1\2\13\1"+
    "\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34\1\3\13\1\46"+
    "\20\1\1\56\1\13\1\152\1\1\1\71\1\115\1\1\1\212\1\13\67\1\71\13\1\77\16\1\14"+
    "\13\1\146\53\1\2\13\1\152\75\1\44\13\1\113\33\1\43\13\1\46\1\13\1\152\1\115"+
    "\6\1\1\13\1\153\1\1\3\13\1\1\1\146\1\115\1\160\1\261\1\13\67\1\4\13\1\154"+
    "\1\71\3\1\1\160\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1\1\16\77\1\6\13"+
    "\1\30\1\125\1\46\1\77\66\1\5\13\1\216\3\13\1\145\1\262\1\263\1\264\3\13\1"+
    "\265\1\266\1\13\1\267\1\270\1\36\24\13\1\271\1\13\1\36\1\135\1\13\1\135\1"+
    "\13\1\216\1\13\1\216\1\152\1\13\1\152\1\13\1\56\1\13\1\56\1\13\1\272\3\273"+
    "\14\13\1\154\3\1\4\13\1\146\1\115\112\1\1\264\1\13\1\274\1\275\1\276\1\277"+
    "\1\300\1\301\1\302\1\155\1\303\1\155\24\1\55\13\1\113\2\1\103\13\1\154\15"+
    "\13\1\153\150\13\1\16\25\1\41\13\1\153\36\1");

  /* The ZZ_CMAP_A table has 3136 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\7\1\11\1\101\1\102\1\101\22\0\1\7\1\13\1\27\1\12\1\4\1\71\1\75\1\0"+
    "\1\62\1\63\1\33\1\70\1\100\1\24\1\21\1\10\1\14\11\5\1\66\1\67\1\73\1\77\1"+
    "\74\1\72\1\0\1\6\1\16\1\6\1\22\1\23\1\22\5\1\1\17\10\1\1\20\2\1\1\15\2\1\1"+
    "\64\1\25\1\65\1\0\1\2\1\30\1\44\1\47\1\54\1\37\1\42\1\43\1\53\1\51\1\36\1"+
    "\1\1\56\1\45\1\60\1\52\1\35\1\55\1\1\1\41\1\46\1\40\1\26\1\34\1\61\1\57\1"+
    "\50\1\1\1\31\1\76\1\32\7\0\1\101\24\0\1\1\12\0\1\1\4\0\1\1\5\0\27\1\1\0\12"+
    "\1\4\0\14\1\16\0\5\1\7\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1\2\0\4\1\1\0\1\1\6\0\1"+
    "\1\1\0\3\1\1\0\1\1\1\0\4\1\1\0\23\1\1\0\13\1\10\0\6\1\1\0\26\1\2\0\1\1\6\0"+
    "\10\1\10\0\13\1\5\0\3\1\15\0\12\3\4\0\6\1\1\0\1\1\17\0\2\1\7\0\2\1\12\3\3"+
    "\1\2\0\2\1\1\0\16\1\15\0\11\1\13\0\1\1\16\0\12\3\6\1\4\0\2\1\4\0\1\1\5\0\6"+
    "\1\4\0\1\1\11\0\1\1\3\0\1\1\7\0\11\1\7\0\5\1\1\0\10\1\6\0\26\1\3\0\1\1\2\0"+
    "\1\1\7\0\12\1\4\0\12\3\1\1\4\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1\3\0\4"+
    "\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0\1\1\5\0\6\1\4\0\2\1\1\0\2\1\1\0\2\1\1\0\2"+
    "\1\17\0\4\1\1\0\1\1\7\0\12\3\2\0\3\1\20\0\11\1\1\0\2\1\1\0\2\1\1\0\5\1\3\0"+
    "\1\1\2\0\1\1\30\0\1\1\13\0\10\1\2\0\1\1\3\0\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3"+
    "\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0\14\1\13\0\10\1\1\0\2\1\10\0\3\1"+
    "\5\0\1\1\4\0\10\1\1\0\6\1\1\0\5\1\3\0\1\1\3\0\2\1\15\0\13\1\2\0\1\1\6\0\3"+
    "\1\10\0\1\1\12\0\6\1\5\0\22\1\3\0\10\1\1\0\11\1\1\0\1\1\2\0\7\1\11\0\1\1\1"+
    "\0\2\1\14\0\12\3\7\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1"+
    "\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\11"+
    "\0\12\3\2\0\14\1\1\0\24\1\13\0\5\1\22\0\7\1\4\0\4\1\3\0\1\1\3\0\2\1\7\0\3"+
    "\1\4\0\15\1\14\0\1\1\1\0\6\1\1\0\1\1\5\0\1\1\2\0\13\1\1\0\15\1\1\0\4\1\2\0"+
    "\7\1\1\0\1\1\1\0\4\1\2\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\16\1\2\0"+
    "\6\1\2\0\15\1\2\0\1\1\1\0\10\1\7\0\15\1\1\0\6\1\23\0\1\1\4\0\1\1\3\0\5\1\2"+
    "\0\22\1\1\0\1\1\5\0\17\1\1\0\16\1\2\0\5\1\13\0\14\1\13\0\1\1\15\0\7\1\7\0"+
    "\16\1\15\0\2\1\12\3\3\0\3\1\11\0\4\1\1\0\4\1\3\0\2\1\11\0\10\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\6\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1\14\0"+
    "\2\101\7\0\1\1\15\0\1\1\2\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0\1\1\1"+
    "\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0\1\1\4\0\2\1\13\0\5\1\6"+
    "\0\4\1\3\0\2\1\14\0\10\1\7\0\10\1\1\0\7\1\6\0\2\1\12\0\5\1\5\0\2\1\3\0\7\1"+
    "\6\0\3\1\12\3\2\1\13\0\11\1\2\0\27\1\2\0\7\1\1\0\3\1\1\0\4\1\1\0\4\1\2\0\6"+
    "\1\3\0\1\1\1\0\1\1\2\0\5\1\1\0\12\1\12\3\5\1\1\0\3\1\1\0\10\1\4\0\7\1\3\0"+
    "\1\1\3\0\2\1\1\0\1\1\3\0\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1\3\0\6\1\2\0"+
    "\6\1\2\0\6\1\11\0\7\1\4\0\5\1\3\0\5\1\5\0\1\1\1\0\10\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\12\1\6\0\12\1\2\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1\3\0\14\1\1"+
    "\0\16\1\1\0\2\1\1\0\2\1\1\0\10\1\6\0\4\1\4\0\16\1\2\0\1\1\1\0\14\1\1\0\2\1"+
    "\3\0\1\1\2\0\4\1\1\0\2\1\12\0\10\1\6\0\6\1\1\0\3\1\1\0\12\1\3\0\1\1\12\0\4"+
    "\1\13\0\12\3\1\1\1\0\1\1\3\0\7\1\1\0\1\1\1\0\4\1\1\0\17\1\1\0\2\1\14\0\3\1"+
    "\7\0\4\1\11\0\2\1\1\0\1\1\20\0\4\1\10\0\1\1\13\0\10\1\5\0\3\1\2\0\1\1\2\0"+
    "\2\1\2\0\4\1\1\0\14\1\1\0\1\1\1\0\7\1\1\0\21\1\1\0\4\1\2\0\10\1\1\0\7\1\1"+
    "\0\14\1\1\0\4\1\1\0\5\1\1\0\1\1\3\0\14\1\2\0\13\1\1\0\10\1\2\0\22\3\1\0\2"+
    "\1\1\0\1\1\2\0\1\1\1\0\12\1\1\0\4\1\1\0\1\1\1\0\1\1\6\0\1\1\4\0\1\1\1\0\1"+
    "\1\1\0\1\1\1\0\3\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\2\0\4\1\1\0\7\1\1\0\4\1\1\0\4\1\1\0\1\1\1\0\12\1\1\0\5\1"+
    "\1\0\3\1\1\0\5\1\1\0\5\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\3\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\17\2\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\1\1\31\1\32\2\33"+
    "\1\34\1\1\1\35\2\33\1\36\3\37\1\33\1\0"+
    "\1\40\1\41\1\42\2\3\1\0\2\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\0\2\3\1\43\1\51\1\52"+
    "\1\53\1\54\1\0\1\55\1\2\1\56\1\57\15\2"+
    "\1\60\21\2\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\2\75\1\0"+
    "\1\76\1\77\1\43\1\100\1\101\1\102\1\2\1\103"+
    "\3\2\1\104\5\2\1\105\1\106\14\2\1\107\11\2"+
    "\1\110\1\0\1\111\1\112\1\113\5\2\1\114\1\115"+
    "\1\2\1\116\4\2\1\117\4\2\1\120\1\2\1\121"+
    "\1\122\2\2\1\123\5\2\1\124\1\0\7\2\1\125"+
    "\1\126\1\127\1\130\1\2\1\131\1\2\1\132\1\2"+
    "\1\133\4\2\1\134\1\0\1\2\1\135\1\136\1\2"+
    "\1\137\1\140\2\2\1\141\1\142\1\2\1\143\5\2"+
    "\1\144\3\2\1\145\1\146\1\147\2\2\1\150\2\2"+
    "\1\151\1\152\1\153";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u01d5\0\u01d5\0\u01d5\0\u04b6\0\u04f9\0\u053c"+
    "\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754"+
    "\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u01d5\0\u01d5\0\u01d5"+
    "\0\u01d5\0\u01d5\0\u01d5\0\u08e6\0\u01d5\0\u0929\0\u096c\0\u09af"+
    "\0\u09f2\0\u0a35\0\u0a78\0\u01d5\0\u0abb\0\u0afe\0\u01d5\0\u0b41"+
    "\0\u01d5\0\u01d5\0\u0b84\0\u0bc7\0\u01d5\0\u0c0a\0\u0c4d\0\u0c90"+
    "\0\u0b41\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u0cd3\0\u0d16\0\u01d5"+
    "\0\u0d59\0\u0d9c\0\u0ddf\0\u01d5\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb"+
    "\0\u0f2e\0\u0f71\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u0fb4\0\u01d5"+
    "\0\u0ff7\0\u0218\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189"+
    "\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1"+
    "\0\u0218\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576"+
    "\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e"+
    "\0\u17d1\0\u1814\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u01d5"+
    "\0\u01d5\0\u01d5\0\u01d5\0\u1857\0\u189a\0\u01d5\0\u01d5\0\u18dd"+
    "\0\u1920\0\u01d5\0\u01d5\0\u1963\0\u19a6\0\u01d5\0\u01d5\0\u19e9"+
    "\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u0218\0\u1b38\0\u1b7b\0\u1bbe"+
    "\0\u1c01\0\u1c44\0\u0218\0\u0218\0\u1c87\0\u1cca\0\u1d0d\0\u1d50"+
    "\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68"+
    "\0\u0218\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d"+
    "\0\u2180\0\u21c3\0\u01d5\0\u2206\0\u1920\0\u01d5\0\u0218\0\u2249"+
    "\0\u228c\0\u22cf\0\u2312\0\u2355\0\u0218\0\u0218\0\u2398\0\u0218"+
    "\0\u23db\0\u241e\0\u2461\0\u24a4\0\u0218\0\u24e7\0\u252a\0\u256d"+
    "\0\u25b0\0\u0218\0\u25f3\0\u0218\0\u0218\0\u2636\0\u2679\0\u0218"+
    "\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u0218\0\u280b\0\u284e"+
    "\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\u0218\0\u0218"+
    "\0\u0218\0\u0218\0\u2a23\0\u0218\0\u2a66\0\u0218\0\u2aa9\0\u0218"+
    "\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u0218\0\u2bf8\0\u2c3b\0\u0218"+
    "\0\u0218\0\u2c7e\0\u0218\0\u0218\0\u2cc1\0\u2d04\0\u0218\0\u0218"+
    "\0\u2d47\0\u0218\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u0218"+
    "\0\u2ed9\0\u2f1c\0\u2f5f\0\u0218\0\u0218\0\u0218\0\u2fa2\0\u2fe5"+
    "\0\u0218\0\u3028\0\u306b\0\u0218\0\u0218\0\u0218";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\2\11\2\10\1\12\1\11\1\13\1\14\1\13"+
    "\1\15\1\16\1\17\4\11\1\20\2\11\1\21\1\10"+
    "\1\11\1\22\1\23\1\24\1\25\1\26\1\27\1\11"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\2\11\1\42\1\11\1\43\1\44\3\11"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\10\1\13\4\65\1\66\4\65\1\67\13\65\1\70"+
    "\1\65\1\71\57\65\1\66\4\65\1\72\13\65\1\72"+
    "\1\65\1\73\53\65\1\10\2\74\3\10\1\74\2\10"+
    "\1\0\3\10\4\74\1\10\2\74\2\10\1\74\5\10"+
    "\26\74\17\10\2\0\10\75\1\76\22\75\1\77\47\75"+
    "\25\100\1\101\2\100\1\102\52\100\1\10\2\11\2\10"+
    "\1\12\1\11\1\13\1\14\1\13\1\15\1\16\1\17"+
    "\4\11\1\20\2\11\1\21\1\10\1\11\1\22\1\23"+
    "\1\103\1\104\1\26\1\27\1\11\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\2\11"+
    "\1\42\1\11\1\43\1\44\3\11\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\10\1\13\104\0"+
    "\6\11\5\0\5\11\1\0\2\11\2\0\1\11\5\0"+
    "\26\11\23\0\1\12\2\0\1\12\6\0\1\12\2\0"+
    "\1\105\1\106\1\107\1\110\1\111\2\0\1\106\10\0"+
    "\1\110\2\0\1\111\1\110\1\0\1\105\44\0\1\13"+
    "\1\0\1\13\70\0\1\13\10\0\1\112\22\0\1\113"+
    "\43\0\1\114\16\0\1\115\166\0\1\116\5\0\1\117"+
    "\2\0\1\117\6\0\1\117\1\120\1\121\1\105\1\106"+
    "\1\107\1\110\1\111\2\0\1\106\10\0\1\110\2\0"+
    "\1\111\1\110\1\0\1\105\1\0\1\121\7\0\1\120"+
    "\30\0\1\122\6\0\1\122\4\0\1\123\105\0\1\124"+
    "\47\0\1\125\2\0\1\126\32\0\1\127\152\0\1\130"+
    "\4\0\6\11\5\0\5\11\1\0\2\11\2\0\1\11"+
    "\5\0\1\11\1\131\24\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\11\5\0\7\11\1\132\6\11"+
    "\1\133\5\11\1\134\1\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\11\5\0\1\11\1\135\4\11"+
    "\1\136\17\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\11\5\0\5\11\1\137\7\11\1\140\10\11"+
    "\22\0\6\11\5\0\5\11\1\0\2\11\2\0\1\11"+
    "\5\0\6\11\1\141\17\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\11\5\0\11\11\1\142\11\11"+
    "\1\143\2\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\144\5\0\1\11\1\145\1\146\5\11\1\147"+
    "\1\150\14\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\11\5\0\12\11\1\151\13\11\22\0\6\11"+
    "\5\0\5\11\1\0\2\11\2\0\1\11\5\0\1\11"+
    "\1\152\24\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\153\5\0\4\11\1\154\10\11\1\155\7\11"+
    "\1\156\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\1\11\1\157\3\11\1\160\6\11\1\161"+
    "\11\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\162\5\0\6\11\1\163\17\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\1\11\1\164"+
    "\7\11\1\165\3\11\1\166\10\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\167\5\0\5\11\1\170"+
    "\2\11\1\171\15\11\22\0\6\11\5\0\5\11\1\0"+
    "\2\11\2\0\1\11\5\0\15\11\1\172\10\11\111\0"+
    "\1\173\6\0\1\174\24\0\1\175\154\0\1\176\3\0"+
    "\1\177\77\0\1\200\2\0\1\201\100\0\1\202\103\0"+
    "\1\203\103\0\1\204\3\0\4\65\1\0\4\65\1\0"+
    "\13\65\1\0\1\65\1\0\53\65\1\0\2\205\3\0"+
    "\1\205\6\0\4\205\1\0\2\205\2\0\1\205\2\0"+
    "\1\206\2\0\26\205\21\0\11\207\1\0\14\207\1\210"+
    "\54\207\27\0\1\211\54\0\6\74\5\0\5\74\1\0"+
    "\2\74\2\0\1\74\5\0\26\74\54\0\1\212\57\0"+
    "\1\213\72\0\25\100\1\0\2\100\1\0\52\100\17\0"+
    "\1\105\25\0\1\105\42\0\1\122\6\0\1\122\70\0"+
    "\1\214\2\0\1\214\6\0\1\214\5\0\1\110\1\0"+
    "\1\214\12\0\1\110\3\0\1\110\24\0\1\214\12\0"+
    "\11\112\1\0\71\112\33\0\1\215\47\0\11\115\1\0"+
    "\71\115\77\0\1\216\5\0\1\117\2\0\1\117\6\0"+
    "\1\117\4\0\1\107\1\110\1\111\13\0\1\110\2\0"+
    "\1\111\1\110\41\0\1\120\2\0\2\120\5\0\1\120"+
    "\1\0\1\120\1\105\1\106\1\0\2\120\2\0\1\106"+
    "\10\0\1\120\2\0\3\120\1\105\1\0\1\120\4\0"+
    "\1\120\30\0\1\121\2\0\1\121\6\0\1\121\2\0"+
    "\1\105\1\106\5\0\1\106\16\0\1\105\37\0\1\122"+
    "\2\0\1\122\6\0\1\122\5\0\1\110\1\111\13\0"+
    "\1\110\2\0\1\111\1\110\66\0\1\217\54\0\6\11"+
    "\5\0\5\11\1\0\2\11\2\0\1\11\5\0\2\11"+
    "\1\220\23\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\11\5\0\4\11\1\221\4\11\1\222\14\11"+
    "\22\0\6\11\5\0\5\11\1\0\2\11\2\0\1\11"+
    "\5\0\21\11\1\223\4\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\224\5\0\26\11\22\0\6\11"+
    "\5\0\5\11\1\0\2\11\2\0\1\11\5\0\7\11"+
    "\1\225\16\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\226\5\0\26\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\11\5\0\2\11\1\227\23\11"+
    "\22\0\6\11\5\0\5\11\1\0\2\11\2\0\1\11"+
    "\5\0\4\11\1\230\21\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\11\5\0\12\11\1\231\13\11"+
    "\22\0\6\11\5\0\5\11\1\0\2\11\2\0\1\11"+
    "\5\0\4\11\1\232\21\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\11\5\0\16\11\1\233\7\11"+
    "\22\0\6\11\5\0\5\11\1\0\2\11\2\0\1\11"+
    "\5\0\5\11\1\234\20\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\11\5\0\16\11\1\235\7\11"+
    "\22\0\6\11\5\0\5\11\1\0\2\11\2\0\1\11"+
    "\5\0\11\11\1\236\14\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\11\5\0\1\11\1\237\24\11"+
    "\22\0\6\11\5\0\5\11\1\0\2\11\2\0\1\11"+
    "\5\0\16\11\1\240\7\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\11\5\0\21\11\1\241\4\11"+
    "\22\0\6\11\5\0\5\11\1\0\2\11\2\0\1\11"+
    "\5\0\10\11\1\242\15\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\11\5\0\1\11\1\243\24\11"+
    "\22\0\6\11\5\0\5\11\1\0\2\11\2\0\1\11"+
    "\5\0\2\11\1\244\23\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\11\5\0\1\11\1\245\24\11"+
    "\22\0\6\11\5\0\5\11\1\0\2\11\2\0\1\11"+
    "\5\0\6\11\1\246\17\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\11\5\0\4\11\1\247\21\11"+
    "\22\0\6\11\5\0\5\11\1\0\2\11\2\0\1\11"+
    "\5\0\11\11\1\250\14\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\11\5\0\25\11\1\251\22\0"+
    "\6\11\5\0\5\11\1\0\2\11\2\0\1\11\5\0"+
    "\16\11\1\252\7\11\22\0\6\11\5\0\5\11\1\0"+
    "\2\11\2\0\1\11\5\0\10\11\1\253\15\11\22\0"+
    "\6\11\5\0\5\11\1\0\2\11\2\0\1\11\5\0"+
    "\10\11\1\254\15\11\22\0\6\11\5\0\5\11\1\0"+
    "\2\11\2\0\1\11\5\0\13\11\1\255\12\11\22\0"+
    "\6\11\5\0\5\11\1\0\2\11\2\0\1\11\5\0"+
    "\1\11\1\256\1\257\23\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\11\5\0\20\11\1\260\5\11"+
    "\22\0\6\11\5\0\5\11\1\0\2\11\2\0\1\11"+
    "\5\0\2\11\1\261\3\11\1\262\17\11\120\0\1\263"+
    "\4\0\6\205\5\0\5\205\1\0\2\205\2\0\1\205"+
    "\5\0\26\205\26\0\2\264\5\0\1\264\1\0\1\264"+
    "\3\0\2\264\13\0\1\264\2\0\3\264\2\0\1\264"+
    "\4\0\1\264\55\0\1\265\55\0\1\214\2\0\1\214"+
    "\6\0\1\214\5\0\1\110\14\0\1\110\3\0\1\110"+
    "\47\0\1\266\73\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\11\5\0\3\11\1\267\22\11\22\0\6\11"+
    "\5\0\5\11\1\0\2\11\2\0\1\11\5\0\6\11"+
    "\1\270\17\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\11\5\0\2\11\1\271\23\11\22\0\6\11"+
    "\5\0\5\11\1\0\2\11\2\0\1\11\5\0\1\11"+
    "\1\272\7\11\1\273\14\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\11\5\0\13\11\1\274\12\11"+
    "\22\0\6\11\5\0\5\11\1\0\2\11\2\0\1\11"+
    "\5\0\6\11\1\275\17\11\22\0\6\11\5\0\5\11"+
    "\1\0\2\11\2\0\1\11\5\0\12\11\1\276\13\11"+
    "\22\0\6\11\5\0\5\11\1\0\2\11\2\0\1\277"+
    "\5\0\26\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\11\5\0\6\11\1\300\17\11\22\0\6\11"+
    "\5\0\5\11\1\0\2\11\2\0\1\11\5\0\6\11"+
    "\1\301\17\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\11\5\0\10\11\1\302\15\11\22\0\6\11"+
    "\5\0\5\11\1\0\2\11\2\0\1\11\5\0\12\11"+
    "\1\303\13\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\11\5\0\10\11\1\304\15\11\22\0\6\11"+
    "\5\0\5\11\1\0\2\11\2\0\1\11\5\0\17\11"+
    "\1\305\6\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\11\5\0\6\11\1\306\17\11\22\0\6\11"+
    "\5\0\5\11\1\0\2\11\2\0\1\11\5\0\4\11"+
    "\1\307\21\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\11\5\0\5\11\1\310\20\11\22\0\6\11"+
    "\5\0\5\11\1\0\2\11\2\0\1\11\5\0\4\11"+
    "\1\311\21\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\11\5\0\11\11\1\312\14\11\22\0\6\11"+
    "\5\0\5\11\1\0\2\11\2\0\1\11\5\0\10\11"+
    "\1\313\15\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\11\5\0\6\11\1\314\17\11\22\0\6\11"+
    "\5\0\5\11\1\0\2\11\2\0\1\11\5\0\11\11"+
    "\1\315\14\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\11\5\0\4\11\1\316\21\11\22\0\6\11"+
    "\5\0\5\11\1\0\2\11\2\0\1\11\5\0\12\11"+
    "\1\317\13\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\11\5\0\5\11\1\320\20\11\22\0\6\11"+
    "\5\0\5\11\1\0\2\11\2\0\1\11\5\0\11\11"+
    "\1\321\14\11\22\0\6\11\5\0\5\11\1\0\2\11"+
    "\2\0\1\11\5\0\4\11\1\322\21\11\22\0\6\11"+
    "\5\0\5\11\1\0\2\11\2\0\1\11\5\0\1\323"+
    "\25\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\22\11\1\324\3\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\11\11\1\325"+
    "\14\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\16\11\1\326\7\11\26\0\2\327\5\0"+
    "\1\327\1\0\1\327\3\0\2\327\13\0\1\327\2\0"+
    "\3\327\2\0\1\327\4\0\1\327\27\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\5\11\1\330"+
    "\20\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\16\11\1\331\7\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\5\11\1\332"+
    "\20\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\6\11\1\333\17\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\11\11\1\334"+
    "\14\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\5\11\1\335\20\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\16\11\1\336"+
    "\7\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\11\11\1\337\14\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\6\11\1\340"+
    "\17\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\4\11\1\341\21\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\5\11\1\342"+
    "\20\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\2\11\1\343\23\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\4\11\1\344"+
    "\21\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\20\11\1\345\5\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\22\11\1\346"+
    "\3\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\2\11\1\347\23\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\12\11\1\350"+
    "\13\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\2\11\1\351\23\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\6\11\1\352"+
    "\17\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\10\11\1\353\15\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\10\11\1\354"+
    "\15\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\6\11\1\355\17\11\26\0\2\356\5\0"+
    "\1\356\1\0\1\356\3\0\2\356\13\0\1\356\2\0"+
    "\3\356\2\0\1\356\4\0\1\356\27\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\16\11\1\357"+
    "\7\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\6\11\1\360\17\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\4\11\1\361"+
    "\21\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\24\11\1\362\1\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\6\11\1\363"+
    "\17\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\16\11\1\364\7\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\3\11\1\365"+
    "\6\11\1\366\13\11\22\0\6\11\5\0\5\11\1\0"+
    "\2\11\2\0\1\11\5\0\20\11\1\367\5\11\22\0"+
    "\6\11\5\0\5\11\1\0\2\11\2\0\1\11\5\0"+
    "\15\11\1\370\10\11\22\0\6\11\5\0\5\11\1\0"+
    "\2\11\2\0\1\11\5\0\16\11\1\371\7\11\22\0"+
    "\6\11\5\0\5\11\1\0\2\11\2\0\1\11\5\0"+
    "\20\11\1\372\5\11\22\0\6\11\5\0\5\11\1\0"+
    "\2\11\2\0\1\11\5\0\20\11\1\373\5\11\22\0"+
    "\6\11\5\0\5\11\1\0\2\11\2\0\1\11\5\0"+
    "\4\11\1\374\21\11\22\0\6\11\5\0\5\11\1\0"+
    "\2\11\2\0\1\11\5\0\17\11\1\375\6\11\26\0"+
    "\2\207\5\0\1\207\1\0\1\207\3\0\2\207\13\0"+
    "\1\207\2\0\3\207\2\0\1\207\4\0\1\207\27\0"+
    "\6\11\5\0\5\11\1\0\2\11\2\0\1\11\5\0"+
    "\10\11\1\376\15\11\22\0\6\11\5\0\5\11\1\0"+
    "\2\11\2\0\1\11\5\0\6\11\1\377\17\11\22\0"+
    "\6\11\5\0\5\11\1\0\2\11\2\0\1\11\5\0"+
    "\12\11\1\u0100\13\11\22\0\6\11\5\0\5\11\1\0"+
    "\2\11\2\0\1\11\5\0\2\11\1\u0101\23\11\22\0"+
    "\6\11\5\0\5\11\1\0\2\11\2\0\1\u0102\5\0"+
    "\26\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\4\11\1\u0103\21\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\6\11\1\u0104"+
    "\17\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\6\11\1\u0105\17\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\11\11\1\u0106"+
    "\14\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\16\11\1\u0107\7\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\1\11\1\u0108"+
    "\24\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\6\11\1\u0109\17\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\6\11\1\u010a"+
    "\17\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\4\11\1\u010b\21\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\16\11\1\u010c"+
    "\7\11\22\0\6\11\5\0\5\11\1\0\2\11\2\0"+
    "\1\11\5\0\3\11\1\u010d\22\11\22\0\6\11\5\0"+
    "\5\11\1\0\2\11\2\0\1\11\5\0\12\11\1\u010e"+
    "\13\11\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12462];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\12\1\3\11\20\1\6\11\1\1\1\11"+
    "\6\1\1\11\2\1\1\11\1\1\2\11\2\1\1\11"+
    "\3\1\1\0\4\11\1\1\1\0\1\11\3\1\1\11"+
    "\2\1\1\0\3\1\4\11\1\0\1\11\42\1\11\11"+
    "\2\1\2\11\1\1\1\0\2\11\2\1\2\11\43\1"+
    "\1\11\1\0\1\1\1\11\40\1\1\0\26\1\1\0"+
    "\40\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

     private int yyline;
     private int yycolumn;

     public MarcelJflexer() {}

     private static final class State {
            final int lBraceCount;
            final int state;

            public State(int state, int lBraceCount) {
                this.state = state;
                this.lBraceCount = lBraceCount;
            }

            @Override
            public String toString() {
                return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
            }
        }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;

    private int commentStart;
    private int commentDepth;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

        private LexToken commentStateToTokenType(int state) {
            switch (state) {
                case BLOCK_COMMENT:
                    return new LexToken(TokenType.BLOCK_COMMENT);
                case DOC_COMMENT:
                    return new LexToken(TokenType.DOC_COMMENT);
                default:
                    throw new IllegalArgumentException("Unexpected state: " + state);
            }
        }

  // tokens for which we need to save current buffer
  private LexToken valueToken(TokenType tokenType) {
    return new LexToken(tokenType, getTokenString());
  }
  private LexToken token(TokenType tokenType) {
    return new LexToken(tokenType, null);
  }

  public String getTokenString() {
    return zzBuffer.subSequence(getTokenStart(), getTokenEnd()).toString();
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MarcelJflexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws MarcelLexerException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new MarcelLexerException(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  throws MarcelLexerException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      // end of file

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public LexToken nextToken() throws java.io.IOException, MarcelLexerException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return commentStateToTokenType(state);
            }  // fall though
            case 271: break;
            case DOC_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return commentStateToTokenType(state);
            }  // fall though
            case 272: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return token(BAD_CHARACTER);
            } 
            // fall through
          case 108: break;
          case 2: 
            { return valueToken(IDENTIFIER);
            } 
            // fall through
          case 109: break;
          case 3: 
            { return valueToken(INTEGER);
            } 
            // fall through
          case 110: break;
          case 4: 
            { return token(WHITE_SPACE);
            } 
            // fall through
          case 111: break;
          case 5: 
            { return token(DIV);
            } 
            // fall through
          case 112: break;
          case 6: 
            { return token(NOT);
            } 
            // fall through
          case 113: break;
          case 7: 
            { return token(DOT);
            } 
            // fall through
          case 114: break;
          case 8: 
            { return token(MINUS);
            } 
            // fall through
          case 115: break;
          case 9: 
            { pushState(STRING); return token(OPEN_QUOTE);
            } 
            // fall through
          case 116: break;
          case 10: 
            { pushState(CHAR_STRING); return token(OPEN_CHAR_QUOTE);
            } 
            // fall through
          case 117: break;
          case 11: 
            { return token(BRACKETS_OPEN);
            } 
            // fall through
          case 118: break;
          case 12: 
            { return token(BRACKETS_CLOSE);
            } 
            // fall through
          case 119: break;
          case 13: 
            { return token(MUL);
            } 
            // fall through
          case 120: break;
          case 14: 
            { return token(LPAR);
            } 
            // fall through
          case 121: break;
          case 15: 
            { return token(RPAR);
            } 
            // fall through
          case 122: break;
          case 16: 
            { return token(SQUARE_BRACKETS_OPEN);
            } 
            // fall through
          case 123: break;
          case 17: 
            { return token(SQUARE_BRACKETS_CLOSE);
            } 
            // fall through
          case 124: break;
          case 18: 
            { return token(COLON);
            } 
            // fall through
          case 125: break;
          case 19: 
            { return token(SEMI_COLON);
            } 
            // fall through
          case 126: break;
          case 20: 
            { return token(PLUS);
            } 
            // fall through
          case 127: break;
          case 21: 
            { return token(MODULO);
            } 
            // fall through
          case 128: break;
          case 22: 
            { return token(QUESTION_MARK);
            } 
            // fall through
          case 129: break;
          case 23: 
            { return token(LT);
            } 
            // fall through
          case 130: break;
          case 24: 
            { return token(GT);
            } 
            // fall through
          case 131: break;
          case 25: 
            { return token(ASSIGNMENT);
            } 
            // fall through
          case 132: break;
          case 26: 
            { return token(COMMA);
            } 
            // fall through
          case 133: break;
          case 27: 
            { return valueToken(REGULAR_STRING_PART);
            } 
            // fall through
          case 134: break;
          case 28: 
            { popState(); yypushback(1); return valueToken(DANGLING_NEWLINE);
            } 
            // fall through
          case 135: break;
          case 29: 
            { popState(); return token(CLOSING_QUOTE);
            } 
            // fall through
          case 136: break;
          case 30: 
            { popState(); return valueToken(IDENTIFIER);
            } 
            // fall through
          case 137: break;
          case 31: 
            { 
            } 
            // fall through
          case 138: break;
          case 32: 
            { popState(); return token(CLOSING_CHAR_QUOTE);
            } 
            // fall through
          case 139: break;
          case 33: 
            { lBraceCount++; return valueToken(LBRACE);
            } 
            // fall through
          case 140: break;
          case 34: 
            { if (lBraceCount == 0) {
                                             popState();
                                             return token(LONG_TEMPLATE_ENTRY_END);
                                           }
                                           lBraceCount--;
                                           return valueToken(RBRACE);
            } 
            // fall through
          case 141: break;
          case 35: 
            { return valueToken(FLOAT);
            } 
            // fall through
          case 142: break;
          case 36: 
            { return token(TokenType.EOL_COMMENT);
            } 
            // fall through
          case 143: break;
          case 37: 
            { pushState(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            } 
            // fall through
          case 144: break;
          case 38: 
            { return token(DIV_ASSIGNMENT);
            } 
            // fall through
          case 145: break;
          case 39: 
            { if (zzCurrentPos == 0) {
                return token(TokenType.SHEBANG_COMMENT);
            }
            else {
                yypushback(yylength() - 1);
                return token(HASH);
            }
            } 
            // fall through
          case 146: break;
          case 40: 
            { return token(NOT_EQUAL);
            } 
            // fall through
          case 147: break;
          case 41: 
            { return token(TWO_DOTS);
            } 
            // fall through
          case 148: break;
          case 42: 
            { return token(DECR);
            } 
            // fall through
          case 149: break;
          case 43: 
            { return token(ARROW);
            } 
            // fall through
          case 150: break;
          case 44: 
            { return token(MINUS_ASSIGNMENT);
            } 
            // fall through
          case 151: break;
          case 45: 
            { return token(MUL_ASSIGNMENT);
            } 
            // fall through
          case 152: break;
          case 46: 
            { return token(IF);
            } 
            // fall through
          case 153: break;
          case 47: 
            { return token(IN);
            } 
            // fall through
          case 154: break;
          case 48: 
            { return token(AS);
            } 
            // fall through
          case 155: break;
          case 49: 
            { return token(INCR);
            } 
            // fall through
          case 156: break;
          case 50: 
            { return token(PLUS_ASSIGNMENT);
            } 
            // fall through
          case 157: break;
          case 51: 
            { return token(QUESTION_DOT);
            } 
            // fall through
          case 158: break;
          case 52: 
            { return token(LEFT_SHIFT);
            } 
            // fall through
          case 159: break;
          case 53: 
            { return token(LOE);
            } 
            // fall through
          case 160: break;
          case 54: 
            { return token(RIGHT_SHIFT);
            } 
            // fall through
          case 161: break;
          case 55: 
            { return token(GOE);
            } 
            // fall through
          case 162: break;
          case 56: 
            { return token(AND);
            } 
            // fall through
          case 163: break;
          case 57: 
            { return token(OR);
            } 
            // fall through
          case 164: break;
          case 58: 
            { return token(EQUAL);
            } 
            // fall through
          case 165: break;
          case 59: 
            { pushState(SHORT_TEMPLATE_ENTRY);
                                                        yypushback(yylength() - 1);
                                                        return token(SHORT_TEMPLATE_ENTRY_START);
            } 
            // fall through
          case 166: break;
          case 60: 
            { pushState(LONG_TEMPLATE_ENTRY); return token(LONG_TEMPLATE_ENTRY_START);
            } 
            // fall through
          case 167: break;
          case 61: 
            { return valueToken(ESCAPE_SEQUENCE);
            } 
            // fall through
          case 168: break;
          case 62: 
            { commentDepth++;
            } 
            // fall through
          case 169: break;
          case 63: 
            { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             popState();
             zzStartRead = commentStart;
             return commentStateToTokenType(state);
        }
            } 
            // fall through
          case 170: break;
          case 64: 
            { pushState(DOC_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            } 
            // fall through
          case 171: break;
          case 65: 
            { return token(IS_NOT);
            } 
            // fall through
          case 172: break;
          case 66: 
            { pushState(RAW_STRING); return token(OPEN_QUOTE);
            } 
            // fall through
          case 173: break;
          case 67: 
            { return valueToken(TYPE_INT);
            } 
            // fall through
          case 174: break;
          case 68: 
            { return valueToken(DEF);
            } 
            // fall through
          case 175: break;
          case 69: 
            { return token(FUN);
            } 
            // fall through
          case 176: break;
          case 70: 
            { return token(FOR);
            } 
            // fall through
          case 177: break;
          case 71: 
            { return token(NEW);
            } 
            // fall through
          case 178: break;
          case 72: 
            { return token(IS);
            } 
            // fall through
          case 179: break;
          case 73: 
            { int length = yytext().length();
                                    if (length <= 3) { // closing """
                                        popState();
                                        return token(CLOSING_QUOTE);
                                    }
                                    else { // some quotes at the end of a string, e.g. """ "foo""""
                                        yypushback(3); // return the closing quotes (""") to the stream
                                        return valueToken(REGULAR_STRING_PART);
                                    }
            } 
            // fall through
          case 180: break;
          case 74: 
            { return token(TokenType.BLOCK_COMMENT);
            } 
            // fall through
          case 181: break;
          case 75: 
            { return valueToken(TYPE_VOID);
            } 
            // fall through
          case 182: break;
          case 76: 
            { return token(VALUE_TRUE);
            } 
            // fall through
          case 183: break;
          case 77: 
            { return token(THIS);
            } 
            // fall through
          case 184: break;
          case 78: 
            { return token(ELSE);
            } 
            // fall through
          case 185: break;
          case 79: 
            { return valueToken(TYPE_LONG);
            } 
            // fall through
          case 186: break;
          case 80: 
            { return valueToken(TYPE_BOOL);
            } 
            // fall through
          case 187: break;
          case 81: 
            { return valueToken(TYPE_BYTE);
            } 
            // fall through
          case 188: break;
          case 82: 
            { return token(NULL);
            } 
            // fall through
          case 189: break;
          case 83: 
            { return valueToken(TYPE_CHAR);
            } 
            // fall through
          case 190: break;
          case 84: 
            { return token(WHEN);
            } 
            // fall through
          case 191: break;
          case 85: 
            { return token(FINAL);
            } 
            // fall through
          case 192: break;
          case 86: 
            { return token(VALUE_FALSE);
            } 
            // fall through
          case 193: break;
          case 87: 
            { return valueToken(TYPE_FLOAT);
            } 
            // fall through
          case 194: break;
          case 88: 
            { return token(SUPER);
            } 
            // fall through
          case 195: break;
          case 89: 
            { return valueToken(TYPE_SHORT);
            } 
            // fall through
          case 196: break;
          case 90: 
            { return token(BREAK);
            } 
            // fall through
          case 197: break;
          case 91: 
            { return token(CLASS);
            } 
            // fall through
          case 198: break;
          case 92: 
            { return token(WHILE);
            } 
            // fall through
          case 199: break;
          case 93: 
            { return token(INLINE);
            } 
            // fall through
          case 200: break;
          case 94: 
            { return token(IMPORT);
            } 
            // fall through
          case 201: break;
          case 95: 
            { return valueToken(TYPE_DOUBLE);
            } 
            // fall through
          case 202: break;
          case 96: 
            { return token(RETURN);
            } 
            // fall through
          case 203: break;
          case 97: 
            { return token(STATIC);
            } 
            // fall through
          case 204: break;
          case 98: 
            { return token(SWITCH);
            } 
            // fall through
          case 205: break;
          case 99: 
            { return token(VISIBILITY_PUBLIC);
            } 
            // fall through
          case 206: break;
          case 100: 
            { return token(EXTENDS);
            } 
            // fall through
          case 207: break;
          case 101: 
            { return token(VISIBILITY_PRIVATE);
            } 
            // fall through
          case 208: break;
          case 102: 
            { return token(PACKAGE);
            } 
            // fall through
          case 209: break;
          case 103: 
            { return token(VISIBILITY_INTERNAL);
            } 
            // fall through
          case 210: break;
          case 104: 
            { return token(CONTINUE);
            } 
            // fall through
          case 211: break;
          case 105: 
            { return token(EXTENSION);
            } 
            // fall through
          case 212: break;
          case 106: 
            { return token(VISIBILITY_PROTECTED);
            } 
            // fall through
          case 213: break;
          case 107: 
            { return token(IMPLEMENTS);
            } 
            // fall through
          case 214: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
