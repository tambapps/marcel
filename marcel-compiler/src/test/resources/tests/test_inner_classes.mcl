import static org.junit.jupiter.api.Assertions.assertEquals

SomeObject o = new SomeObject()

assertEquals("Hello World", o.foo())

class SomeObject {

  constructor() {
    SomeInnerObject innerObject = new SomeInnerObject()
    assertEquals("Goodbye world", innerObject.bar())
  }

  fun String foo() {
    return "Hello World"
  }

  class SomeInnerObject {
    constructor() {
      assertEquals("Hello World", foo())
    }
    fun String bar() {
      return "Goodbye world"
    }
  }
}


SomeObjectWithParam oWithParam = new SomeObjectWithParam()

class SomeObjectWithParam {

  constructor() {
    SomeInnerObjectWithParam innerObject = new SomeInnerObjectWithParam("me")
    assertEquals("Goodbye you", innerObject.bye("you"))
  }

  fun String greet(String p) {
    return "Hello $p"
  }

  class SomeInnerObjectWithParam {
    constructor(String p) {
      assertEquals("Hello $p", greet(p))
    }
    fun String bye(String p) {
      return "Goodbye $p"
    }
  }
}


SomeObjectWithThisParam oWithThisParam = new SomeObjectWithThisParam("dummy")

class SomeObjectWithThisParam {
    String dummy

  constructor(this.dummy) {
    SomeInnerObjectWithThisParam innerObject = new SomeInnerObjectWithThisParam("me")
    System.out.println(innerObject.bye("you"))
  }

  fun String greet(String p) {
    return "Hello $p"
  }

  class SomeInnerObjectWithThisParam {
    String p
    constructor(this.p) {
      System.out.println(greet(this.p))
    }
    fun String bye(String p) {
      return "Goodbye $p"
    }
  }
}