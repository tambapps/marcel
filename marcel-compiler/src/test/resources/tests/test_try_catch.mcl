import static org.junit.jupiter.api.Assertions.assertEquals
import static org.junit.jupiter.api.Assertions.fail

private int tryEndCount = 0
private int catchCount = 0
private int finallyCount = 0

// TODO test try with resources

tryFinally(1)
assertEquals(1, tryEndCount, "try end")
assertEquals(0, catchCount, "catch")
assertEquals(1, finallyCount, "finally")

try {
  tryFinally(0)
  fail("Should have thrown exception")
} catch (ArithmeticException e) {
}
assertEquals(0, tryEndCount, "try end")
assertEquals(0, catchCount, "catch")
assertEquals(1, finallyCount, "finally")

fun void tryFinally(int a) {
  init()
  try {
    int result = 100 / a
    tryEndCount++
  } finally {
    finallyCount++
  }
}

tryCatchFinally(1)
assertEquals(1, tryEndCount, "try end")
assertEquals(0, catchCount, "catch")
assertEquals(1, finallyCount, "finally")

tryCatchFinally(0)
assertEquals(0, tryEndCount, "try end")
assertEquals(1, catchCount, "catch")
assertEquals(1, finallyCount, "finally")

fun void tryCatchFinally(int a) {
  init()
  try {
    int result = 100 / a
    tryEndCount++
  } catch (Exception e) {
    catchCount++
  } finally {
    finallyCount++
  }
}

assertEquals(0, returningTryCatchFinally(1))
assertEquals(1, tryEndCount, "try end")
assertEquals(0, catchCount, "catch")
assertEquals(1, finallyCount, "finally")

assertEquals(1, returningTryCatchFinally(0))
assertEquals(0, tryEndCount, "try end")
assertEquals(1, catchCount, "catch")
assertEquals(1, finallyCount, "finally")

fun int returningTryCatchFinally(int a) {
  init()
  try {
    int result = 100 / a
    tryEndCount++
    return 0
  } catch (Exception e) {
    catchCount++
    return 1
  } finally {
    finallyCount++
  }
}

fun void init() {
  tryEndCount = 0
  catchCount = 0
  finallyCount = 0
}
