import marcel.lang.methods.*
import marcel.lang.extensions.*
import java.reflect.*
import marcel.lang.compile.ExtensionClass
import com.tambapps.marcel.semantic.processor.symbol.MarcelSymbolResolver
import com.tambapps.marcel.semantic.symbol.type.JavaType
import com.tambapps.marcel.semantic.symbol.method.*
import com.tambapps.marcel.semantic.symbol.Visibility
import com.tambapps.marcel.semantic.symbol.type.Nullness

/*
 * DefaultGroovyMethods doc generation
 */
private List extensionClasses = [
  TimeExtensions.class,
  CharacterExtensions.class,
  CharExtensions.class,
  CharSequenceExtensions.class,
  FileExtensions.class
]
private MarcelSymbolResolver symbolResolver = new MarcelSymbolResolver()

for (Class extensionClass in extensionClasses) {
  Map methodsPerClasses = buildMap(extensionClass)
  // we want to order types
  List types = methodsPerClasses.keySet().toList()
  types.sortBy { JavaType type -> type.className }
  for (JavaType type in types) {
    List methods = methodsPerClasses[type]
    methods.sortBy { MarcelMethod m -> m.name + m.parameters.size() }
    processExtensionClass(extensionClass, methodsPerClasses)
  }
}
/* Now handling DefaultMarcelMethods for which we want 1 file per extended type */
Class dmmExtension = DefaultMarcelMethods.class
Map methodsPerClasses = buildMap(dmmExtension)
for ((JavaType type, List methods) in methodsPerClasses) {
  methods.sortBy { MarcelMethod m -> m.name + m.parameters.size() }
  processMethods(dmmExtension, type, methods)
}

fun Map buildMap(Class clazz) {
  Map methodsPerClasses = [:].withDefault(true) { [] as List }
  for (MarcelMethod m in symbolResolver.getMethods(symbolResolver.of(clazz.name, []))) {
    if (!m.isExtension()) continue
    ExtensionMarcelMethod method = m as ExtensionMarcelMethod
    methodsPerClasses.getAt<List>(method.marcelOwnerClass).add(method)
  }
  return methodsPerClasses
}

fun void processExtensionClass(Class extensionClass, Map methodsPerClasses) {
  File directory = new File("docs/mdk/extensions")
  if (!directory.exists()) directory.mkdir()
  try (FileWriter writer = new FileWriter(directory.child("${extensionClass.simpleName}.md"))) {
    writer.write("# ${extensionClass.simpleName}\nTODO description\n\n")
    List sortedKeys = methodsPerClasses.keySet().toList()
    sortedKeys.sortBy { JavaType t -> t.simpleName }
    for (JavaType type in sortedKeys) {
      writer.write("## ${type.simpleName}\n\n")
      List methods = methodsPerClasses[type]
      methods.sortBy { MarcelMethod m -> m.name + m.parameters.size() }
      for (ExtensionMarcelMethod method in methods) {
        writeMethod(writer, method)
      }
    }
  }
}

// for DefaultMarcelMethods
fun void processMethods(Class extensionClass, JavaType type, List methods) {
  File directory = new File("docs/mdk/extensions/${extensionClass.simpleName}")
  if (!directory.exists()) directory.mkdir()
  directory.child("index.md").writeText("# ${extensionClass.simpleName}\n")
  String typeFileName = type.simpleName.replace('[]', '_array')
  try (FileWriter writer = new FileWriter(directory.child("$typeFileName.md"))) {
    writer.write("# ${type.simpleName}\n\n")
    for (ExtensionMarcelMethod method in methods) {
      writeMethod(writer, method as ExtensionMarcelMethod)
    }
  }
}

private fun void writeType(Writer writer, JavaType t, Nullness nullness = Nullness.NOT_NULL) {
  when {
    t.primitive -> "<span style='color: orange;'>$t</span>"
    t.isArray() -> {
      writeType(writer, t.asArrayType.elementsType)
      writer.write("[]")
    }
    else -> writer.write(t.simpleName)
  }
}
private fun String typeString(JavaType t) -> when {
  t.primitive -> "<span style='color: orange;'>$t</span>"
  else -> t.simpleName
}
private fun void writeMethod(Writer writer, ExtensionMarcelMethod method) {
  writer.write("### ${method.name}\n")
  writer.write("<div style=\"background-color: #2e2e2e; padding: 1em; border-radius: 8px; margin-bottom: 1em; color: #f8f8f2; font-family: monospace;\">\n")
  writer.write("<code style=\"all: unset; font-family: monospace; color: inherit;\">\n")

  if (method.visibility != Visibility.PUBLIC) {
    writer.write("<span style='opacity: 0.6;'>${method.visibility.name().toLowerCase()} </span>")
  }
  if (method.isMarcelStatic()) {
    writer.write("<span style='opacity: 0.6;'>static </span>")
  }

  writer.write("<span style='color: orange;'>fun</span> ")
  writer.write(typeString(method.returnType))
  writer.write(" <span style='color: yellow;'>${method.name}</span>(")

  for (int i in 0..<method.parameters.size()) {
    MethodParameter parameter = method.parameters[i]
    writer.write("${parameter.type.simpleName} ${parameter.name}")
    if (parameter.defaultValue != null) writer.write(" = ${parameter.defaultValue}")
    if (i < method.parameters.size() - 1) writer.write(", ")
  }
  writer.write(")")
  writer.write("</code>\n</div>\n")
  writer.write("<p style=\"margin-top: -0.5em; margin-bottom: 2em;\">\n")
  writer.write("TODO add description.\n")
  writer.write("</p>\n\n")
  writer.write("---\n\n")
}
