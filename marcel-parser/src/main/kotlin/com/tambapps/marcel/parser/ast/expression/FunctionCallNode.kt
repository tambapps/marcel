package com.tambapps.marcel.parser.ast.expression

import com.tambapps.marcel.parser.asm.AsmUtils
import com.tambapps.marcel.parser.ast.AstNode
import com.tambapps.marcel.parser.ast.AstNodeVisitor
import com.tambapps.marcel.parser.ast.ScopedNode
import com.tambapps.marcel.parser.ast.AstTypedObject
import com.tambapps.marcel.parser.ast.AstVisitor
import com.tambapps.marcel.parser.scope.Scope
import com.tambapps.marcel.parser.type.JavaMethod
import com.tambapps.marcel.parser.type.JavaType

open class FunctionCallNode constructor(override var scope: Scope, val name: String, val arguments: MutableList<ExpressionNode>,
                                        // useful for autogenerated function (e.g. switches)
                                        val method: JavaMethod? = null): ExpressionNode, ScopedNode<Scope> {

  constructor(scope: Scope, name: String, arguments: MutableList<ExpressionNode>, methodOwnerType: ExpressionNode,
              method: JavaMethod? = null): this(scope, name, arguments, method) {
    this.methodOwnerType = methodOwnerType
  }

  var methodOwnerType: ExpressionNode? = null

  override fun <T> accept(astNodeVisitor: AstNodeVisitor<T>) = astNodeVisitor.visit(this)


  override fun toString(): String {
    return name + "(" + arguments.joinToString(separator = ",") + ")"
  }

  override fun equals(other: Any?): Boolean {
    if (this === other) return true
    if (javaClass != other?.javaClass) return false

    other as FunctionCallNode

    if (name != other.name) return false
    if (arguments != other.arguments) return false

    return true
  }

  override fun hashCode(): Int {
    var result = name.hashCode()
    result = 31 * result + arguments.hashCode()
    return result
  }
}