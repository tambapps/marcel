package marcel.lang.extensions

import java.nio.charset.*
import java.nio.file.StandardOpenOption
import java.nio.file.Files as JavaFiles

extension class FileExtensions for File {

  fun String readText() -> new String(JavaFiles.readAllBytes(toPath(), StandardCharsets.UTF_8))

  fun String readText(String charset) -> new String(JavaFiles.readAllBytes(toPath()), charset)

  fun String readText(Charset charset) -> new String(JavaFiles.readAllBytes(toPath()), charset)

  fun List<String> readLines() -> JavaFiles.readAllLines(this.toPath(), StandardCharsets.UTF_8)

  fun List<String> readLines(Charset charset) -> JavaFiles.readAllLines(toPath(), charset)

  fun void writeText(CharSequence text) -> JavaFiles.writeString(toPath(), text, StandardCharsets.UTF_8)

  fun void writeText(CharSequence text, String charset) -> writeText(text, Charset.forName(charset))

  fun void writeText(CharSequence text, Charset charset) -> JavaFiles.writeString(toPath(), text, charset)

  fun void appendText(CharSequence text) -> JavaFiles.writeString(toPath(), text, StandardCharsets.UTF_8, StandardOpenOption.APPEND)

  fun void appendText(CharSequence text, String charset) -> appendText(text, Charset.forName(charset), StandardOpenOption.APPEND)

  fun void appendText(CharSequence text, Charset charset) -> JavaFiles.writeString(toPath(), text, charset, StandardOpenOption.APPEND)

  fun void writeBytes(byte[] bytes) -> JavaFiles.write(toPath(), bytes)

  fun void appendBytes(byte[] bytes) -> JavaFiles.write(toPath(), bytes, StandardOpenOption.APPEND)
}
